<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Principia Materia</title><link>https://example.docsy.dev/</link><description>Recent content on Principia Materia</description><generator>Hugo</generator><language>en</language><atom:link href="https://example.docsy.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Command line interface</title><link>https://example.docsy.dev/docs/modules/cli/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/modules/cli/</guid><description>&lt;p>All command line script for PM are stored in the &lt;code>cli&lt;/code> module, end with the suffix &lt;code>_cli&lt;/code>, and are contained within a function &lt;code>main()&lt;/code>.
In order to register a new cli, the script must be added to
the &lt;code>setup.cfg&lt;/code> file. Consider the example of the script &lt;code>irr_rep_prod_cli.py&lt;/code>, we would add
one entry to the console_scripts as&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># setup.cfg file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">console_scripts&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">pm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">lid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">principia_materia&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">lid_cli&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">pm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">irr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">rep&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">prod&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">principia_materia&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">irr_rep_prod_cli&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">main&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is cumbersome, so we have a script to automatically regenerate this file:&lt;/p></description></item><item><title>Input tags</title><link>https://example.docsy.dev/docs/functionality/input_tags/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/functionality/input_tags/</guid><description>&lt;h2 id="list-of-input-tags">List of Input Tags&lt;a class="td-heading-self-link" href="#list-of-input-tags" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>&lt;a href="#lattice_vectors">lattice_vectors,&lt;/a>
&lt;a href="#basis_atoms">basis_atoms,&lt;/a>&lt;/p>
&lt;h3 id="lattice_vectors">lattice_vectors&lt;a class="td-heading-self-link" href="#lattice_vectors" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;p>Testing 1 2 3&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">&lt;/th>
 &lt;th style="text-align: left">&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">&lt;em>type:&lt;/em>&lt;/td>
 &lt;td style="text-align: left">real, matrix&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;em>dimension:&lt;/em>&lt;/td>
 &lt;td style="text-align: left">3x3&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;em>scripts:&lt;/em>&lt;/td>
 &lt;td style="text-align: left">xx, yy&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>&lt;em>type:&lt;/em> matrix&lt;/p>
&lt;p>&lt;em>dimension:&lt;/em> 3x3&lt;/p>
&lt;h3 id="basis_atoms">basis_atoms&lt;a class="td-heading-self-link" href="#basis_atoms" aria-label="Heading self-link">&lt;/a>&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Name&lt;/th>
 &lt;th style="text-align: left">Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">lattice_vectors&lt;/td>
 &lt;td style="text-align: left">Lattice vectors in three dimensions, specified by a row-stacked 3x3 matrix.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">basis_atoms&lt;/td>
 &lt;td style="text-align: left">Basis atoms of crystal structure.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">supa&lt;/td>
 &lt;td style="text-align: left">A matrix of integers which left multiplies lattice_vectors to create a superlattice.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">axial_strain&lt;/td>
 &lt;td style="text-align: left">A vector of three floats which specifies the axial strain.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">strain&lt;/td>
 &lt;td style="text-align: left">A 3x3 real, symmetric matrix which specifies a general state of strain.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">point_group&lt;/td>
 &lt;td style="text-align: left">A string specifying the point group in Schoenfiles notation.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">kpoint&lt;/td>
 &lt;td style="text-align: left">A three dimensional vector specifying a kpoint.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">qpoint&lt;/td>
 &lt;td style="text-align: left">A three dimensional vector specifying a qpoint.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">kpoint_mesh&lt;/td>
 &lt;td style="text-align: left">A vector of three integers, specifying the kpoint mesh for electrons.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">qpoint_mesh&lt;/td>
 &lt;td style="text-align: left">A vector of three integers, specifying the qpoint mesh for phonons.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">kpoint_path&lt;/td>
 &lt;td style="text-align: left">A row stacked matrix of kpoints used to create a path through the BZ for plotting electronic bands.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">qpoint_path&lt;/td>
 &lt;td style="text-align: left">A row stacked matrix of qpoints used to create a path through the BZ for plotting phononic bands.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">force_constants&lt;/td>
 &lt;td style="text-align: left">A dictionary with keys being three dimensional vectors and values being NxN matrices, where N is the number of degrees of freedom in the unit cell.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="tags-with-vector-or-matrix-values">Tags with vector or matrix values&lt;a class="td-heading-self-link" href="#tags-with-vector-or-matrix-values" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Many variables will be vectors or matrices, and all such variables will
be processed by our text parser. Below are several examples which illustrate
the variety of different ways that vectors may be input.&lt;/p></description></item><item><title>Translation Group</title><link>https://example.docsy.dev/docs/modules/translation-group/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/modules/translation-group/</guid><description>&lt;p>When performing calculations, we need to use various properties of both the infinite translation group (Lattice)
and the finite translation group (LatticeFTG).
The infinite translation group contains the lattice vectors, and computes various information from them
(e.g. vector lengths and angles, volume, reciprocal lattice, etc).
The FTG
is naturally characterized by a supercell \(\hat{S}_{BZ}\), and LatticeFTG derives from Lattice.
Finding all translation points within a given supercell is a key task.
Similarly,
another key task is finding all the k-points commensurate with a given FTG, but this is
currently execute in the separate kpoints class.&lt;/p></description></item><item><title>Data Aggregator</title><link>https://example.docsy.dev/docs/data_management/data-wrapper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/data_management/data-wrapper/</guid><description>&lt;p>Like many python-based application, PM will need to take input data from the
command line and or YAML input files. A mechanism is needed to characterize
the data, enforce the data type of the input data, and possibly do some
preprocessing of the data. Data Aggregator handles these tasks.&lt;/p>
&lt;h2 id="descriptors">Descriptors&lt;a class="td-heading-self-link" href="#descriptors" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Input data is characterized by descriptors. A descriptor describes a set of data
associated with a class, a command line interface, or some other structure.
The descriptor will normally be named by the class or command line interface
they correspond to. Consider the &lt;code>Lattice&lt;/code>, &lt;code>Cluster&lt;/code>, and &lt;code>Crystal&lt;/code> classes,
where &lt;code>Crystal&lt;/code> derives from the preceding two classes.&lt;/p></description></item><item><title>Crystal Structure</title><link>https://example.docsy.dev/docs/functionality/xtal-structure/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/functionality/xtal-structure/</guid><description>&lt;p>For many different tasks performed in the PM suite, a crystal structure, or
some component of a crystal structure, must be provided to the code. Most
likely, this will be done using a yaml input file, and the two required key words
are &lt;strong>vec&lt;/strong> and &lt;strong>atoms&lt;/strong>, which will contain the lattice vectors and the basis atoms, respectively.
Considering the flourite structure, the most straightforward yaml file would be:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># xtal.yml&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">vec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.000000&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">atoms&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">Ca&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">F&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.25&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.25&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.25&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.75&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.75&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.75&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The code will infer that there is one basis atom labeled &lt;em>Ca&lt;/em> and two basis atoms labeled &lt;em>F&lt;/em>.&lt;/p></description></item><item><title>General Utility for crystals</title><link>https://example.docsy.dev/docs/functionality/periodica/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/functionality/periodica/</guid><description>&lt;p>Here we provide some of the basic functionality for periodica. A crystal structure
file must be provided on the command line, either as a filename or as standard input.
The crystal structure is simply output if no other
commands are provided. Let us use &lt;code>pm-prototype&lt;/code> to look at some examles.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># start with perovskite&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pm-prototype-xtal --perovskite &amp;gt; xtal.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pm-periodica xtal.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># or we can simply do this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pm-prototype-xtal --perovskite &lt;span style="color:#000;font-weight:bold">|&lt;/span> pm-periodica
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In both cases, the output will be:&lt;/p></description></item><item><title>Symmetrizing displacements</title><link>https://example.docsy.dev/docs/functionality/xtal-symmetrization/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/functionality/xtal-symmetrization/</guid><description>&lt;p>Here we illustrate how to symmtrize displacements at a given q-point according to irreducible representations
of the little group using the script &lt;strong>pm-disp-qrep&lt;/strong>. Take the example of \(\bm{q}=(\frac{1}{2},\frac{1}{2},\frac{1}{2})\)
in cubic SrTiO\(_3\). We will use &lt;strong>pm-prototype-xtal&lt;/strong> to generate the crystal structure file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ pm-prototype-xtal --perovskite &amp;gt; xtal.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Printing out the irreducible representations, we have&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ pm-disp-qrep xtal.yml --point-group Oh --qpoint 1/2,1/2,1/2 --print-irreps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>OrbitKey&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Sr&amp;#39;&lt;/span>, &lt;span style="color:#000">index&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T2g
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OrbitKey&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Ti&amp;#39;&lt;/span>, &lt;span style="color:#000">index&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T1u
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OrbitKey&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;O&amp;#39;&lt;/span>, &lt;span style="color:#000">index&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>0, 1, 2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A1g+Eg+T1g+T2g
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also print out the irreducible representation vectors.&lt;/p></description></item><item><title>Symmetry</title><link>https://example.docsy.dev/docs/modules/symmetry/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/modules/symmetry/</guid><description>&lt;p>Here we encode all information about the crystallographic point groups. In the near future, we will add space
group information here as well.&lt;/p>
&lt;h2 id="cornwell_group_matrices">Cornwell_group_matrices&lt;a class="td-heading-self-link" href="#cornwell_group_matrices" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="cornwell_point_group">Cornwell_point_group&lt;a class="td-heading-self-link" href="#cornwell_point_group" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="pointgroup">PointGroup&lt;a class="td-heading-self-link" href="#pointgroup" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="get_little_group">get_little_group&lt;a class="td-heading-self-link" href="#get_little_group" aria-label="Heading self-link">&lt;/a>&lt;/h2></description></item><item><title>Database</title><link>https://example.docsy.dev/docs/data_management/database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/data_management/database/</guid><description/></item><item><title>Products of Irreducible Representations</title><link>https://example.docsy.dev/docs/functionality/irrep-product/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/functionality/irrep-product/</guid><description>&lt;p>A common group theoretical task is the direct product or symmetric direct product of irreducible representations. The composition of a product is obtained as&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pm-irrep-product --point-group Oh --irreps T2g,T2g
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># T2gxT2g = A1g+Eg+T1g+T2g &lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The composition of a &lt;em>symmetric&lt;/em> product is obtained as&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pm-irrep-product --point-group Oh --irreps T2g,T2g --symmetric 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># [T2gxT2g] = A1g+Eg+T2g&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>An arbitrary number of irreps can be handled&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pm-irrep-product --point-group Oh --irreps T2g,T2g,Eg,Eg,A2g
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># output&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># T2gxT2gxEgxEgxA2g = 2A1g+2A2g+4Eg+4T1g+4T2g&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Another important task is constructing the irreducible representation vectors of the product
representation in terms of the rows of the original irreducible representations.&lt;/p></description></item><item><title>Representation</title><link>https://example.docsy.dev/docs/modules/representation/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/modules/representation/</guid><description>&lt;p>This module contains all classes relevant to building a representation of a group,
finding the composition in terms of irreducible representations, and building irreducible
vectors.&lt;/p>
&lt;h2 id="baserepresentation">BaseRepresentation&lt;a class="td-heading-self-link" href="#baserepresentation" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="charmblochrep">CharmBlochRep&lt;a class="td-heading-self-link" href="#charmblochrep" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="shiftmode">ShiftMode&lt;a class="td-heading-self-link" href="#shiftmode" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="clusterrep">ClusterRep&lt;a class="td-heading-self-link" href="#clusterrep" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="dispclusterrep">DispClusterRep&lt;a class="td-heading-self-link" href="#dispclusterrep" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="singletensorrep">SingleTensorRep&lt;a class="td-heading-self-link" href="#singletensorrep" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="directproduct">DirectProduct&lt;a class="td-heading-self-link" href="#directproduct" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="symmetricdirectproduct">SymmetricDirectProduct&lt;a class="td-heading-self-link" href="#symmetricdirectproduct" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="starcharmblochrep-and-stars">StarCharmBlochRep and Stars&lt;a class="td-heading-self-link" href="#starcharmblochrep-and-stars" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="productofqirreps">ProductofQIrreps&lt;a class="td-heading-self-link" href="#productofqirreps" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="symmetricproductofqirreps">SymmetricProductofQIrreps&lt;a class="td-heading-self-link" href="#symmetricproductofqirreps" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="qstarrep">QStarRep&lt;a class="td-heading-self-link" href="#qstarrep" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;h2 id="symmetricqstarrep">SymmetricQStarRep&lt;a class="td-heading-self-link" href="#symmetricqstarrep" aria-label="Heading self-link">&lt;/a>&lt;/h2></description></item><item><title>hdf5</title><link>https://example.docsy.dev/docs/data_management/hdf5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/data_management/hdf5/</guid><description/></item><item><title>Compute Irreducible Derivative</title><link>https://example.docsy.dev/docs/functionality/compute-id/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/functionality/compute-id/</guid><description>&lt;p>Within this package we can compute irreducible derivatives of phonons and phonon interactions at a given order with either LID or BID approach.
The theory behind these approaches are described in the following paper:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://doi.org/10.1103/PhysRevB.100.014303">L. Fu, M. Kornbluth, Z. Cheng, and C. A. Marianetti, Phys. Rev. B 100, 014303 (2019)&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Specifically, we can execute the LID, SS-BID and HS-BID approaches from the command line using the following commands:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>pm-lid-mesh&lt;/code>: compute irreducible derivatives of a given FTG and order using LID method;&lt;/p></description></item><item><title>Finite Difference</title><link>https://example.docsy.dev/docs/modules/finite-difference/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/modules/finite-difference/</guid><description>&lt;p>Finite difference is used to compute phonons and phonon interactions in PM, and this module isolates
all the tasks associated with performing finite difference. Here we give some examples to illustrate
the key features.&lt;/p>
&lt;p>Let us consider a potential with three variables, labeled 0, 1, 2, and set up all derivatives
to second order.
Begin by instantiating the class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">principia_materia.finite_difference.finite_difference_np&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">FiniteDifferenceNP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">fd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">FiniteDifferenceNP&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Set all the derivatives to be evaluated:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">fd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set_deriv&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">varset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000">ordset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Set the deltas to be the same for all variables and setup the finite
difference amplitudes:&lt;/p></description></item><item><title>Phonon Linewidth and Thermal Conductivity</title><link>https://example.docsy.dev/docs/functionality/phonon-linewidth/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/functionality/phonon-linewidth/</guid><description>&lt;p>Second and third order irreducible derivatives must be computed first, as described &lt;a href="../compute-id">here&lt;/a>,
and the second and third order force constants may then be used
to predict the phonon linewidth using perturbation theory. The phonons and the linewidths can then be used
to computed thermal conductivity with the relaxation time approximation.&lt;/p>
&lt;h2 id="phonon-linewidth">Phonon Linewidth&lt;a class="td-heading-self-link" href="#phonon-linewidth" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Here we continue the NaCl example from &lt;a href="../compute-id">before&lt;/a>.&lt;/p>
&lt;p>First, we need to prepare a configuration file &lt;code>config.yml&lt;/code> for the &lt;code>pm-conductivity&lt;/code> command:&lt;/p></description></item><item><title>Search Results</title><link>https://example.docsy.dev/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/search/</guid><description/></item></channel></rss>