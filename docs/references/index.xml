<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API References on Principia Materia</title><link>https://example.docsy.dev/docs/references/</link><description>Recent content in API References on Principia Materia</description><generator>Hugo</generator><language>en</language><atom:link href="https://example.docsy.dev/docs/references/index.xml" rel="self" type="application/rss+xml"/><item><title>Module principia_materia.cli</title><link>https://example.docsy.dev/docs/references/principia_materia.cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.cli.html</guid><description>principia_materia.cli package Submodules principia_materia.cli.bid_cli module
BIDCLI
BIDCLI.set_defaults()
BIDCLI.set_object()
principia_materia.cli.cli_helper module
check_input()
get_job_handlers()
parse_args()
set_dynamic_tensors_wrapper()
set_errortail_wrapper()
set_finite_displacements_wrapper()
set_fourier_interpolation_wrapper()
set_irreducible_derivatives_wrapper()
set_job_interface_wrapper()
set_lattice_dynamic_wrapper()
set_structure_arguments()
set_structure_wrapper()
wrapper_to_argparse()
principia_materia.cli.hsbid_cli module
HSBIDCLI
HSBIDCLI.set_defaults()
HSBIDCLI.set_object()
principia_materia.cli.jobs_cli module
main()
setup_parsers()
principia_materia.cli.lid_cli module
get_lid()
main()
setup_parsers()
principia_materia.cli.lid_mesh_cli module
LIDMeshCLI
LIDMeshCLI.set_defaults()
LIDMeshCLI.set_object()
principia_materia.cli.phonon_band_dos_cli module
main()
setup_parsers()
Module contents</description></item><item><title>Module principia_materia.cli.bid_cli</title><link>https://example.docsy.dev/docs/references/principia_materia.cli.bid_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.cli.bid_cli.html</guid><description>principia_materia.cli.bid_cli module class principia_materia.cli.bid_cli.BIDCLI() Bases: BaseIDCLI
set_defaults() set_object()</description></item><item><title>Module principia_materia.cli.cli_helper</title><link>https://example.docsy.dev/docs/references/principia_materia.cli.cli_helper.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.cli.cli_helper.html</guid><description>principia_materia.cli.cli_helper module principia_materia.cli.cli_helper.check_input(data, required=[]) principia_materia.cli.cli_helper.get_job_handlers(data, structure, pg=None, create_db=False) principia_materia.cli.cli_helper.parse_args(parser, wrapper, args=None, defaults={}) principia_materia.cli.cli_helper.set_dynamic_tensors_wrapper(wrapper, include_load=False, include_save=True) principia_materia.cli.cli_helper.set_errortail_wrapper(wrapper) principia_materia.cli.cli_helper.set_finite_displacements_wrapper(wrapper, include_supa=False) principia_materia.cli.cli_helper.set_fourier_interpolation_wrapper(wrapper, include_load=False, include_save=True) principia_materia.cli.cli_helper.set_irreducible_derivatives_wrapper(wrapper, include_load=False, include_save=True) principia_materia.cli.cli_helper.set_job_interface_wrapper(wrapper) principia_materia.cli.cli_helper.set_lattice_dynamic_wrapper(wrapper, include_Qpoint=False, include_order=True, include_extra=True) principia_materia.cli.cli_helper.set_structure_arguments(parser) principia_materia.cli.cli_helper.set_structure_wrapper(wrapper) principia_materia.cli.cli_helper.wrapper_to_argparse(wrapper, parser, exclude=[], defaults={})</description></item><item><title>Module principia_materia.cli.hsbid_cli</title><link>https://example.docsy.dev/docs/references/principia_materia.cli.hsbid_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.cli.hsbid_cli.html</guid><description>principia_materia.cli.hsbid_cli module class principia_materia.cli.hsbid_cli.HSBIDCLI() Bases: BaseIDCLI
set_defaults() set_object()</description></item><item><title>Module principia_materia.cli.jobs_cli</title><link>https://example.docsy.dev/docs/references/principia_materia.cli.jobs_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.cli.jobs_cli.html</guid><description>principia_materia.cli.jobs_cli module principia_materia.cli.jobs_cli.main(args=None) principia_materia.cli.jobs_cli.setup_parsers()</description></item><item><title>Module principia_materia.cli.lid_cli</title><link>https://example.docsy.dev/docs/references/principia_materia.cli.lid_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.cli.lid_cli.html</guid><description>principia_materia.cli.lid_cli module principia_materia.cli.lid_cli.get_lid(data, tol=1e-06) principia_materia.cli.lid_cli.main(args=None) principia_materia.cli.lid_cli.setup_parsers()</description></item><item><title>Module principia_materia.cli.lid_mesh_cli</title><link>https://example.docsy.dev/docs/references/principia_materia.cli.lid_mesh_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.cli.lid_mesh_cli.html</guid><description>principia_materia.cli.lid_mesh_cli module class principia_materia.cli.lid_mesh_cli.LIDMeshCLI() Bases: BaseIDCLI
set_defaults() set_object()</description></item><item><title>Module principia_materia.cli.phonon_band_dos_cli</title><link>https://example.docsy.dev/docs/references/principia_materia.cli.phonon_band_dos_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.cli.phonon_band_dos_cli.html</guid><description>principia_materia.cli.phonon_band_dos_cli module principia_materia.cli.phonon_band_dos_cli.main(args=None) principia_materia.cli.phonon_band_dos_cli.setup_parsers()</description></item><item><title>Module principia_materia.constants</title><link>https://example.docsy.dev/docs/references/principia_materia.constants.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.constants.html</guid><description>principia_materia.constants package Submodules principia_materia.constants.periodic_table module
principia_materia.constants.physical_constant module
PhysicalConstant
PhysicalConstant.data_parse()
PhysicalConstant.existing_units
principia_materia.constants.point_group_notation_table module
principia_materia.constants.unit_conversion module
UnitConversion
UnitConversion.data_parse()
UnitConversion.find_path()
Module contents</description></item><item><title>Module principia_materia.constants.periodic_table</title><link>https://example.docsy.dev/docs/references/principia_materia.constants.periodic_table.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.constants.periodic_table.html</guid><description>principia_materia.constants.periodic_table module</description></item><item><title>Module principia_materia.constants.physical_constant</title><link>https://example.docsy.dev/docs/references/principia_materia.constants.physical_constant.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.constants.physical_constant.html</guid><description>principia_materia.constants.physical_constant module class principia_materia.constants.physical_constant.PhysicalConstant(data, name=None, default_unit=None) Bases: object
A physical constant in a given units
This class will construct a given physical constant in different units. with provided data at construction.
Parameters
data (str) – Table of constant values data. (See below for format eamples.)
name (str, optional, default to None) – Name of the constant.
default_unit (str, optional, default to None) – The default unit for the constant. If None, default to the first in the provided data.</description></item><item><title>Module principia_materia.constants.point_group_notation_table</title><link>https://example.docsy.dev/docs/references/principia_materia.constants.point_group_notation_table.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.constants.point_group_notation_table.html</guid><description>principia_materia.constants.point_group_notation_table module</description></item><item><title>Module principia_materia.constants.unit_conversion</title><link>https://example.docsy.dev/docs/references/principia_materia.constants.unit_conversion.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.constants.unit_conversion.html</guid><description>principia_materia.constants.unit_conversion module class principia_materia.constants.unit_conversion.UnitConversion(data) Bases: object
Find unit conversion coefficients
This class construct a graph of different units and find a path within the graph the calculate unit conversion coefficients.
Parameters
data (str) – Table of unit conversion data. (See below for format eamples.)
static data_parse(data) classmethod find_path(graph, start, end, path=[])</description></item><item><title>Module principia_materia.hamiltonian</title><link>https://example.docsy.dev/docs/references/principia_materia.hamiltonian.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.hamiltonian.html</guid><description>principia_materia.hamiltonian package Submodules principia_materia.hamiltonian.electron_hamiltonian module
ElectronHamiltonian
ElectronHamiltonian.diagonalize_hamiltonians()
ElectronHamiltonian.get_embeded_self_energy()
ElectronHamiltonian.get_fermi_energy()
ElectronHamiltonian.get_hamiltonian_matrices_at_kpoints()
ElectronHamiltonian.get_state()
ElectronHamiltonian.get_total_energy()
ElectronHamiltonian.hartree_fock()
ElectronHamiltonian.set_density_matrix()
ElectronHamiltonian.set_fermi_energy()
ElectronHamiltonian.set_hamiltonian()
ElectronHamiltonian._hamiltonian ElectronHamiltonian.set_nd()
ElectronHamiltonian.set_self_energy()
ElectronHamiltonian.set_total_energy()
principia_materia.hamiltonian.hamiltonian module
Hamiltonian
Hamiltonian.compute_DOS()
Hamiltonian._dos
Hamiltonian._cdos
Hamiltonian.compute_PDOS()
Hamiltonian._pdos
Hamiltonian._cpdos
Hamiltonian.decimal
Hamiltonian.diagonalize_hamiltonians()
Hamiltonian.get_hamiltonian_matrices_at_kpoints()
Hamiltonian.is_kpoints_from_mesh
Hamiltonian.nspin
Hamiltonian.set_charmblochrep()
Hamiltonian.set_eigenvalues()
Hamiltonian.set_hamiltonian()
Hamiltonian.set_hamiltonian_at_kpoints()
Hamiltonian.set_hamiltonian_from_mesh()
Hamiltonian.set_tetrahedra()
Hamiltonian.spin
Hamiltonian.units
principia_materia.hamiltonian.model_hamiltonian module
ModelHamiltonian
ModelHamiltonian.from_dict()
ModelHamiltonian.get_hamiltonian_at_kpoint()
ModelHamiltonian.hamiltonian_matrices
ModelHamiltonian.nortbials
ModelHamiltonian.set_hamiltonian()
ModelHamiltonian.tpoints
format_hamiltonian_to_yaml()
get_ModelHamiltonian_hdf5_wrapper()
get_ModelHamiltonian_yaml_wrapper()
get_modelhamiltonian_from_hdf5()
get_modelhamiltonian_from_yaml()
load_hamiltonian()
save_modelhamiltonian_to_hdf5()
save_modelhamiltonian_to_yaml()
principia_materia.hamiltonian.phonon_hamiltonian module
PhononHamiltonian
PhononHamiltonian.diagonalize_hamiltonians()
PhononHamiltonian.get_hamiltonian_matrices_at_kpoints()
PhononHamiltonian.set_hamiltonian()
PhononHamiltonian._hamiltonian Module contents</description></item><item><title>Module principia_materia.hamiltonian.electron_hamiltonian</title><link>https://example.docsy.dev/docs/references/principia_materia.hamiltonian.electron_hamiltonian.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.hamiltonian.electron_hamiltonian.html</guid><description>principia_materia.hamiltonian.electron_hamiltonian module class principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian(structure, mesh=None, pg=&amp;lsquo;C1&amp;rsquo;, nspin=1, nelect=None, fermi=None, ncor=0, U=0, units=&amp;lsquo;eV&amp;rsquo;, verbosity=1, tol=1e-06) Bases: Hamiltonian
Parameters
nelect (int, optional, default to None) – Number of valence electrons.
fermi (float, optional, default to None) – Fermy energy, in unit of eV.
ncor (int, optional, default to None) – Number of correlated orbitals.
U (int, optional, default to 0) – The Coulumb hamiltonian term U.
diagonalize_hamiltonians(hamiltonians_matrices, UPLO=&amp;lsquo;L&amp;rsquo;) Diagonalize and compute the eigenvalues hamiltonians in reciprocal space.</description></item><item><title>Module principia_materia.hamiltonian.hamiltonian</title><link>https://example.docsy.dev/docs/references/principia_materia.hamiltonian.hamiltonian.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.hamiltonian.hamiltonian.html</guid><description>principia_materia.hamiltonian.hamiltonian module class principia_materia.hamiltonian.hamiltonian.Hamiltonian(structure, mesh=None, pg=&amp;lsquo;C1&amp;rsquo;, nspin=1, units=&amp;lsquo;eV&amp;rsquo;, verbosity=1, tol=1e-06) Bases: object
The Hamiltonian of a system.
compute_DOS(nbins, return_cdos=False) Compute density of states for energies between the minimum and maximum values of eigenvalues.
Parameters
nbins (int) – The number of energies to evaluate between the minimum and maximum eigenvalues.
_dos() Density of states.
Type
array of float, shape(nbins, nspins)
_cdos() Cumulative density of states.
Type
array of float, shape(nbins, nspins)</description></item><item><title>Module principia_materia.hamiltonian.model_hamiltonian</title><link>https://example.docsy.dev/docs/references/principia_materia.hamiltonian.model_hamiltonian.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.hamiltonian.model_hamiltonian.html</guid><description>principia_materia.hamiltonian.model_hamiltonian module class principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian(dim=3, ftmode=0) Bases: object
classmethod from_dict(data, ftmode=0) get_hamiltonian_at_kpoint(kpoints) property hamiltonian_matrices() property nortbials() set_hamiltonian(tpoints, hamiltonian_matrices) property tpoints() principia_materia.hamiltonian.model_hamiltonian.format_hamiltonian_to_yaml(obj) principia_materia.hamiltonian.model_hamiltonian.get_ModelHamiltonian_hdf5_wrapper() principia_materia.hamiltonian.model_hamiltonian.get_ModelHamiltonian_yaml_wrapper() principia_materia.hamiltonian.model_hamiltonian.get_modelhamiltonian_from_hdf5(h5file) principia_materia.hamiltonian.model_hamiltonian.get_modelhamiltonian_from_yaml(filename) principia_materia.hamiltonian.model_hamiltonian.load_hamiltonian(data) principia_materia.hamiltonian.model_hamiltonian.save_modelhamiltonian_to_hdf5(obj, h5file=&amp;lsquo;model_hamiltonian.hdf5&amp;rsquo;, overwrite=False) principia_materia.hamiltonian.model_hamiltonian.save_modelhamiltonian_to_yaml(obj, filename=&amp;lsquo;model_hamiltonian.hdf5&amp;rsquo;, overwrite=False)</description></item><item><title>Module principia_materia.hamiltonian.phonon_hamiltonian</title><link>https://example.docsy.dev/docs/references/principia_materia.hamiltonian.phonon_hamiltonian.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.hamiltonian.phonon_hamiltonian.html</guid><description>principia_materia.hamiltonian.phonon_hamiltonian module class principia_materia.hamiltonian.phonon_hamiltonian.PhononHamiltonian(structure, mesh=None, pg=&amp;lsquo;C1&amp;rsquo;, units=&amp;lsquo;THz&amp;rsquo;, verbosity=1, tol=1e-06) Bases: Hamiltonian
diagonalize_hamiltonians(hamiltonians_matrices, UPLO=&amp;lsquo;L&amp;rsquo;) Diagonalize and compute the phonon frequencies of dynamic matrices in reciprocal space.
Returns
eigenvalues (array of float, shape(N, nspin, norbitals))
eigenvectors (array of float, shape(N, nspin, norbitals, norbitals))
get_hamiltonian_matrices_at_kpoints(kpoints) Get hamiltonian matrices at k-points
Parameters
kpoints (array of float or Fraction, shape(dim, ) or shape(N, dim)) – k-points.
Returns
hamiltonians_matrices – Interaction matrices.
Return type
array of complex, shape(norbitals, norbitals) or shape(N, norbitals, norbitals)</description></item><item><title>Module principia_materia.io_interface</title><link>https://example.docsy.dev/docs/references/principia_materia.io_interface.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.io_interface.html</guid><description>principia_materia.io_interface package Submodules principia_materia.io_interface.array_io module
principia_materia.io_interface.base_data_wrapper module
BaseDataWrapper
BaseDataWrapper.add_item()
BaseDataWrapper.copy()
BaseDataWrapper.delete_item()
BaseDataWrapper.dump()
BaseDataWrapper.dumps()
BaseDataWrapper.get_alias_map()
BaseDataWrapper.get_all_names_aliases()
BaseDataWrapper.load()
BaseDataWrapper.loads()
BaseDataWrapper.register_dtype()
BaseDataWrapper.self_check()
BaseDataWrapper.verify_data()
principia_materia.io_interface.compute_job module
ComputeJob
ComputeJob.copy_files()
ComputeJob.create_job()
ComputeJob.get_born_effective_charges()
ComputeJob.get_cutoff()
ComputeJob.get_dielectric_tensor()
ComputeJob.get_energy()
ComputeJob.get_forces()
ComputeJob.get_kmesh()
ComputeJob.get_magnetic_moments()
ComputeJob.get_natoms()
ComputeJob.get_relaxation_displacement()
ComputeJob.get_stress()
ComputeJob.initialize_configuration()
ComputeJob.is_job_finished
ComputeJob.path
ComputeJob.rescale_kmesh()
ComputeJob.set_kmesh()
ComputeJob.set_output()
ComputeJob.structure
principia_materia.io_interface.compute_job_series module
ComputeJobSeries
ComputeJobSeries.config_path
ComputeJobSeries.create_directory()
ComputeJobSeries.create_job()
ComputeJobSeries.create_jobs()
ComputeJobSeries.get_born_effective_charges_from_job()
ComputeJobSeries.get_compute_job()
ComputeJobSeries.get_dielectric_tensor_from_job()
ComputeJobSeries.get_energy_from_job()
ComputeJobSeries.get_forces_from_job()
ComputeJobSeries.get_metadata_path()
ComputeJobSeries.get_results_from_jobs()
ComputeJobSeries.get_stress_from_job()
ComputeJobSeries.save_metadata()
ComputeJobSeries.series_exists
ComputeJobSeries.set_static_files()
ComputeJobSeries.structure
principia_materia.io_interface.data_wrapper module
DataWrapper
DataWrapper.dump()
DataWrapper.dumps()
DataWrapper.load()
DataWrapper.load_dict()
DataWrapper.load_generic()
DataWrapper.loads()</description></item><item><title>Module principia_materia.io_interface.array_io</title><link>https://example.docsy.dev/docs/references/principia_materia.io_interface.array_io.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.io_interface.array_io.html</guid><description>principia_materia.io_interface.array_io module</description></item><item><title>Module principia_materia.io_interface.base_data_wrapper</title><link>https://example.docsy.dev/docs/references/principia_materia.io_interface.base_data_wrapper.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.io_interface.base_data_wrapper.html</guid><description>principia_materia.io_interface.base_data_wrapper module class principia_materia.io_interface.base_data_wrapper.BaseDataWrapper(title=None) Bases: ABC
A container stores how to process the dumping/loading of a collection of data
An object oriented wrapper to load and dump data in a certain format.
It’s also designed multiple wrappers can be added up to form a wrapper that handles all the data contained in every one of the sub-wrappers.
Parameters
title (str, default to None) – A comment description for the file.</description></item><item><title>Module principia_materia.io_interface.compute_job</title><link>https://example.docsy.dev/docs/references/principia_materia.io_interface.compute_job.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.io_interface.compute_job.html</guid><description>principia_materia.io_interface.compute_job module class principia_materia.io_interface.compute_job.ComputeJob(path, structure=None, jobinput=None, joboutput=None) Bases: object
A computation job.
An abstract class that provides a framework to write interfaces to various compute engines to work with this package.
This class holds 1 compute job. It is capable of processing configurations, creating a compute job, parsing certain output of the compute job, and more. Due to the large size of common computation runs, the outputs of the compute job are parse only when they are needed.</description></item><item><title>Module principia_materia.io_interface.compute_job_series</title><link>https://example.docsy.dev/docs/references/principia_materia.io_interface.compute_job_series.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.io_interface.compute_job_series.html</guid><description>principia_materia.io_interface.compute_job_series module class principia_materia.io_interface.compute_job_series.ComputeJobSeries(structure, root_directory, compute_engine, config_path=None, jobinput=None, joboutput=None) Bases: object
Manage a series of jobs
Since many part of this package (for example, phonon irreducible derivatives computaiton), usually needs to create and read a series of calculations.
The series of jobs are assumed to have a hierarchical directory structure, that every job is in its own directory with the job name as the directory name.
Parameters
structure (Crystal or CrystalFTG object) – The primitive crystal structure.</description></item><item><title>Module principia_materia.io_interface.data_wrapper</title><link>https://example.docsy.dev/docs/references/principia_materia.io_interface.data_wrapper.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.io_interface.data_wrapper.html</guid><description>principia_materia.io_interface.data_wrapper module class principia_materia.io_interface.data_wrapper.DataWrapper(title=None, prefix=None) Bases: BaseDataWrapper
A container for the format of a collection of data.
An object oriented wrapper to enforce input text-based data format. It’s also designed so that multiple wrappers can be added up to form a wrapper that handles all the data contained in every one of the sub-wrappers.
YAML is used as the format to read and write from file.
Parameters
title (str, default to None) – A comment description for the file.</description></item><item><title>Module principia_materia.io_interface.hdf5_wrapper</title><link>https://example.docsy.dev/docs/references/principia_materia.io_interface.hdf5_wrapper.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.io_interface.hdf5_wrapper.html</guid><description>principia_materia.io_interface.hdf5_wrapper module class principia_materia.io_interface.hdf5_wrapper.HDF5Wrapper(title=None) Bases: BaseDataWrapper
Save/load data in/from HDF5 file.
A object oriented wrapper to save and load data in and from HDF5 files. This allows us to easily save some custom defined data types into HDF5 supported types.
Parameters
title (str, default to None) – A comment description for the file. The title is not used when saving/loading HDF5 files.
add_item(key, choices=None, dtype=None, load_dtype=None, save_dtype=None, optional=False) Add an item of data to the container.</description></item><item><title>Module principia_materia.io_interface.jobs_db</title><link>https://example.docsy.dev/docs/references/principia_materia.io_interface.jobs_db.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.io_interface.jobs_db.html</guid><description>principia_materia.io_interface.jobs_db module class principia_materia.io_interface.jobs_db.JobsDB(root_directory, db_path, db_type, structure, table=None) Bases: object
Interface jobs with database.
Parameters
root_directory (str) – The root directory that hosts all the jobs of the series.
db_path (str) – Path to database.
db_type (str) – Type of the database, for example “sqlite”.
structure (Crystal or CrystalFTG object) – The primitive crystal structure. Input input is a CrystalFTG object, the primitive cell will be used.
add_filter(key, value) Add a filtering condition for database action (query/update/insert).</description></item><item><title>Module principia_materia.io_interface.qpoints_io</title><link>https://example.docsy.dev/docs/references/principia_materia.io_interface.qpoints_io.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.io_interface.qpoints_io.html</guid><description>principia_materia.io_interface.qpoints_io module principia_materia.io_interface.qpoints_io.array_to_list(array) Convert array of nested lists.
Parameters
array (array of numbers) – The array to convert from.
principia_materia.io_interface.qpoints_io.array_to_tuple(array) Convert array of nested tuples.
Parameters
array (array of numbers) – The array to convert from.</description></item><item><title>Module principia_materia.io_interface.vasp</title><link>https://example.docsy.dev/docs/references/principia_materia.io_interface.vasp.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.io_interface.vasp.html</guid><description>principia_materia.io_interface.vasp module principia_materia.io_interface.vasp.parse_poscar(poscar) Parse data from POSCAR, and package the data that can be read into our translation group classes.
See _parse_poscar for actual parsing of the POSCAR.
Parameters
poscar (str) – A path to a POSCAR file or a string with the content of a POSCAR file. CONTCAR is accepted as well.
Returns
retval – A dictionary of all the information from POSCAR, with keywords vec, atoms and velocites in format that can be ready into tranlation group classes.</description></item><item><title>Module principia_materia.io_interface.yaml_dump</title><link>https://example.docsy.dev/docs/references/principia_materia.io_interface.yaml_dump.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.io_interface.yaml_dump.html</guid><description>principia_materia.io_interface.yaml_dump module principia_materia.io_interface.yaml_dump.yaml_dumps(data, prec=8) Save data in a custom YAML format string.
The official yaml module cannot dump data in a consistent format, this function solves that problem by using a consistent format for various data types. Additionally, data types like numpy.ndarray can be safely saved into YAML nested list format without extra work, making saving YAML file much easier.
Parameters
data (dict) – The data to save.
prec (int, optional, default to 8) – The decimal points to round the floating point numbers to.</description></item><item><title>Module principia_materia.mathematics</title><link>https://example.docsy.dev/docs/references/principia_materia.mathematics.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.mathematics.html</guid><description>principia_materia.mathematics package Submodules principia_materia.mathematics.array_utils module
array_in_2darray()
index_array_in_array()
principia_materia.mathematics.core_math module
gaussian()
gs_orthog()
principia_materia.mathematics.errortail module
fit_errortail()
generate_picks()
get_errortail()
get_errortail_yaml_wrapper()
least_square()
penalty_linear_mse()
penalty_sqrt_mse()
penalty_square_mse()
principia_materia.mathematics.finite_difference module
FiniteDifference
FiniteDifference.order
FiniteDifference.delta
FiniteDifference.uniq_steps
FiniteDifference.add_delta()
FiniteDifference.compute_finite_difference()
FiniteDifference.delta
FiniteDifference.get_stencils_1d()
FiniteDifference.set_delta()
FiniteDifference.set_stencils()
FiniteDifference.set_stencils_1d()
FiniteDifference.set_steps()
FiniteDifference.uniq_steps
principia_materia.mathematics.fourier_transform module
backward_fourier_transform()
forward_fourier_transform()
principia_materia.mathematics.new_fraction module
Fraction
Fraction.limit_denominator() principia_materia.mathematics.smith_normal_form module
DiagonalForm()
HermiteNormalForm_AU()
HermiteNormalForm_UA()
SmithNormalForm()
principia_materia.mathematics.tensor_utils module
find_linearly_independent_vectors()
find_most_linearly_independent_rows()
rotate_tensor()
Module contents principia_materia.mathematics.int_det(matrix)</description></item><item><title>Module principia_materia.mathematics.array_utils</title><link>https://example.docsy.dev/docs/references/principia_materia.mathematics.array_utils.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.mathematics.array_utils.html</guid><description>principia_materia.mathematics.array_utils module principia_materia.mathematics.array_utils.array_in_2darray(arr1, arr2, tol=None) Check if a 1D array is a sub-array of a 2D array.
principia_materia.mathematics.array_utils.index_array_in_array(arr1, arr2, tol=None, complete=True, return_both=False) Find the indices for sub-arrays of arr1 in arr2.
Both arr1 and arr2 have same sub-arrays but in different order. This method finds the indices of these sub-arrays in arr2 to order them to the same ordering in arr1.</description></item><item><title>Module principia_materia.mathematics.core_math</title><link>https://example.docsy.dev/docs/references/principia_materia.mathematics.core_math.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.mathematics.core_math.html</guid><description>principia_materia.mathematics.core_math module principia_materia.mathematics.core_math.gaussian(w, sigma, w0=0.0) Gaussian
..math
g (w - w_0) = \frac{1}{\sqrt{2 \pi} \sigma} e^{- \frac{(w - w_0)^2}{2 sigma^2}} principia_materia.mathematics.core_math.gs_orthog(arr, allowzero=False, tol=1e-06) Gram-Schmidt orthonormalize a set of vectors.
Parameters
arr (array of numbers, shape(n, m)) – The set of vectors to be orthonormalized, in row convention.
allowzero (bool, optional, default to False) – If True, allow 0 vectors in orthogonalization.
tol (float, optional, default to 1.0E-6) – Error tolerance.</description></item><item><title>Module principia_materia.mathematics.errortail</title><link>https://example.docsy.dev/docs/references/principia_materia.mathematics.errortail.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.mathematics.errortail.html</guid><description>principia_materia.mathematics.errortail module principia_materia.mathematics.errortail.fit_errortail(delta, datapoints, power=2, pick_min=3, pick_max=None, consecutive_picks=False, penalty=, separate_complex=False) Fit error tail for finite difference calculations.
Either pick n and pick N scheme can be used with various penalty function.
Parameters
delta (array of floats, shape(n, )) – The delta values of the finite difference.
datapoints (array of numbers (complex or float), shape(n, ) or shape(n, m)) – The target function values evaluated at each delta. If the input is 2-dimensional, each column is computed separately.</description></item><item><title>Module principia_materia.mathematics.finite_difference</title><link>https://example.docsy.dev/docs/references/principia_materia.mathematics.finite_difference.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.mathematics.finite_difference.html</guid><description>principia_materia.mathematics.finite_difference module class principia_materia.mathematics.finite_difference.FiniteDifference(order, fdtype=&amp;lsquo;c&amp;rsquo;) Bases: object
Compute finite difference
Parameters
order (int, or tuple of int) – The order of the finite difference derivative. If input type int, compute FD of a single variable to given order. If input tuple of int, compute FD of len(order) variables, to respective order.
fdtype (choice between &amp;ldquo;c&amp;rdquo;, &amp;ldquo;f&amp;rdquo; and &amp;ldquo;b&amp;rdquo;) – Type of finite difference:
”c” for central, “f” for forward, “b” for backward.</description></item><item><title>Module principia_materia.mathematics.fourier_transform</title><link>https://example.docsy.dev/docs/references/principia_materia.mathematics.fourier_transform.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.mathematics.fourier_transform.html</guid><description>principia_materia.mathematics.fourier_transform module principia_materia.mathematics.fourier_transform.backward_fourier_transform(tensors, p, q) Backward Fourier Transform for arbitrary orders
Parameters
tensors (array of complex/float of shape(N, n_1, &amp;hellip;, n_n)) – Tensors to be Fourier Transformed.
p (array of numbers of shape(N, m_1, &amp;hellip;, m_m)) – The corresponding T/Q points of the tensors.
q (array of numbers of shape(M, m_1, &amp;hellip;, m_m) or shape(m_1, &amp;hellip;, m_m)) – The Q/T points for the tensors to be transformed into.
Returns
restult – The result of Fourier Transform.</description></item><item><title>Module principia_materia.mathematics.new_fraction</title><link>https://example.docsy.dev/docs/references/principia_materia.mathematics.new_fraction.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.mathematics.new_fraction.html</guid><description>principia_materia.mathematics.new_fraction module class principia_materia.mathematics.new_fraction.Fraction(numerator=0, denominator=None, *, _normalize=True) Bases: Fraction
Updated methods of built-in Fraction type to fix some deprecation errors.
limit_denominator(max_denominator=1000000) Closest Fraction to self with denominator at most max_denominator.
&amp;gt;&amp;gt;&amp;gt; Fraction(&amp;#39;3.141592653589793&amp;#39;).limit_denominator(10) Fraction(22, 7) &amp;gt;&amp;gt;&amp;gt; Fraction(&amp;#39;3.141592653589793&amp;#39;).limit_denominator(100) Fraction(311, 99) &amp;gt;&amp;gt;&amp;gt; Fraction(4321, 8765).limit_denominator(10000) Fraction(4321, 8765)</description></item><item><title>Module principia_materia.mathematics.smith_normal_form</title><link>https://example.docsy.dev/docs/references/principia_materia.mathematics.smith_normal_form.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.mathematics.smith_normal_form.html</guid><description>principia_materia.mathematics.smith_normal_form module Smith Normal Form and Hermite Normal Form
An implementation of Smith Normal Form following the algorithm described in Smith Normal Form - Wikipedia.
Hermite Normal Form is implemented following the definition in Hermite Normal Form - Wikipedia.
principia_materia.mathematics.smith_normal_form.DiagonalForm(M) Finds the diagonalized form of the integer matrix M.
principia_materia.mathematics.smith_normal_form.HermiteNormalForm_AU(M) Hermite Normal Form of M, Column style
H = ML
principia_materia.mathematics.smith_normal_form.HermiteNormalForm_UA(M) Hermite Normal Form of M, Row style
H = LM</description></item><item><title>Module principia_materia.mathematics.tensor_utils</title><link>https://example.docsy.dev/docs/references/principia_materia.mathematics.tensor_utils.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.mathematics.tensor_utils.html</guid><description>principia_materia.mathematics.tensor_utils module principia_materia.mathematics.tensor_utils.find_linearly_independent_vectors(vectors, tol=1e-06, return_vectors=False) Use Gram-Schmidt to find a set of linearly independent vectors.
Parameters
vectors (array of numbers, shape(n, m)) – The set of vectors to be orthonormalized, in row convention.
tol (float, optional, default to 1.0E-6) – Error tolerance.
return_vectors (bool, optional, default to False) – Whether to return the orthonormalized vectors.
Returns
liv_indices (array of int, shape(rank(vectors), )) – The indicies of the linearly independent vectors.</description></item><item><title>Module principia_materia.phonon_id</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.html</guid><description>principia_materia.phonon_id package Submodules principia_materia.phonon_id.analytic_dynamic_tensor module
AnalyticDynamicTensor
AnalyticDynamicTensor.Qpoint
AnalyticDynamicTensor.compute_tensor()
AnalyticDynamicTensor.get_irreducible_basis_rowname()
AnalyticDynamicTensor.get_irreps()
AnalyticDynamicTensor.get_rotation_matrix()
AnalyticDynamicTensor.irreducible_derivative_names
AnalyticDynamicTensor.n_irreducible_derivatives
AnalyticDynamicTensor.order
AnalyticDynamicTensor.qpoint_displacement_rep
AnalyticDynamicTensor.set_irreducible_derivative_names()
AnalyticDynamicTensor.set_irreducible_derivatives()
AnalyticDynamicTensor.set_qpoint_displacement_rep()
AnalyticDynamicTensor.set_vectorized_tensor()
AnalyticDynamicTensor.solve_irreducible_derivatives()
AnalyticDynamicTensor.symmetrized_tensor_shape
AnalyticDynamicTensor.symmetrized_vectorized_tensor
AnalyticDynamicTensor.tensor_shape
AnalyticDynamicTensor.unique_qpoints
AnalyticDynamicTensor.vectorized_tensor
get_AnalyticDynamicTensor_hdf5_wrapper()
get_IrreducibleDerivatives_hdf5_wrapper()
principia_materia.phonon_id.analytic_strain_tensor module
AnalyticStrainTensor
AnalyticStrainTensor.compute_tensor()
AnalyticStrainTensor.get_irreducible_basis_rowname()
AnalyticStrainTensor.get_irreps()
AnalyticStrainTensor.get_rotation_matrix()
AnalyticStrainTensor.identity_subspace
AnalyticStrainTensor.irreducible_derivative_names
AnalyticStrainTensor.irreducible_strains
AnalyticStrainTensor.n_irreducible_derivatives
AnalyticStrainTensor.set_irreducible_derivative_names()
AnalyticStrainTensor.set_irreducible_derivatives()
AnalyticStrainTensor.set_irreducible_strains()
AnalyticStrainTensor.set_strain_rep()
AnalyticStrainTensor.set_vectorized_tensor()
AnalyticStrainTensor.solve_irreducible_derivatives()
AnalyticStrainTensor.symmetrized_tensor_shape
AnalyticStrainTensor.symmetrized_vectorized_tensor
AnalyticStrainTensor.tensor_shape
AnalyticStrainTensor.vectorized_tensor
principia_materia.phonon_id.analytic_tensors module
AnalyticTensors
AnalyticTensors.compute_D_from_ID()
AnalyticTensors.compute_ID_from_D()
AnalyticTensors.copy()
AnalyticTensors.irreducible_derivative_names
AnalyticTensors.n_irreducible_derivatives
AnalyticTensors.set_ADT()
AnalyticTensors.set_D()
AnalyticTensors.set_irreducible_D()
get_AnalyticTensors_from_hdf5()
get_AnalyticTensors_hdf5_wrapper()
save_AnalyticTensors_to_hdf5()
principia_materia.phonon_id.anharmonic_interpolation module
AnharmincInterpolation
AnharmincInterpolation.analytic_derivative_dynamic_matrix()
AnharmincInterpolation.existing_orders
AnharmincInterpolation.fd_derivative_dynamic_matrix()
AnharmincInterpolation.get_Dq2()
AnharmincInterpolation.get_DqN()</description></item><item><title>Module principia_materia.phonon_id.analytic_dynamic_tensor</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.analytic_dynamic_tensor.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.analytic_dynamic_tensor.html</guid><description>principia_materia.phonon_id.analytic_dynamic_tensor module class principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor(structure, pg, Qpoint, tol=1e-06) Bases: object
Abstract class for analytic representation of dynamic tensor under group theory.
Exploits the group theory to find the irreducible derivatives, and construct the dynamic tensor analytically in both symmetrized basis and naive basis. The analytic form of the dynamic tensor is stored in a vectorized form to facilitate further computation.
The analytic tensor allows us to perform further analysis of the dynamics and thermodynamics of the crystal.</description></item><item><title>Module principia_materia.phonon_id.analytic_strain_tensor</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.analytic_strain_tensor.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.analytic_strain_tensor.html</guid><description>principia_materia.phonon_id.analytic_strain_tensor module class principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor(order, pg, dim=3, tol=1e-06) Bases: object
compute_tensor(irreducible_derivatives, symmetrized_basis=False) Substute irreducible derivatives into vectorized tensor to compute strain tensor.
Parameters
irreducible_derivatives (array of complex, shape(self.n_irreducible_derivatives, )) – The value of irreducible derivatives to substitute in.
symmetrized_basis (bool, optional, default to False) – Whether to return the tensor in symmetrized basis or in naive basis.
Returns
tensor – The resulting strain tensor after the substitution. If symmetrized_basis==True, shape equals self.</description></item><item><title>Module principia_materia.phonon_id.analytic_tensors</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.analytic_tensors.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.analytic_tensors.html</guid><description>principia_materia.phonon_id.analytic_tensors module class principia_materia.phonon_id.analytic_tensors.AnalyticTensors(structure, supa, order, pg=&amp;lsquo;C1&amp;rsquo;, tol=1e-06) Bases: DynamicTensors
Analytic dynamic tensor of a reciprocal mesh at a given order.
Parameters
structure (CrystalFTG object or a structure file of CrystalFTG) – The crystal structure.
supa (array of int, shape(dim, dim)) – The supercell matrix.
order (int) – Order of the dynamic tensor.
pg (str or PointGroup object) – The point group.
tol (float, optional, default to 1.0E-6) – Error tolerence.</description></item><item><title>Module principia_materia.phonon_id.anharmonic_interpolation</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.anharmonic_interpolation.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.anharmonic_interpolation.html</guid><description>principia_materia.phonon_id.anharmonic_interpolation module class principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation(structure, tol=1e-06) Bases: object
Interpolation of anharmonic phonon interaction coefficients.
This class will store PhiN of arbitrary order together and perform interpolation to arbitrary Q. And generate phonon interaction tensors in desired conventen &amp;amp; basis.
analytic_derivative_dynamic_matrix(Qpoints) Analytical derivatives of the dynamical matrices wrt Q-points.
The short range part is calculated as as following.
$$ \frac{\partial\hat D_{\mathbf{K}}}{\partial K_\alpha} = \sum_{\mathbf{y}} \imag T_\alpha e^{\imag \mathbf{K} \cdot \mathbf{y}\hat a} \hat \Phi_{\mathbf{y}} $$</description></item><item><title>Module principia_materia.phonon_id.bid</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.bid.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.bid.html</guid><description>principia_materia.phonon_id.bid module class principia_materia.phonon_id.bid.BID(structure, supa, order, pg=&amp;lsquo;C1&amp;rsquo;, full_symmetry=False, hidden_order=1, fdtype=&amp;lsquo;c&amp;rsquo;, tol=1e-06) Bases: object
Use Bundled Irreducible Derivatives approach to compute phonons and their interactions.
Parameters
structure (CrystalFTG object or a structure file of CrystalFTG) – The crystal structure.
supa (array of int, shape(dim, dim)) – The supercell matrix.
order (int) – Order of the phonon interaction.
pg (str or PointGroup object, optional, default to &amp;ldquo;C1&amp;rdquo;) – The point group.
full_symmetry (bool, optional, default to False) – If True, use full group analysis (not implemented yet).</description></item><item><title>Module principia_materia.phonon_id.chainrule_derivatives</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.chainrule_derivatives.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.chainrule_derivatives.html</guid><description>principia_materia.phonon_id.chainrule_derivatives module class principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives(structure, supa, order, pg=&amp;lsquo;C1&amp;rsquo;, use_symmetric_basis=False, tol=1e-06) Bases: AnalyticTensors
Compute chainrule derivatives of a measurement for a given crystal system at given FTG and order.
In bundled irreducible derivatives (BID) method, for a given measurement basis, at a given order, structure and supercell, we can obtain a series of derivatives from finite displacement computations, referred to as $\textbf{V}_{b}^{\hat{S}_{BZ}}$, where $\hat{S}_{BZ}$ is the supercell matrix.
These measurement basis derivatives are linear combinations of irreducible derivatives in this system,</description></item><item><title>Module principia_materia.phonon_id.conductivity</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.conductivity.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.conductivity.html</guid><description>principia_materia.phonon_id.conductivity module class principia_materia.phonon_id.conductivity.Conductivity(structure, mesh, pg, tol=1e-06) Bases: object
Calculate thermal conductivity
gamma_tetra(qpoint, temperature, frequencies, phonon_units=&amp;lsquo;THz&amp;rsquo;, units=&amp;lsquo;THz&amp;rsquo;, phonon_cutoff=None, tol=1e-06, high_temp_limit=False) Use the tetrahedron method to calculate the imaginary self energy (ISE).
This version is mostly implemented in fortran.
Parameters
qpoint (array of float or Fraction, shape(3, ); or coordinate_parse compatible format) – The Q-vector to calculate ISE.
temperature (float of array of float, shape(ntemp, )) – The temperature(s) to calculate ISE.</description></item><item><title>Module principia_materia.phonon_id.dipole_dipole</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.dipole_dipole.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.dipole_dipole.html</guid><description>principia_materia.phonon_id.dipole_dipole module class principia_materia.phonon_id.dipole_dipole.DipoleDipole(structure, zeu=None, epsilon=None, dataset=None, G_ran=5, Lambda=0.2, factor=1.0, tol=1e-06) Bases: object
Method implemented is descrived in papers Phys. Rev. B 50, 13035(R) (1994) and Phys. Rev. B 55, 10355 (1997).
$$ \tilde{C}^{DD}_{\kappa \alpha \kappa^{\prime} \beta} (\textbf{q}) = \hat{C}^{DD}_{\kappa \alpha \kappa^{\prime} \beta} (\textbf{q}) -\delta_{\kappa \kappa^{\prime}} \sum_{\kappa^{\prime\prime}} \hat{C}^{DD}_{\kappa \alpha \kappa^{\prime\prime} \beta} (\textbf{q}=\bf{\Gamma}) $$
$$ \hat{C}^{DD}_{\kappa \alpha \kappa^{\prime} \beta} (\textbf{q}) = \sum_{\alpha^{\prime} \beta^{\prime}} Z^{\ast}_{\kappa, \alpha\alpha^{\prime}} Z^{\ast}_{\kappa^{\prime}, \beta\beta^{\prime}} \overline{C}^{DD}_{\kappa \alpha^{\prime} \kappa^{\prime} \beta^{\prime}} (\textbf{q}) $$</description></item><item><title>Module principia_materia.phonon_id.dynamic_tensors</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.dynamic_tensors.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.dynamic_tensors.html</guid><description>principia_materia.phonon_id.dynamic_tensors module class principia_materia.phonon_id.dynamic_tensors.DynamicTensors(structure, supa, order, pg=&amp;lsquo;C1&amp;rsquo;, tol=1e-06) Bases: object
Dynamic tensors of a reciprocal mesh at arbitrary order.
As a fundation to many other tools, this class accommodatas dynamic tensors, can rotate them from irreducible Q-points to full BZ. For second order, it can also accounts for dipole-dipole interaction.
Instead of a dictionary, the dynamic tensors of different Q-points are stored as an array of tensors in the same order of the Q-points designated by principia_materia.</description></item><item><title>Module principia_materia.phonon_id.fd_series</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.fd_series.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.fd_series.html</guid><description>principia_materia.phonon_id.fd_series module class principia_materia.phonon_id.fd_series.FDSeries(structure, supa, order, fdtype=&amp;lsquo;c&amp;rsquo;, tol=1e-06) Bases: object
Execute a series of finite displacements calculations.
In calculations of phonons and their interactions, a seiries of finite displacements calculations from the same structure are usually needed for both BID and LID methods. This class manages a series of finite displacement calculations, and serves as a simple interface between our finite displacement engine and the phonon interaction analysis tools.
Parameters</description></item><item><title>Module principia_materia.phonon_id.finite_displacements</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.finite_displacements.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.finite_displacements.html</guid><description>principia_materia.phonon_id.finite_displacements module class principia_materia.phonon_id.finite_displacements.FiniteDisplacements(structure, supa, fdtype=&amp;lsquo;c&amp;rsquo;, tol=1e-06) Bases: object
Finite difference on atomic displacements.
This class serves as core finite displacement engine for the package.
Parameters
structure (CrystalFTG object or a structure file of CrystalFTG) – The crystal structure.
supa (array of int, shape(dim, dim)) – Supercell matrix.
fdtype (str, choice of [&amp;ldquo;c&amp;rdquo;, &amp;ldquo;f&amp;rdquo;, &amp;ldquo;b&amp;rdquo;]) – Type of finite displacement.
tol (float, optional, default to 1.0E-6) – Error tolerence.
add_delta(delta) compute_finite_displacements(fill=0.</description></item><item><title>Module principia_materia.phonon_id.fourier_interpolation</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.fourier_interpolation.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.fourier_interpolation.html</guid><description>principia_materia.phonon_id.fourier_interpolation module class principia_materia.phonon_id.fourier_interpolation.FourierInterpolation(structure, supa, order, pg=&amp;lsquo;C1&amp;rsquo;, tol=1e-06) Bases: DynamicTensors
Generic Fourier interpolation of phonon interactions at arbitrary order.
Supports either dynamic tensors or force constants tensors as input, if dynamic tensors are provided, Fourier transform to force constants tensors and then perform WS cell packing; if force constants tensors are provided, skip the Fourier tranformation step.
Parameters
structure (CrystalFTG object or a structure file of CrystalFTG) – The crystal structure.</description></item><item><title>Module principia_materia.phonon_id.frozen_phonons</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.frozen_phonons.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.frozen_phonons.html</guid><description>principia_materia.phonon_id.frozen_phonons module class principia_materia.phonon_id.frozen_phonons.FrozenPhonons(structure, Qpoint, supa=None, hidden_order=1, fdtype=&amp;lsquo;c&amp;rsquo;, tol=1e-06) Bases: object
Compute coefficients of phonons and their interactions.
The abstract class with the core functionalities to compute phonons and their interactions. For now the symmetry is not considered, it will be in the LID variation, since lone-Q approach can be used to compute the interaction coefficients without symmetry.
Parameters
structure (CrystalFTG object or a structure file of CrystalFTG) – The crystal structure.</description></item><item><title>Module principia_materia.phonon_id.hsbid</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.hsbid.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.hsbid.html</guid><description>principia_materia.phonon_id.hsbid module class principia_materia.phonon_id.hsbid.HSBID(structure, supa, order, pg=&amp;lsquo;C1&amp;rsquo;, full_symmetry=False, hidden_order=1, fdtype=&amp;lsquo;c&amp;rsquo;, tol=1e-06) Bases: object
Use Hierarchical Supercell Bundled Irreducible Derivatives approach to compute phonons and their interactions
Parameters
structure (CrystalFTG object or a structure file of CrystalFTG) – The crystal structure.
supa (array of int, shape(dim, dim)) – The supercell matrix.
order (int) – Order of the phonon interaction.
pg (str or PointGroup object, optional, default to &amp;ldquo;C1&amp;rdquo;) – The point group.</description></item><item><title>Module principia_materia.phonon_id.lid</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.lid.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.lid.html</guid><description>principia_materia.phonon_id.lid module class principia_materia.phonon_id.lid.LoneID_FP(structure, Qpoint, supa=None, pg=&amp;lsquo;C1&amp;rsquo;, full_symmetry=False, hidden_order=1, fdtype=&amp;lsquo;c&amp;rsquo;, tol=1e-06) Bases: FrozenPhonons
Use Lone Irreducible Derivatives (LID) apporach to compute phonons and their interactions.
Parameters
structure (CrystalFTG object or a structure file of CrystalFTG) – The crystal structure.
Qpoint (array of Fraction or a parse_array supported Fraction array.) – The Q-point
supa (array of int, shape(dim, dim)) – The supercell matrix.
pg (str or PointGroup object, optional, default to &amp;ldquo;C1&amp;rdquo;) – The point group.</description></item><item><title>Module principia_materia.phonon_id.lid_mesh</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.lid_mesh.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.lid_mesh.html</guid><description>principia_materia.phonon_id.lid_mesh module class principia_materia.phonon_id.lid_mesh.LIDMesh(structure, supa, order, pg=&amp;lsquo;C1&amp;rsquo;, full_symmetry=False, hidden_order=1, fdtype=&amp;lsquo;c&amp;rsquo;, tol=1e-06) Bases: object
Compute phonons and their interactions with LID approach on a given mesh.
Parameters
structure (CrystalFTG object or a structure file of CrystalFTG) – The crystal structure.
supa (array of int, shape(dim, dim)) – The supercell matrix (a.k.a the mesh) to compute phonons and their interactions in.
order (int) – The order of the phonon interactions.
pg (str or PointGroup object, optional, default to &amp;ldquo;C1&amp;rdquo;) – The point group.</description></item><item><title>Module principia_materia.phonon_id.little_group_adt</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.little_group_adt.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.little_group_adt.html</guid><description>principia_materia.phonon_id.little_group_adt module class principia_materia.phonon_id.little_group_adt.LittleGroupADT(structure, pg, Qpoint, tol=1e-06) Bases: AnalyticDynamicTensor
Little group analytic representation of dynamic tensor under group theory.
It works under the little group scheme, which is the point group that only maps each q in Q-set into itself. Then it uses this little group to find the irrep decomposition of each q, perform symmetric product and for the ones that contain identity, find the coefficients in the expansion in terms of symmetric basis products.</description></item><item><title>Module principia_materia.phonon_id.phonon_db</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.phonon_db.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.phonon_db.html</guid><description>principia_materia.phonon_id.phonon_db module principia_materia.phonon_id.phonon_db.create_BID_table(db, table, exists=True) principia_materia.phonon_id.phonon_db.create_LID_table(db, table, exists=True) principia_materia.phonon_id.phonon_db.create_metadata_table(db, table, exists=True) principia_materia.phonon_id.phonon_db.create_strain_table(db, table, exists=True)</description></item><item><title>Module principia_materia.phonon_id.phonon_report_util</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.phonon_report_util.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.phonon_report_util.html</guid><description>principia_materia.phonon_id.phonon_report_util module principia_materia.phonon_id.phonon_report_util.summarize_bid(inp, include_title=True, include_structure=True, include_pg=True) principia_materia.phonon_id.phonon_report_util.summarize_hsbid(inp) principia_materia.phonon_id.phonon_report_util.summarize_lid(inp, include_title=True, include_structure=True, include_pg=True) principia_materia.phonon_id.phonon_report_util.summarize_lid_mesh(inp) principia_materia.phonon_id.phonon_report_util.summarize_structure(structure)</description></item><item><title>Module principia_materia.phonon_id.phonon_tools</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.phonon_tools.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.phonon_tools.html</guid><description>principia_materia.phonon_id.phonon_tools module principia_materia.phonon_id.phonon_tools.adjust_eigenvectors_subspace(mat, frequencies, eigenvectors, tol=0.0001) Adjust eigenvectors in degerate subspace based on the input matrices.
It picks the eigenvectors in the frequency degenarete subspace so that the sub-matrix of mat can be diagonalized by the eigenvectors as well.
Parameters
mat (array of complex, shape(nq, nband, nband)) – Matrices the adjustments of eigenvectors are based on. Renormalized with mass.
frequencies (array of float, shape(nq, nband)) – Phonon frequencies, the subspace of eigenvectors are based on the degenracy of the phonon frequencies.</description></item><item><title>Module principia_materia.phonon_id.strained_finite_displacements</title><link>https://example.docsy.dev/docs/references/principia_materia.phonon_id.strained_finite_displacements.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.phonon_id.strained_finite_displacements.html</guid><description>principia_materia.phonon_id.strained_finite_displacements module class principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements(structure, supa, fdtype=&amp;lsquo;c&amp;rsquo;, tol=1e-06) Bases: FiniteDisplacements
Compute finite difference of strain and displacements.
The class is capable of compute strain derivatives without atomic displacements, as well as derivatives of atomic displacements without strains.
Parameters
structure (CrystalFTG object or a structure file of CrystalFTG) – The crystal structure.
supa (array of int, shape(dim, dim)) – Supercell matrix.
fdtype (str, choice of [&amp;ldquo;c&amp;rdquo;, &amp;ldquo;f&amp;rdquo;, &amp;ldquo;b&amp;rdquo;]) – Type of finite displacement.</description></item><item><title>Module principia_materia.plotting</title><link>https://example.docsy.dev/docs/references/principia_materia.plotting.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.plotting.html</guid><description>principia_materia.plotting package Submodules principia_materia.plotting.kpath module
KPath
KPath.dim
KPath.get_gridpoints_on_path()
KPath.kpoints
KPath.kpoints_distances
KPath.n_vertices
KPath.npoints
KPath.point_on_kpath()
KPath.rvec
KPath.set_kpath()
KPath.vertices
KPath.vertices_distances
KPath.vertices_names
principia_materia.plotting.plot_band module
get_band_plot_config_wrapper()
main()
plot_band()
principia_materia.plotting.plot_errortail module
main()
plot_errortail()
Module contents</description></item><item><title>Module principia_materia.plotting.kpath</title><link>https://example.docsy.dev/docs/references/principia_materia.plotting.kpath.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.plotting.kpath.html</guid><description>principia_materia.plotting.kpath module class principia_materia.plotting.kpath.KPath(vertices, vertices_names, npoints=101, rvec=None) Bases: object
Generate K-points path for plotting band structure.
Parameters
vertices (array of Fraction or float, shape(N, dim) or shape(N-1, 2, dim)) – Vertices of K-path in either points or lines format.
vertices_names (array of str, shape(N, )) – The name of the vertices points.
npoints (int, optional, default to 100) – The number of K-points to generate between a poir of vertices points.</description></item><item><title>Module principia_materia.plotting.plot_band</title><link>https://example.docsy.dev/docs/references/principia_materia.plotting.plot_band.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.plotting.plot_band.html</guid><description>principia_materia.plotting.plot_band module principia_materia.plotting.plot_band.get_band_plot_config_wrapper(title=&amp;lsquo;Band plot configuration&amp;rsquo;) principia_materia.plotting.plot_band.main(args=None) principia_materia.plotting.plot_band.plot_band(config, show=True, output=None, width_ratio=3, dpi=150)</description></item><item><title>Module principia_materia.plotting.plot_errortail</title><link>https://example.docsy.dev/docs/references/principia_materia.plotting.plot_errortail.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.plotting.plot_errortail.html</guid><description>principia_materia.plotting.plot_errortail module principia_materia.plotting.plot_errortail.main(args=None) principia_materia.plotting.plot_errortail.plot_errortail(data, linestyle=&amp;rsquo;-&amp;rsquo;, marker=&amp;lsquo;o&amp;rsquo;, pick_marker=&amp;lsquo;D&amp;rsquo;, linecolor=&amp;lsquo;tab:blue&amp;rsquo;, markercolor=&amp;lsquo;tab:red&amp;rsquo;, iscomplex=False, imag_linecolor=&amp;lsquo;tab:green&amp;rsquo;, imag_markercolor=&amp;lsquo;tab:purple&amp;rsquo;, filename=None, dpi=150, show=True)</description></item><item><title>Module principia_materia.representation</title><link>https://example.docsy.dev/docs/references/principia_materia.representation.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.representation.html</guid><description>principia_materia.representation package Submodules principia_materia.representation.base_representation module
BaseRepresentation
BaseRepresentation.G
BaseRepresentation.basis
BaseRepresentation.chi
BaseRepresentation.construct_irreducible_basis()
BaseRepresentation.irrvec_dict BaseRepresentation.construct_irrep_matrices()
BaseRepresentation.irrep_matr BaseRepresentation.get_integer_irrvec()
BaseRepresentation.has_multi_dim_irrep()
BaseRepresentation.irreducible_basis_rowname
BaseRepresentation.irrep_counter
BaseRepresentation.irreps
BaseRepresentation.irrvec
BaseRepresentation.orthogonalize_modes()
BaseRepresentation.project_irrep()
BaseRepresentation.rdim
kronecker_product()
principia_materia.representation.charm_bloch_rep module
CharmBlochRep
CharmBlochRep.construct_irreducible_basis()
CharmBlochRep.irrvec_dict CharmBlochRep.is_qpoint_Gamma
CharmBlochRep.orthogonalize_shift_modes()
principia_materia.representation.cluster_rep module
ClusterRep principia_materia.representation.direct_product module
DirectProduct
DirectProduct.irrep_matr get_irrep_name()
principia_materia.representation.disp_cluster_rep module
DispClusterRep
DispClusterRep.orthogonalize_shift_modes() principia_materia.representation.qstar_rep module
QStarRep
QStarRep.find_multiplication_table()
QStarRep.initial_Q
SymmetricQStarRep
SymmetricQStarRep.initial_Q principia_materia.representation.shift_mode module
ShiftMode
ShiftMode.set_shift_mode_vectors()
ShiftMode.irrep_counter
ShiftMode.shift_mode_vectors
principia_materia.representation.single_tensor_rep module
SingleTensorRep principia_materia.representation.symmetric_direct_product module
SymmetricDirectProduct
SymmetricDirectProduct.construct_irreducible_basis()
SymmetricDirectProduct.irrvec_dict SymmetricDirectProduct.contract_dp_to_sdp_basis()
SymmetricDirectProduct.direct_product
SymmetricDirectProduct.irrep_matr
SymmetricDirectProduct.rdim
SymmetricDirectProduct.set_irreducible_basis_via_contraction()
Module contents</description></item><item><title>Module principia_materia.representation.base_representation</title><link>https://example.docsy.dev/docs/references/principia_materia.representation.base_representation.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.representation.base_representation.html</guid><description>principia_materia.representation.base_representation module class principia_materia.representation.base_representation.BaseRepresentation(rdim, tol=1e-06) Bases: object
The abstract class for representations
As a abstract class for all different representations to derive from, this class contains the most core functionalities for representation, including the group elements, computing characters, decomposing irreducible representations, projecting irreducible basis, etc.
All derived representation classes need to implement following methods to be usable: __init__, _set_group_elements and _set_basis.
property G() The matrix representation of the group elements.</description></item><item><title>Module principia_materia.representation.charm_bloch_rep</title><link>https://example.docsy.dev/docs/references/principia_materia.representation.charm_bloch_rep.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.representation.charm_bloch_rep.html</guid><description>principia_materia.representation.charm_bloch_rep module class principia_materia.representation.charm_bloch_rep.CharmBlochRep(structure, pg, qpoint, tol=1e-06) Bases: BaseRepresentation
Point group representation of give q-point at given orbitals.
Parameters
structure (CrystalFTG object or a structure file of CrystalFTG) – The crystal structure.
pg (str or PointGroup object) – The point group.
qpoint (array of Fraction or a parse_array supported Fraction array.) – The q-point
tol (float, optional, default to 1.0E-6) – Error tolerence.
construct_irreducible_basis(identity_only=False) Construct irreducible basis using projection operators for all instances of existing irreducible representations</description></item><item><title>Module principia_materia.representation.cluster_rep</title><link>https://example.docsy.dev/docs/references/principia_materia.representation.cluster_rep.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.representation.cluster_rep.html</guid><description>principia_materia.representation.cluster_rep module class principia_materia.representation.cluster_rep.ClusterRep(cluster, pg, center=False, tol=1e-06) Bases: BaseRepresentation
Representation of a cluster.
A representation of a cluster can be rotated by point group and stay invariant. The class can figure out how the atoms in the cluster get rotated around and build the point group representation of the cluster and perform standard group theory operations.
Parameters
cluster (Cluster object or a structure file of Cluster) – The cluster to compute point group representation of.</description></item><item><title>Module principia_materia.representation.direct_product</title><link>https://example.docsy.dev/docs/references/principia_materia.representation.direct_product.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.representation.direct_product.html</guid><description>principia_materia.representation.direct_product module class principia_materia.representation.direct_product.DirectProduct(pg, irrep_inputs, tol=1e-06) Bases: BaseRepresentation
Compute direct product representation of irreducible representations of a point group
Parameters
pg (str or PointGroup object) – The point group
irrep_inputs (list of str or tuple) – A list of irreducible representations to compute direct product with. Must be types supported by parser get_irrep_name.
tol (float, optional, default to 1.0E-6) – Error tolerence.
property irrep_matr() principia_materia.representation.direct_product.get_irrep_name(ir) Find name of irreducible representation from input</description></item><item><title>Module principia_materia.representation.disp_cluster_rep</title><link>https://example.docsy.dev/docs/references/principia_materia.representation.disp_cluster_rep.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.representation.disp_cluster_rep.html</guid><description>principia_materia.representation.disp_cluster_rep module class principia_materia.representation.disp_cluster_rep.DispClusterRep(cluster, pg, orthogonalize_shifts=False, remove_shifts=False, center=False, tol=1e-06) Bases: BaseRepresentation
Representation of the displacements of atoms in a cluster.
Computes the point group representation of the displacements of atoms in a cluster.
Parameters
cluster (Cluster object or a structure file of Cluster) – The cluster to compute point group representation of.
pg (str or PointGroup object) – The point group
orthogonalize_shifts (bool, optional, default to False) – Whether to orthogonalize shift modes.</description></item><item><title>Module principia_materia.representation.qstar_rep</title><link>https://example.docsy.dev/docs/references/principia_materia.representation.qstar_rep.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.representation.qstar_rep.html</guid><description>principia_materia.representation.qstar_rep module class principia_materia.representation.qstar_rep.QStarRep(pg, rvec, Q, identifiers=None, tol=1e-06) Bases: BaseRepresentation
Representation of Q-star
It represents how Q transform in the Q-star under symmetry operation of the point group.
Parameters
Q – The initial Q.
pg – Point group.
rvec – The reciprocal basis vector for q.
tol – Number of decimal points to preserve for rounding.
find_multiplication_table() property initial_Q() class principia_materia.representation.qstar_rep.SymmetricQStarRep(pg, rvec, Q, identifiers=None, tol=1e-06) Bases: SymmetricDirectProduct
Symmetric Product representation of Q</description></item><item><title>Module principia_materia.representation.shift_mode</title><link>https://example.docsy.dev/docs/references/principia_materia.representation.shift_mode.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.representation.shift_mode.html</guid><description>principia_materia.representation.shift_mode module class principia_materia.representation.shift_mode.ShiftMode(pg, orbitals, tol=1e-06) Bases: BaseRepresentation
The point group representation of shift modes.
Parameters
pg (str or PointGroup object) – The point group.
orbitals (list of str) – A list or orbitals. Shift mode vectors will be computed base on this list.
tol (float, optional, default to 1.0E-6) – Error tolerence.
set_shift_mode_vectors() Computes the shift mode irreducible basis for the input orbitals list.
This method goes through the list of orbitals, construct the shift mode vectors, and orthonomalize them to keep the non-zero shift mode irreps and vectors.</description></item><item><title>Module principia_materia.representation.single_tensor_rep</title><link>https://example.docsy.dev/docs/references/principia_materia.representation.single_tensor_rep.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.representation.single_tensor_rep.html</guid><description>principia_materia.representation.single_tensor_rep module class principia_materia.representation.single_tensor_rep.SingleTensorRep(rank, pg, dim=3, tol=1e-06) Bases: BaseRepresentation
Point group representation for a rank N tensor.
Parameters
rank (int) – Rank of the tensor.
pg (str or PointGroup object) – The point group.
dim (int, optional, default to 3) – Dimension of the space.
tol (float, optional, default to 1.0E-6) – Error tolerence.</description></item><item><title>Module principia_materia.representation.symmetric_direct_product</title><link>https://example.docsy.dev/docs/references/principia_materia.representation.symmetric_direct_product.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.representation.symmetric_direct_product.html</guid><description>principia_materia.representation.symmetric_direct_product module class principia_materia.representation.symmetric_direct_product.SymmetricDirectProduct(pg, irrep_inputs, tol=1e-06) Bases: BaseRepresentation
Compute symmetric direct product representation of irreducible representations of a point group
Parameters
pg (str or PointGroup object) – The point group
irrep_inputs (list of str or tuple) – A list of irreducible representations to compute direct product with. Must be types supported by parser principia_materia.representation.direct_product.get_irrep_name.
tol (float, optional, default to 1.0E-6) – Error tolerence.
construct_irreducible_basis(identity_only=False) Construct irreducible basis using projection operators for all instances of existing irreducible representations</description></item><item><title>Module principia_materia.symmetry</title><link>https://example.docsy.dev/docs/references/principia_materia.symmetry.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.symmetry.html</guid><description>principia_materia.symmetry package Submodules principia_materia.symmetry.cornwell_data module
Cornwell_group_matrices
Cornwell_group_matrices.D_M
Cornwell_group_matrices.D_M_text
Cornwell_group_matrices.D_X
Cornwell_group_matrices.D_X_text
Cornwell_group_matrices.D_p
Cornwell_group_matrices.D_p_text
Cornwell_group_matrices.D_pp
Cornwell_group_matrices.D_pp_text
Cornwell_group_matrices.Gamma_p
Cornwell_group_matrices.Gamma_p_text
Cornwell_group_matrices.Gamma_pp
Cornwell_group_matrices.Gamma_pp_text
Cornwell_group_matrices.R
Cornwell_group_matrices.R_text
Cornwell_group_matrices.S
Cornwell_group_matrices.S_text
Cornwell_group_matrices.i
Cornwell_group_matrices.ii
Cornwell_group_matrices.jj
Cornwell_group_matrices.kk
Cornwell_point_group
Cornwell_point_group.get_mirror_notation()
Cornwell_point_group.parse_data()
Cornwell_point_group.parse_irrep_matr()
principia_materia.symmetry.little_group module
get_little_group() principia_materia.symmetry.point_group module
PointGroup
PointGroup.check_irrep_matr()
PointGroup.clas
PointGroup.create_all_pg()
PointGroup.create_alternate_pgs()
PointGroup.create_pgop_to_pg()
PointGroup.find_multiplication_table()
PointGroup.init_from()
PointGroup.init_from_operators()
PointGroup.set_alias()
PointGroup.set_clas()
PointGroup.set_ct()
PointGroup.set_gmatr()
PointGroup.set_iname()
PointGroup.set_irrep_matr()
PointGroup.set_mirror_notation()
PointGroup.set_subgroups()
PointGroup.store_characters()
class_method_descriptor
find_inv()
group_lineage()
Module contents</description></item><item><title>Module principia_materia.symmetry.cornwell_data</title><link>https://example.docsy.dev/docs/references/principia_materia.symmetry.cornwell_data.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.symmetry.cornwell_data.html</guid><description>principia_materia.symmetry.cornwell_data module class principia_materia.symmetry.cornwell_data.Cornwell_group_matrices() Bases: object
This class is a simple container holding all of the rotation matrices that are used within the point groups. This information was taken from Appendix C of ‘Group Theory in Physics’ by J.F. Cornwell, 1997 Edition. Everything is input in a human readable form, and then processed into matrices. These matrices can be used in conjunction with the Cornwell character table data.
D_M(_ = {&amp;lsquo;E&amp;rsquo;: array([[1.</description></item><item><title>Module principia_materia.symmetry.little_group</title><link>https://example.docsy.dev/docs/references/principia_materia.symmetry.little_group.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.symmetry.little_group.html</guid><description>principia_materia.symmetry.little_group module principia_materia.symmetry.little_group.get_little_group(Qpoint, pg, rvec, subgroup=False, tol=1e-06)</description></item><item><title>Module principia_materia.symmetry.point_group</title><link>https://example.docsy.dev/docs/references/principia_materia.symmetry.point_group.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.symmetry.point_group.html</guid><description>principia_materia.symmetry.point_group module class principia_materia.symmetry.point_group.PointGroup(inp, mirror_notation=False) Bases: object
This class allows one to encode all of the information about a point group, including the character table. This class mainly is a container for data. The only nontrivial method is for rotating to a different coordinate system.
check_irrep_matr(tol=1e-06) Check if the irrep matrices match the character table.
This will check if the irrep matrices that were entered have the proper characters as prescribed by the character table, and we will confirm that they are unitary.</description></item><item><title>Module principia_materia.tetrahedron</title><link>https://example.docsy.dev/docs/references/principia_materia.tetrahedron.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.tetrahedron.html</guid><description>principia_materia.tetrahedron package Submodules principia_materia.tetrahedron.tetrahedra module
Tetrahedra
Tetrahedra.diagonal_vecs
Tetrahedra.itet_kpoint_ind_fort
Tetrahedra.make_tetrahedrons()
Tetrahedra.tet_kpoint_ind
Tetrahedra.itet_kpoint_ind
Tetrahedra.itet_map
Tetrahedra.itet_mult
Tetrahedra.ptets
Tetrahedra.shortest_diagonals
Tetrahedra.tet_kpoint_ind_fort
Tetrahedra.tet_mult
Module contents</description></item><item><title>Module principia_materia.tetrahedron.tetrahedra</title><link>https://example.docsy.dev/docs/references/principia_materia.tetrahedron.tetrahedra.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.tetrahedron.tetrahedra.html</guid><description>principia_materia.tetrahedron.tetrahedra module class principia_materia.tetrahedron.tetrahedra.Tetrahedra(vec, supa, pg=None, tol=1e-06) Bases: Kpoints
K-vectors for tetrahedron integration of the reciprocal space
property diagonal_vecs() property itet_kpoint_ind_fort() make_tetrahedrons() Find the irreducible tetrahedra
Construct the tetrahedra in terms of irreducible K-vectors and reduce this list of terahedra to a irreducible set.
tet_kpoint_ind() Tetrahedra in terms of indices of irreducible K-vectors in the irreducible K-vector list.
Type
array of int, shape(self.vol * 6, 4)
itet_kpoint_ind() Irreducible tetrahedra in terms of indices of irreducible K-vectors in the irreducible K-vector list.</description></item><item><title>Module principia_materia.translation_group</title><link>https://example.docsy.dev/docs/references/principia_materia.translation_group.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.translation_group.html</guid><description>principia_materia.translation_group package Submodules principia_materia.translation_group.cluster module
Cluster
Cluster.dim
Cluster.natoms
Cluster.nspecies
Cluster.positions
Cluster.orbitals
Cluster.norbitals
Cluster.atoms
Cluster.species
Cluster.center
Cluster.atoms
Cluster.atoms_species_map
Cluster.axial_strain()
Cluster.center
Cluster.check_atoms_overlap()
Cluster.copy()
Cluster.dim
Cluster.find_atoms()
Cluster.natoms
Cluster.norbitals
Cluster.nspecies
Cluster.orbitals
Cluster.positions
Cluster.rotate()
Cluster.rotate_atoms()
Cluster.shift_atom()
Cluster.shift_atoms()
Cluster.shift_origin()
Cluster.species
Cluster.species_names
Cluster.strain()
Cluster.to_dict()
get_cluster_io_wrapper()
principia_materia.translation_group.crystal module
Crystal
Crystal.copy()
Crystal.get_subcell()
Crystal.positions_cartesian
Crystal.rotate_atoms()
Crystal.to_dict()
get_crystal_io_wrapper()
principia_materia.translation_group.crystal_ftg module
CrystalFTG
CrystalFTG.as_primitive()
CrystalFTG.atoms
CrystalFTG.copy()
CrystalFTG.find_atoms()
CrystalFTG.from_primitive()
CrystalFTG.get_basis_at_q()
CrystalFTG.get_wigner_seitz_cell()
CrystalFTG.invsupa
CrystalFTG.orbitals
CrystalFTG.rotate()
CrystalFTG.shift_atom()
CrystalFTG.species_names
CrystalFTG.supa
CrystalFTG.supa_atoms_map
CrystalFTG.supa_translations
CrystalFTG.to_dict()
CrystalFTG.tol
get_crystal_ftg_io_wrapper()
principia_materia.translation_group.kpoints module</description></item><item><title>Module principia_materia.translation_group.cluster</title><link>https://example.docsy.dev/docs/references/principia_materia.translation_group.cluster.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.translation_group.cluster.html</guid><description>principia_materia.translation_group.cluster module class principia_materia.translation_group.cluster.Cluster(atoms, orbitals=None, tol=1e-06) Bases: object
A cluster of atoms or particles.
We will only refer to them as atoms for now.
Parameters
atoms (dict of str as keys and array of float as values) – A dictionary of names of atoms and their positions.
orbitals (str or array of str) – Orbital names to assign to the atoms.
tol (float) – Tolerance.
dim() Dimension of the cluster.</description></item><item><title>Module principia_materia.translation_group.crystal</title><link>https://example.docsy.dev/docs/references/principia_materia.translation_group.crystal.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.translation_group.crystal.html</guid><description>principia_materia.translation_group.crystal module class principia_materia.translation_group.crystal.Crystal(vec, atoms, orbitals=None, lattice_coordinate=True, pg=None, tol=1e-06) Bases: Lattice, Cluster
A crystal structure.
Parameters
vec (array of float, shape(dim, dim)) – The lattice vectors.
atoms (dict of str as keys and array of float as values) – A dictionary of names of atoms and their positions. The positions are in lattice coordinate if lattice_coordinate == True, otherwise they are in cartesian coordinate.
orbitals (str or array of str) – Orbital names to assign to the atoms.</description></item><item><title>Module principia_materia.translation_group.crystal_ftg</title><link>https://example.docsy.dev/docs/references/principia_materia.translation_group.crystal_ftg.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.translation_group.crystal_ftg.html</guid><description>principia_materia.translation_group.crystal_ftg module class principia_materia.translation_group.crystal_ftg.CrystalFTG(vec, atoms, supa=None, orbitals=None, lattice_coordinate=True, pg=None, tol=1e-06) Bases: Crystal
A crystal structure with a finite translation group (FTG).
Here we define a finite translation group by mapping the infinite translation group of the crystal with periodic boundary condition. This boundary condition is defined with a supercell.
Parameters
vec (array of float, shape(dim, dim)) – The lattice vectors.
atoms (dict of str as keys and array of float as values) – A dictionary of names of atoms and their positions.</description></item><item><title>Module principia_materia.translation_group.kpoints</title><link>https://example.docsy.dev/docs/references/principia_materia.translation_group.kpoints.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.translation_group.kpoints.html</guid><description>principia_materia.translation_group.kpoints module class principia_materia.translation_group.kpoints.Kpoints(vec, supa, pg=&amp;lsquo;C1&amp;rsquo;, strict_symmetry=True, tol=1e-06) Bases: Lattice
A list of K-points that fit in a given supercell.
Parameters
vec (array of float, shape(dim, dim)) – The lattice vectors, in row convention.
supa (array of int, shape(dim, dim)) – Super lattice matrix.
pg (str or a PointGroup object) – The point group of the lattice.
strict_symmetry (bool, optional, default to True) – If True, lattice points must rotate into a point that also fits in the cell.</description></item><item><title>Module principia_materia.translation_group.lattice</title><link>https://example.docsy.dev/docs/references/principia_materia.translation_group.lattice.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.translation_group.lattice.html</guid><description>principia_materia.translation_group.lattice module class principia_materia.translation_group.lattice.Lattice(vec, pg=None, tol=1e-06) Bases: object
A lattice.
It can be a lattice in any kind
Parameters
vec (array of float, shape(dim, dim)) – The lattice vectors, in row convention.
pg (str or a PointGroup object) – The point group of the lattice.
tol (float, optional, default to 1.0E-6) – Tolerance threshold.
property abc() Length of each lattice vector
property abg() Angle between lattice vectors
axial_strain(strain) Strains the unit cell.</description></item><item><title>Module principia_materia.translation_group.lattice_ftg</title><link>https://example.docsy.dev/docs/references/principia_materia.translation_group.lattice_ftg.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.translation_group.lattice_ftg.html</guid><description>principia_materia.translation_group.lattice_ftg module class principia_materia.translation_group.lattice_ftg.LatticeFTG(vec, supa, pg=None, strict_symmetry=True, tol=1e-06) Bases: Lattice
A finite translation group (i.e. supercell) of the primitive lattice with point symmetry.
Parameters
vec (array of float, shape(dim, dim)) – The lattice vectors, in row convention.
supa (array of int, shape(dim, dim)) – Super lattice matrix.
pg (str or a PointGroup object) – The point group of the lattice.
strict_symmetry (bool, optional, default to True) – If True, lattice points must rotate into a point that also fits in the cell.</description></item><item><title>Module principia_materia.translation_group.minimum_supercell</title><link>https://example.docsy.dev/docs/references/principia_materia.translation_group.minimum_supercell.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.translation_group.minimum_supercell.html</guid><description>principia_materia.translation_group.minimum_supercell module principia_materia.translation_group.minimum_supercell.get_minimum_supercell(qpoints, dim=3) Find the minimum supercell that accommodates the input qpoints.
The algorithm is described in Section III.B of paper Phys. Rev. B 100, 014303 (2019).
Parameters
qpoints (1-D or 2-D array of Fraction, shape(dim, ) or shape(N, dim)) – Q-points for the supercell to accommodate.
dim (integer, optional, default to 3) – Dimension of the space.
optimize (..)
supercell. (.. Whether to optimize found)
Returns
supa – Found supercell that accommodates the input qpoints.</description></item><item><title>Module principia_materia.translation_group.qpoints_n</title><link>https://example.docsy.dev/docs/references/principia_materia.translation_group.qpoints_n.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.translation_group.qpoints_n.html</guid><description>principia_materia.translation_group.qpoints_n module class principia_materia.translation_group.qpoints_n.QpointsN(vec, supa, order, pg=&amp;lsquo;C1&amp;rsquo;, tol=1e-06) Bases: Lattice
A list of Q-points at a given order that fit in a given supercell find irreducible Q with point and permutaion symmetry.
Parameters
vec (array of float, shape(dim, dim)) – The lattice vectors, in row convention.
supa (array of int, shape(dim, dim)) – Super lattice matrix.
pg (str or a PointGroup object) – The point group of the lattice.
tol (float, optional, default to 1.</description></item><item><title>Module principia_materia.translation_group.wigner_seitz</title><link>https://example.docsy.dev/docs/references/principia_materia.translation_group.wigner_seitz.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.translation_group.wigner_seitz.html</guid><description>principia_materia.translation_group.wigner_seitz module class principia_materia.translation_group.wigner_seitz.WignerSeitz(vec, nrange=2, tol=1e-05) Bases: object
Find the weight of a point in Wigner Seitz cell.
If a point is in the cell, it has weight of 1. If a point is out of the cell, it has weight of 0. If a point is on the boundaries of the cell, the weight is 1 / (1 + # of cells the point is shared with neighbor WS cells.</description></item><item><title>Module principia_materia.utils</title><link>https://example.docsy.dev/docs/references/principia_materia.utils.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.utils.html</guid><description>principia_materia.utils package Submodules principia_materia.utils.config_manager module
update_recursive() principia_materia.utils.db_utils module
SQLiteDB
SQLiteDB.commit()
SQLiteDB.create_table()
SQLiteDB.cursor
SQLiteDB.execute()
SQLiteDB.get_column_names()
SQLiteDB.insert_to_table()
SQLiteDB.row_in_table()
SQLiteDB.search_table()
SQLiteDB.table_exists()
SQLiteDB.update_table()
adapt_array()
convert_array()
principia_materia.utils.testing module
assertDictAlmostEqual()
assertDictEqual()
principia_materia.utils.text_file_search module
find_all()
find_first()
find_last()
get_file_stream()
search()
Module contents</description></item><item><title>Module principia_materia.utils.config_manager</title><link>https://example.docsy.dev/docs/references/principia_materia.utils.config_manager.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.utils.config_manager.html</guid><description>principia_materia.utils.config_manager module principia_materia.utils.config_manager.update_recursive(d, u)</description></item><item><title>Module principia_materia.utils.db_utils</title><link>https://example.docsy.dev/docs/references/principia_materia.utils.db_utils.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.utils.db_utils.html</guid><description>principia_materia.utils.db_utils module class principia_materia.utils.db_utils.SQLiteDB(database) Bases: object
Interface to SQLite database.
Parameters
database (str) – The path to the database file.
commit() Commit the current transaction.
create_table(table, columns, exists=True) Create a table.
Parameters
table (str) – The name of the table.
columns (list of str) – The columns to create in the table.
exists (bool, optional, default to True) – If True, do not throw and error when table exists. Otherwise. an error will be thrown if table exits.</description></item><item><title>Module principia_materia.utils.testing</title><link>https://example.docsy.dev/docs/references/principia_materia.utils.testing.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.utils.testing.html</guid><description>principia_materia.utils.testing module principia_materia.utils.testing.assertDictAlmostEqual(a: dict, b: dict, err_msg: str | None = None, decimal: int = 6, str_trail_newline: bool = True) Check if Dictionarys are almost equal
Parameters
a (dict) – The two dictionaries.
b (dict) – The two dictionaries.
err_msg (str, optional) – Error message.
decimal (int, optional, default to 6) – Number of decimal places to check for floating point numbers.
str_trail_newline (bool, optional, default to True) – If True, the difference of a trailing newline in string comparison is ignored.</description></item><item><title>Module principia_materia.utils.text_file_search</title><link>https://example.docsy.dev/docs/references/principia_materia.utils.text_file_search.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.utils.text_file_search.html</guid><description>principia_materia.utils.text_file_search module principia_materia.utils.text_file_search.find_all(filename, pattern) principia_materia.utils.text_file_search.find_first(filename, pattern, abort_pattern=None, blocksize=4096) principia_materia.utils.text_file_search.find_last(filename, pattern, abort_pattern=None, blocksize=4096) principia_materia.utils.text_file_search.get_file_stream(filename, mode) principia_materia.utils.text_file_search.search(filename, pattern)</description></item><item><title>Module principia_materia.visualization</title><link>https://example.docsy.dev/docs/references/principia_materia.visualization.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/references/principia_materia.visualization.html</guid><description>principia_materia.visualization package Module contents</description></item></channel></rss>