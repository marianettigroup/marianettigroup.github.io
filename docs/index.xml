<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Principia Materia – Documentation</title><link>https://marianettigroup.github.io/docs/</link><description>Recent content in Documentation on Principia Materia</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://marianettigroup.github.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Command line scripts</title><link>https://marianettigroup.github.io/docs/functionality/scripts/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/functionality/scripts/</guid><description>
&lt;p>All command line script for PM are stored in the &lt;code>cli&lt;/code> module, end with the suffix &lt;code>_cli&lt;/code>, and are contained within a function &lt;code>main()&lt;/code>. Here we document
how to add a new command line tool to PM, which requires two steps. First, the script must be added to
the &lt;code>setup.cfg&lt;/code> file. Consider the example of the script &lt;code>periodica_cli.py&lt;/code>, we would add
one entry to the console_scripts as&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">console_scripts&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">pm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">lid&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">principia_materia&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">lid_cli&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">pm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">periodica&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">principia_materia&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cli&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">periodica_cli&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#000">main&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Additionally, we would add the executable &lt;code>pm-periodica&lt;/code> to &lt;code>pm-completion.sh&lt;/code> as&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in pm-lid ... pm-periodica
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Crystal Structure</title><link>https://marianettigroup.github.io/docs/functionality/xtal-structure/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/functionality/xtal-structure/</guid><description>
&lt;p>For many different tasks performed in the PM suite, a crystal structure, or
some component of a crystal structure, must be provided to the code. Most
likely, this will be done using a yaml input file, and the two required key words
are &lt;strong>vec&lt;/strong> and &lt;strong>atoms&lt;/strong>, which will contain the lattice vectors and the basis atoms, respectively.
Considering the flourite structure, the most straightforward yaml file would be:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># xtal.yml&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">vec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.000000&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">atoms&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">Ca&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">F&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.25&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.25&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.25&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.75&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.75&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.75&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The code will infer that there is one basis atom labeled &lt;em>Ca&lt;/em> and two basis atoms labeled &lt;em>F&lt;/em>.&lt;/p>
&lt;p>When entering matrices, we will always run the input through our general array
parser (see parse_array if interested in the details). Therefore, there are many different
options for entering a matrix as a string. For example, consider the following two examples:&lt;/p>
&lt;div class="td-card-deck card-deck mb-4">
&lt;div class="td-card card">
&lt;div class="card-header bg-white">&lt;strong>xtal.yml&lt;/strong>&lt;/div>
&lt;div class="card-body code p-l0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">scale&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">vec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> 0 1 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> 1 0 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> 1 1 0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">atoms&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">Ca&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">| &lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">F&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> 1/4 1/4 1/4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> 3/4 3/4 3/4&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="td-card card">
&lt;div class="card-header bg-white">&lt;strong>xtal.yml&lt;/strong>&lt;/div>
&lt;div class="card-body code p-l0 m-0">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">scale&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">vec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">; 1 0 1 ; 1 1 0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">atoms&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">Ca&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">F&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000">/4 1/4 1/4 ; 3/4 3/4 3/4&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>where &lt;strong>scale&lt;/strong> is a constant that multiplies all lattice vectors (a list of
three constants could have been provided), and the vertical lines tells yaml to
expect a text block. Our parser has a hierarchy of delimiters, ranging from
space, comma, semicolon, newline. In the above example, we have two types of
delimiters (i.e. spaces and newlines), which tells the code to form a matrix.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
&lt;h3 id="potential-errors-in-yaml-input">Potential Errors in yaml input&lt;/h3>
&lt;p>In the case of syntax error in YAML file, a &lt;code>RuntimeError&lt;/code> will be thrown indicating the an error has
occurred during the YAML loading process. For example, with the following text as YAML input:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">scale&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.764309&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">vec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"> 0 1 1 ; 1 0 1 ; 1 1 0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">atoms&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">Ca&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">| &lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">F&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">| &lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000">/4 1/4 1/4 ; 3/4 3/4 3/4&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following error message will appear:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c00;font-weight:bold">RuntimeError&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Following&lt;/span> &lt;span style="color:#000">error&lt;/span> &lt;span style="color:#000">occured&lt;/span> &lt;span style="color:#000">processing&lt;/span> &lt;span style="color:#204a87">input&lt;/span> &lt;span style="color:#000">YAML&lt;/span> &lt;span style="color:#000">string&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ScannerError&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">while&lt;/span> &lt;span style="color:#000">scanning&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000">simple&lt;/span> &lt;span style="color:#000">key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;unicode string&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">line&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">column&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">could&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#000">find&lt;/span> &lt;span style="color:#000">expected&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;:&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;unicode string&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">line&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">column&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;h2 id="prototype-crystal-structures">Prototype Crystal Structures&lt;/h2>
&lt;p>There are a number of very common crystal structures that are adopted in numerous compounds, such as rock salt,
flourite, etc. There is a simple command line script to output these crystal structures.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ pm-prototype-xtal --perovskite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Crystal&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">vec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3.91300000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3.91300000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3.91300000&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">atoms&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">Sr&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.50000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.50000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.50000000&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">Ti&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">O&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.50000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.50000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.50000000&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Translation Group</title><link>https://marianettigroup.github.io/docs/modules/translation-group/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/modules/translation-group/</guid><description>
&lt;p>When performing calculations, we need to use various properties of both the infinite translation group (Lattice)
and the finite translation group (LatticeFTG).
The infinite translation group contains the lattice vectors, and computes various information from them
(e.g. vector lengths and angles, volume, reciprocal lattice, etc).
The FTG
is naturally characterized by a supercell \(\hat{S}_{BZ}\), and LatticeFTG derives from Lattice.
Finding all translation points within a given supercell is a key task.
Similarly,
another key task is finding all the k-points commensurate with a given FTG, but this is
currently execute in the separate kpoints class.&lt;/p>
&lt;p>Additionally, we will need to find the smallest supercell that will accomodate a given set of \(\bm q\)-points.&lt;/p>
&lt;h2 id="lattice">Lattice&lt;/h2>
&lt;p>Here introduce the basic functionality of the &lt;code>Lattice&lt;/code> class using the
face center cubic as a demonstration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">principia_materia.translation_group&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Lattice&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">fcc_vec&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ones&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">identity&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">lattice&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Lattice&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fcc_vec&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">lattice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">vec&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span> &lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the above Lattice class object, we can compute various properties of the lattice.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;volume:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lattice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">vol&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">volume&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;lengths of the lattice vectors:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lattice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">abc&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">lengths&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">lattice&lt;/span> &lt;span style="color:#000">vectors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.70710678&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.70710678&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.70710678&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;angles between the lattice vectors:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lattice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">abg&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">angles&lt;/span> &lt;span style="color:#000">between&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">lattice&lt;/span> &lt;span style="color:#000">vectors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">60.&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">60.&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">60.&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is a reciprocal lattice associated with the lattice, which is also constructed in this class,
and we follow the convention \(\bm a_i\cdot \bm b_j =2\pi \delta_{ij} \), where
\(\bm a_i\) is a real space vector and \(\bm b_j\) is a reciprocal space vector.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lattice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rvec&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6.28318531&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6.28318531&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6.28318531&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6.28318531&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6.28318531&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6.28318531&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6.28318531&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6.28318531&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6.28318531&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;volume of reciprocal lattice:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lattice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rvol&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">volume&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">reciprocal&lt;/span> &lt;span style="color:#000">lattice&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">992.200854&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;lengths of the reciprocal lattice vectors:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lattice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rabc&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">lengths&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">reciprocal&lt;/span> &lt;span style="color:#000">lattice&lt;/span> &lt;span style="color:#000">vectors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10.88279619&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10.88279619&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10.88279619&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;angles between the reciprocal lattice vectors:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">lattice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rabg&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">angles&lt;/span> &lt;span style="color:#000">between&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">reciprocal&lt;/span> &lt;span style="color:#000">lattice&lt;/span> &lt;span style="color:#000">vectors&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">109.47122063&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">109.47122063&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">109.47122063&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Additionally, the Lattice class allows us to perform various operation to a lattice, for example applying an axial strain:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">strain&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.02&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># axial strain along x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">example_lattice&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">lattice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">copy&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">example_lattice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">axial_strain&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">strain&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">example_lattice&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">vec&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.51&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.51&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span> &lt;span style="color:#000;font-weight:bold">]]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="latticeftg">LatticeFTG&lt;/h2>
&lt;p>LatticeFTG is the class which handles finite translation groups, and the key
method of the class finds all tranlsation points (i.e. &lt;strong>t-points&lt;/strong>) contained
within the supercell. While this result can be obtained from a simple Cartesian
product in the case of a diagonal supercell, non-diagonal supercells are more subtle.
Non-diagonal supercells are important in the context of lattice dynamic, because
it is always preferrable to work with the smallest number of irreducible derivatives which
yield a smooth interpolation, and non-diagonal supercells yield multiplicities which cannot
be obtained solely using diagonal supercells.
Therefore, it is important to have a robust algorithm to find all lattice points
within an arbitrary supercell, and our algorithm is detailed in
Appendix D in &lt;a href="https://doi.org/10.1103/PhysRevB.100.014303">PRB 100 014303&lt;/a>.
The same algorithm can be reversed to compute the indices of the lattice points
at \(\mathcal{O}(1)\) time complexity, removing the need to create a hash
function.&lt;/p>
&lt;p>Below is a simple example which is easily recognizable: a fcc lattice with a supercell
that yields the conventional cubic cell.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">principia_materia.translation_group&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">LatticeFTG&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">fcc_vec&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ones&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">identity&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">S_bz&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ones&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">identity&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">lattice_ftg&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">LatticeFTG&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fcc_vec&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">S_bz&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">lattice_ftg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">vec&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span> &lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">lattice_ftg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">supa&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">lattice_ftg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">tpoints&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">lattice_ftg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_index&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lattice_ftg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">tpoints&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">lattice_ftg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">supa_vec&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1.&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">lattice_ftg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">supa_tpoints&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kpointsftg">KpointsFTG&lt;/h2>
&lt;p>We have a dedicated class for construcint k-points, though this is basically just
a trivial wrapper around LatticeFTG.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">principia_materia.translation_group&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">KpointsFTG&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">fcc_vec&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ones&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">identity&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">S_bz&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ones&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">identity&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">KpointsFTG&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fcc_vec&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">supa&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">S_bz&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ppoints&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">kpoints&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ppoints_to_kpoints&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">kpoints_to_ppoints&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="kpointsfsg">KpointsFSG&lt;/h2>
&lt;p>Similar to KpointsFTG, the class KpointsFSG is basically a trivial wrapper around LatticeFSG,
which handles the point symmetry of the lattice. Given that the most common use cases of point
symmetry are in reciprocal space, only KpointsFSG is outlined here.
KpointsFSG derives from KpointsFTG, so it shares all the same attributes outlined above.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">principia_materia.translation_group&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">KpointsFSG&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">fcc_vec&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.5&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ones&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">identity&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">S_bz&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">identity&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">KpointsFSG&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">fcc_vec&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">supa&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">S_bz&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">pg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Oh&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">kpoints&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">irr_kpoints&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">]],&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">irr_ppoints&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">N_irr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">irr_indexes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">indexes_map_irr_index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">indexes_map_irr_order&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">stars&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">little_groups&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Oh&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;D3d&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;D4h&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">kpoint_type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;real&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;real&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;real&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># operations that yield 4th point from irr counterpart&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpts&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">indexes_map_irr_ops&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;c3be&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;ci3de&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;c2y&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;c4x&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;c4z&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;c2d&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Ic3be&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Ici3de&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Ic2y&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Ic4x&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Ic4z&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Ic2d&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="qpointsn">QpointsN&lt;/h2>
&lt;p>Next, we can use the above information to find irreducible \(Q\)-points.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpointsn&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">QpointsN&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">vec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">lattice_vectors&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">supa&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">supa&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">order&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">pg&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">pg&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">qpointsn&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">find_irreducible_Qpoints&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[[&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)]],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)]]],&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="get_minimum_supercell">get_minimum_supercell&lt;/h2>
&lt;p>Algorithm to find the minimum supercell for a given list of \(\textbf{q}\)-points&lt;/p>
&lt;p>The minimum supercell multiplicity is derived in the paper.
Here using the implemented function, we find that for the \(\textbf{q}\)-point
\(\textbf{q}=\left(\frac{1}{4}, \frac{3}{4}, 0\right)\) the supercell of the minimum multiplicity is:&lt;/p>
&lt;p>$$
\hat{S}_{\textbf{q}} =
\begin{bmatrix}
1 &amp;amp; 1 &amp;amp; 0 \\
0 &amp;amp; 4 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}
$$&lt;/p>
&lt;p>, and for the \(Q\)-point
\(Q=\left[\left(\frac{1}{4}, \frac{3}{4}, 0\right), \left(\frac{1}{4}, \frac{1}{2}, 0\right), \left(\frac{3}{4}, \frac{1}{4}, \frac{1}{2}\right)\right]\)
the supercell of the minimum multiplicity is:&lt;/p>
&lt;p>$$
\hat{S}_{Q} = \begin{bmatrix}
4 &amp;amp; 0 &amp;amp; 0 \\
0 &amp;amp; 4 &amp;amp; 0 \\
0 &amp;amp; 0 &amp;amp; 2
\end{bmatrix}
$$&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">numpy&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">np&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">principia_materia.translation_group&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">get_minimum_supercell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">principia_materia.io_interface&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">parse_array&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">principia_materia.mathematics&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">Qpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">parse_array&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>&lt;span style="color:#4e9a06">... 1/4 3/4 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">... &amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">Qpoint&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">get_minimum_supercell&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Qpoint&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">Qpoint&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">parse_array&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span>&lt;span style="color:#4e9a06">... 1/4 3/4 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">... 1/4 1/2 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">... 3/4 1/4 1/2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">... &amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">Qpoint&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">get_minimum_supercell&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Qpoint&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Data Wrapper</title><link>https://marianettigroup.github.io/docs/data_management/data-wrapper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/data_management/data-wrapper/</guid><description/></item><item><title>Docs: Module principia_materia.cli</title><link>https://marianettigroup.github.io/docs/references/principia_materia.cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.cli.html</guid><description>
&lt;h1 id="principia_materiacli-package">principia_materia.cli package&lt;/h1>
&lt;h2 id="submodules">Submodules&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.bid_cli.html">principia_materia.cli.bid_cli module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.bid_cli.html#principia_materia.cli.bid_cli.BIDCLI">&lt;code>BIDCLI&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.bid_cli.html#principia_materia.cli.bid_cli.BIDCLI.set_defaults">&lt;code>BIDCLI.set_defaults()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.bid_cli.html#principia_materia.cli.bid_cli.BIDCLI.set_object">&lt;code>BIDCLI.set_object()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html">principia_materia.cli.cli_helper module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.check_input">&lt;code>check_input()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.get_job_handlers">&lt;code>get_job_handlers()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.parse_args">&lt;code>parse_args()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.set_dynamic_tensors_wrapper">&lt;code>set_dynamic_tensors_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.set_errortail_wrapper">&lt;code>set_errortail_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.set_finite_displacements_wrapper">&lt;code>set_finite_displacements_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.set_fourier_interpolation_wrapper">&lt;code>set_fourier_interpolation_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.set_irreducible_derivatives_wrapper">&lt;code>set_irreducible_derivatives_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.set_job_interface_wrapper">&lt;code>set_job_interface_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.set_lattice_dynamic_wrapper">&lt;code>set_lattice_dynamic_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.set_structure_arguments">&lt;code>set_structure_arguments()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.set_structure_wrapper">&lt;code>set_structure_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.cli_helper.html#principia_materia.cli.cli_helper.wrapper_to_argparse">&lt;code>wrapper_to_argparse()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.hsbid_cli.html">principia_materia.cli.hsbid_cli module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.hsbid_cli.html#principia_materia.cli.hsbid_cli.HSBIDCLI">&lt;code>HSBIDCLI&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.hsbid_cli.html#principia_materia.cli.hsbid_cli.HSBIDCLI.set_defaults">&lt;code>HSBIDCLI.set_defaults()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.hsbid_cli.html#principia_materia.cli.hsbid_cli.HSBIDCLI.set_object">&lt;code>HSBIDCLI.set_object()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.jobs_cli.html">principia_materia.cli.jobs_cli module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.jobs_cli.html#principia_materia.cli.jobs_cli.main">&lt;code>main()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.jobs_cli.html#principia_materia.cli.jobs_cli.setup_parsers">&lt;code>setup_parsers()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.lid_cli.html">principia_materia.cli.lid_cli module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.lid_cli.html#principia_materia.cli.lid_cli.get_lid">&lt;code>get_lid()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.lid_cli.html#principia_materia.cli.lid_cli.main">&lt;code>main()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.lid_cli.html#principia_materia.cli.lid_cli.setup_parsers">&lt;code>setup_parsers()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.lid_mesh_cli.html">principia_materia.cli.lid_mesh_cli module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.lid_mesh_cli.html#principia_materia.cli.lid_mesh_cli.LIDMeshCLI">&lt;code>LIDMeshCLI&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.lid_mesh_cli.html#principia_materia.cli.lid_mesh_cli.LIDMeshCLI.set_defaults">&lt;code>LIDMeshCLI.set_defaults()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.lid_mesh_cli.html#principia_materia.cli.lid_mesh_cli.LIDMeshCLI.set_object">&lt;code>LIDMeshCLI.set_object()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.phonon_band_dos_cli.html">principia_materia.cli.phonon_band_dos_cli module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.phonon_band_dos_cli.html#principia_materia.cli.phonon_band_dos_cli.main">&lt;code>main()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.cli.phonon_band_dos_cli.html#principia_materia.cli.phonon_band_dos_cli.setup_parsers">&lt;code>setup_parsers()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="module-contents">Module contents&lt;/h2></description></item><item><title>Docs: Module principia_materia.cli.bid_cli</title><link>https://marianettigroup.github.io/docs/references/principia_materia.cli.bid_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.cli.bid_cli.html</guid><description>
&lt;h1 id="principia_materiaclibid_cli-module">principia_materia.cli.bid_cli module&lt;/h1>
&lt;h3 id="_class_-principia_materiaclibid_clibidcli">&lt;em>class&lt;/em> principia_materia.cli.bid_cli.BIDCLI()&lt;/h3>
&lt;p>Bases: &lt;code>BaseIDCLI&lt;/code>&lt;/p>
&lt;h4 id="set_defaults">set_defaults()&lt;/h4>
&lt;h4 id="set_object">set_object()&lt;/h4></description></item><item><title>Docs: Module principia_materia.cli.cli_helper</title><link>https://marianettigroup.github.io/docs/references/principia_materia.cli.cli_helper.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.cli.cli_helper.html</guid><description>
&lt;h1 id="principia_materiaclicli_helper-module">principia_materia.cli.cli_helper module&lt;/h1>
&lt;h3 id="principia_materiaclicli_helpercheck_inputdata-required">principia_materia.cli.cli_helper.check_input(data, required=[])&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperget_job_handlersdata-structure-pgnone-create_dbfalse">principia_materia.cli.cli_helper.get_job_handlers(data, structure, pg=None, create_db=False)&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperparse_argsparser-wrapper-argsnone-defaults">principia_materia.cli.cli_helper.parse_args(parser, wrapper, args=None, defaults={})&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperset_dynamic_tensors_wrapperwrapper-include_loadfalse-include_savetrue">principia_materia.cli.cli_helper.set_dynamic_tensors_wrapper(wrapper, include_load=False, include_save=True)&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperset_errortail_wrapperwrapper">principia_materia.cli.cli_helper.set_errortail_wrapper(wrapper)&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperset_finite_displacements_wrapperwrapper-include_supafalse">principia_materia.cli.cli_helper.set_finite_displacements_wrapper(wrapper, include_supa=False)&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperset_fourier_interpolation_wrapperwrapper-include_loadfalse-include_savetrue">principia_materia.cli.cli_helper.set_fourier_interpolation_wrapper(wrapper, include_load=False, include_save=True)&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperset_irreducible_derivatives_wrapperwrapper-include_loadfalse-include_savetrue">principia_materia.cli.cli_helper.set_irreducible_derivatives_wrapper(wrapper, include_load=False, include_save=True)&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperset_job_interface_wrapperwrapper">principia_materia.cli.cli_helper.set_job_interface_wrapper(wrapper)&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperset_lattice_dynamic_wrapperwrapper-include_qpointfalse-include_ordertrue-include_extratrue">principia_materia.cli.cli_helper.set_lattice_dynamic_wrapper(wrapper, include_Qpoint=False, include_order=True, include_extra=True)&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperset_structure_argumentsparser">principia_materia.cli.cli_helper.set_structure_arguments(parser)&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperset_structure_wrapperwrapper">principia_materia.cli.cli_helper.set_structure_wrapper(wrapper)&lt;/h3>
&lt;h3 id="principia_materiaclicli_helperwrapper_to_argparsewrapper-parser-exclude-defaults">principia_materia.cli.cli_helper.wrapper_to_argparse(wrapper, parser, exclude=[], defaults={})&lt;/h3></description></item><item><title>Docs: Module principia_materia.cli.hsbid_cli</title><link>https://marianettigroup.github.io/docs/references/principia_materia.cli.hsbid_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.cli.hsbid_cli.html</guid><description>
&lt;h1 id="principia_materiaclihsbid_cli-module">principia_materia.cli.hsbid_cli module&lt;/h1>
&lt;h3 id="_class_-principia_materiaclihsbid_clihsbidcli">&lt;em>class&lt;/em> principia_materia.cli.hsbid_cli.HSBIDCLI()&lt;/h3>
&lt;p>Bases: &lt;code>BaseIDCLI&lt;/code>&lt;/p>
&lt;h4 id="set_defaults">set_defaults()&lt;/h4>
&lt;h4 id="set_object">set_object()&lt;/h4></description></item><item><title>Docs: Module principia_materia.cli.jobs_cli</title><link>https://marianettigroup.github.io/docs/references/principia_materia.cli.jobs_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.cli.jobs_cli.html</guid><description>
&lt;h1 id="principia_materiaclijobs_cli-module">principia_materia.cli.jobs_cli module&lt;/h1>
&lt;h3 id="principia_materiaclijobs_climainargsnone">principia_materia.cli.jobs_cli.main(args=None)&lt;/h3>
&lt;h3 id="principia_materiaclijobs_clisetup_parsers">principia_materia.cli.jobs_cli.setup_parsers()&lt;/h3></description></item><item><title>Docs: Module principia_materia.cli.lid_cli</title><link>https://marianettigroup.github.io/docs/references/principia_materia.cli.lid_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.cli.lid_cli.html</guid><description>
&lt;h1 id="principia_materiaclilid_cli-module">principia_materia.cli.lid_cli module&lt;/h1>
&lt;h3 id="principia_materiaclilid_cliget_liddata-tol1e-06">principia_materia.cli.lid_cli.get_lid(data, tol=1e-06)&lt;/h3>
&lt;h3 id="principia_materiaclilid_climainargsnone">principia_materia.cli.lid_cli.main(args=None)&lt;/h3>
&lt;h3 id="principia_materiaclilid_clisetup_parsers">principia_materia.cli.lid_cli.setup_parsers()&lt;/h3></description></item><item><title>Docs: Module principia_materia.cli.lid_mesh_cli</title><link>https://marianettigroup.github.io/docs/references/principia_materia.cli.lid_mesh_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.cli.lid_mesh_cli.html</guid><description>
&lt;h1 id="principia_materiaclilid_mesh_cli-module">principia_materia.cli.lid_mesh_cli module&lt;/h1>
&lt;h3 id="_class_-principia_materiaclilid_mesh_clilidmeshcli">&lt;em>class&lt;/em> principia_materia.cli.lid_mesh_cli.LIDMeshCLI()&lt;/h3>
&lt;p>Bases: &lt;code>BaseIDCLI&lt;/code>&lt;/p>
&lt;h4 id="set_defaults">set_defaults()&lt;/h4>
&lt;h4 id="set_object">set_object()&lt;/h4></description></item><item><title>Docs: Module principia_materia.cli.phonon_band_dos_cli</title><link>https://marianettigroup.github.io/docs/references/principia_materia.cli.phonon_band_dos_cli.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.cli.phonon_band_dos_cli.html</guid><description>
&lt;h1 id="principia_materiacliphonon_band_dos_cli-module">principia_materia.cli.phonon_band_dos_cli module&lt;/h1>
&lt;h3 id="principia_materiacliphonon_band_dos_climainargsnone">principia_materia.cli.phonon_band_dos_cli.main(args=None)&lt;/h3>
&lt;h3 id="principia_materiacliphonon_band_dos_clisetup_parsers">principia_materia.cli.phonon_band_dos_cli.setup_parsers()&lt;/h3></description></item><item><title>Docs: Module principia_materia.constants</title><link>https://marianettigroup.github.io/docs/references/principia_materia.constants.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.constants.html</guid><description>
&lt;h1 id="principia_materiaconstants-package">principia_materia.constants package&lt;/h1>
&lt;h2 id="submodules">Submodules&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.constants.periodic_table.html">principia_materia.constants.periodic_table module&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.constants.physical_constant.html">principia_materia.constants.physical_constant module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.constants.physical_constant.html#principia_materia.constants.physical_constant.PhysicalConstant">&lt;code>PhysicalConstant&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.constants.physical_constant.html#principia_materia.constants.physical_constant.PhysicalConstant.data_parse">&lt;code>PhysicalConstant.data_parse()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.constants.physical_constant.html#principia_materia.constants.physical_constant.PhysicalConstant.existing_units">&lt;code>PhysicalConstant.existing_units&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.constants.point_group_notation_table.html">principia_materia.constants.point_group_notation_table module&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.constants.unit_conversion.html">principia_materia.constants.unit_conversion module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.constants.unit_conversion.html#principia_materia.constants.unit_conversion.UnitConversion">&lt;code>UnitConversion&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.constants.unit_conversion.html#principia_materia.constants.unit_conversion.UnitConversion.data_parse">&lt;code>UnitConversion.data_parse()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.constants.unit_conversion.html#principia_materia.constants.unit_conversion.UnitConversion.find_path">&lt;code>UnitConversion.find_path()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="module-contents">Module contents&lt;/h2></description></item><item><title>Docs: Module principia_materia.constants.periodic_table</title><link>https://marianettigroup.github.io/docs/references/principia_materia.constants.periodic_table.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.constants.periodic_table.html</guid><description>
&lt;h1 id="principia_materiaconstantsperiodic_table-module">principia_materia.constants.periodic_table module&lt;/h1></description></item><item><title>Docs: Module principia_materia.constants.physical_constant</title><link>https://marianettigroup.github.io/docs/references/principia_materia.constants.physical_constant.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.constants.physical_constant.html</guid><description>
&lt;h1 id="principia_materiaconstantsphysical_constant-module">principia_materia.constants.physical_constant module&lt;/h1>
&lt;h3 id="_class_-principia_materiaconstantsphysical_constantphysicalconstantdata-namenone-default_unitnone">&lt;em>class&lt;/em> principia_materia.constants.physical_constant.PhysicalConstant(data, name=None, default_unit=None)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>A &lt;em>physical&lt;/em> constant in a given units&lt;/p>
&lt;p>This class will construct a given physical constant in different units.
with provided data at construction.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>data&lt;/strong> (str) – Table of constant values data. (See below for format eamples.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>name&lt;/strong> (str, optional, default to None) – Name of the constant.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>default_unit&lt;/strong> (str, optional, default to None) – The default unit for the constant.
If None, default to the first in the provided data.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="_static_-data_parsedata">&lt;em>static&lt;/em> data_parse(data)&lt;/h4>
&lt;h4 id="_property_-existing_units">&lt;em>property&lt;/em> existing_units()&lt;/h4></description></item><item><title>Docs: Module principia_materia.constants.point_group_notation_table</title><link>https://marianettigroup.github.io/docs/references/principia_materia.constants.point_group_notation_table.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.constants.point_group_notation_table.html</guid><description>
&lt;h1 id="principia_materiaconstantspoint_group_notation_table-module">principia_materia.constants.point_group_notation_table module&lt;/h1></description></item><item><title>Docs: Module principia_materia.constants.unit_conversion</title><link>https://marianettigroup.github.io/docs/references/principia_materia.constants.unit_conversion.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.constants.unit_conversion.html</guid><description>
&lt;h1 id="principia_materiaconstantsunit_conversion-module">principia_materia.constants.unit_conversion module&lt;/h1>
&lt;h3 id="_class_-principia_materiaconstantsunit_conversionunitconversiondata">&lt;em>class&lt;/em> principia_materia.constants.unit_conversion.UnitConversion(data)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>Find unit conversion coefficients&lt;/p>
&lt;p>This class construct a graph of different units and find a path within
the graph the calculate unit conversion coefficients.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>data&lt;/strong> (str) – Table of unit conversion data. (See below for format eamples.)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_static_-data_parsedata">&lt;em>static&lt;/em> data_parse(data)&lt;/h4>
&lt;h4 id="_classmethod_-find_pathgraph-start-end-path">&lt;em>classmethod&lt;/em> find_path(graph, start, end, path=[])&lt;/h4></description></item><item><title>Docs: Module principia_materia.hamiltonian</title><link>https://marianettigroup.github.io/docs/references/principia_materia.hamiltonian.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.hamiltonian.html</guid><description>
&lt;h1 id="principia_materiahamiltonian-package">principia_materia.hamiltonian package&lt;/h1>
&lt;h2 id="submodules">Submodules&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html">principia_materia.hamiltonian.electron_hamiltonian module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian">&lt;code>ElectronHamiltonian&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.diagonalize_hamiltonians">&lt;code>ElectronHamiltonian.diagonalize_hamiltonians()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.get_embeded_self_energy">&lt;code>ElectronHamiltonian.get_embeded_self_energy()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.get_fermi_energy">&lt;code>ElectronHamiltonian.get_fermi_energy()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.get_hamiltonian_matrices_at_kpoints">&lt;code>ElectronHamiltonian.get_hamiltonian_matrices_at_kpoints()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.get_state">&lt;code>ElectronHamiltonian.get_state()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.get_total_energy">&lt;code>ElectronHamiltonian.get_total_energy()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.hartree_fock">&lt;code>ElectronHamiltonian.hartree_fock()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.set_density_matrix">&lt;code>ElectronHamiltonian.set_density_matrix()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.set_fermi_energy">&lt;code>ElectronHamiltonian.set_fermi_energy()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.set_hamiltonian">&lt;code>ElectronHamiltonian.set_hamiltonian()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian._hamiltonian">&lt;code>ElectronHamiltonian._hamiltonian&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.set_nd">&lt;code>ElectronHamiltonian.set_nd()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.set_self_energy">&lt;code>ElectronHamiltonian.set_self_energy()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.electron_hamiltonian.html#principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian.set_total_energy">&lt;code>ElectronHamiltonian.set_total_energy()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html">principia_materia.hamiltonian.hamiltonian module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian">&lt;code>Hamiltonian&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.compute_DOS">&lt;code>Hamiltonian.compute_DOS()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian._dos">&lt;code>Hamiltonian._dos&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian._cdos">&lt;code>Hamiltonian._cdos&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.compute_PDOS">&lt;code>Hamiltonian.compute_PDOS()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian._pdos">&lt;code>Hamiltonian._pdos&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian._cpdos">&lt;code>Hamiltonian._cpdos&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.decimal">&lt;code>Hamiltonian.decimal&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.diagonalize_hamiltonians">&lt;code>Hamiltonian.diagonalize_hamiltonians()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.get_hamiltonian_matrices_at_kpoints">&lt;code>Hamiltonian.get_hamiltonian_matrices_at_kpoints()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.is_kpoints_from_mesh">&lt;code>Hamiltonian.is_kpoints_from_mesh&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.nspin">&lt;code>Hamiltonian.nspin&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.set_charmblochrep">&lt;code>Hamiltonian.set_charmblochrep()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.set_eigenvalues">&lt;code>Hamiltonian.set_eigenvalues()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.set_hamiltonian">&lt;code>Hamiltonian.set_hamiltonian()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.set_hamiltonian_at_kpoints">&lt;code>Hamiltonian.set_hamiltonian_at_kpoints()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.set_hamiltonian_from_mesh">&lt;code>Hamiltonian.set_hamiltonian_from_mesh()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.set_tetrahedra">&lt;code>Hamiltonian.set_tetrahedra()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.spin">&lt;code>Hamiltonian.spin&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian.units">&lt;code>Hamiltonian.units&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html">principia_materia.hamiltonian.model_hamiltonian module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian">&lt;code>ModelHamiltonian&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian.from_dict">&lt;code>ModelHamiltonian.from_dict()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian.get_hamiltonian_at_kpoint">&lt;code>ModelHamiltonian.get_hamiltonian_at_kpoint()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian.hamiltonian_matrices">&lt;code>ModelHamiltonian.hamiltonian_matrices&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian.nortbials">&lt;code>ModelHamiltonian.nortbials&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian.set_hamiltonian">&lt;code>ModelHamiltonian.set_hamiltonian()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian.tpoints">&lt;code>ModelHamiltonian.tpoints&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.format_hamiltonian_to_yaml">&lt;code>format_hamiltonian_to_yaml()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.get_ModelHamiltonian_hdf5_wrapper">&lt;code>get_ModelHamiltonian_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.get_ModelHamiltonian_yaml_wrapper">&lt;code>get_ModelHamiltonian_yaml_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.get_modelhamiltonian_from_hdf5">&lt;code>get_modelhamiltonian_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.get_modelhamiltonian_from_yaml">&lt;code>get_modelhamiltonian_from_yaml()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.load_hamiltonian">&lt;code>load_hamiltonian()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.save_modelhamiltonian_to_hdf5">&lt;code>save_modelhamiltonian_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.save_modelhamiltonian_to_yaml">&lt;code>save_modelhamiltonian_to_yaml()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.phonon_hamiltonian.html">principia_materia.hamiltonian.phonon_hamiltonian module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.phonon_hamiltonian.html#principia_materia.hamiltonian.phonon_hamiltonian.PhononHamiltonian">&lt;code>PhononHamiltonian&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.phonon_hamiltonian.html#principia_materia.hamiltonian.phonon_hamiltonian.PhononHamiltonian.diagonalize_hamiltonians">&lt;code>PhononHamiltonian.diagonalize_hamiltonians()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.phonon_hamiltonian.html#principia_materia.hamiltonian.phonon_hamiltonian.PhononHamiltonian.get_hamiltonian_matrices_at_kpoints">&lt;code>PhononHamiltonian.get_hamiltonian_matrices_at_kpoints()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.phonon_hamiltonian.html#principia_materia.hamiltonian.phonon_hamiltonian.PhononHamiltonian.set_hamiltonian">&lt;code>PhononHamiltonian.set_hamiltonian()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.hamiltonian.phonon_hamiltonian.html#principia_materia.hamiltonian.phonon_hamiltonian.PhononHamiltonian._hamiltonian">&lt;code>PhononHamiltonian._hamiltonian&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="module-contents">Module contents&lt;/h2></description></item><item><title>Docs: Module principia_materia.hamiltonian.electron_hamiltonian</title><link>https://marianettigroup.github.io/docs/references/principia_materia.hamiltonian.electron_hamiltonian.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.hamiltonian.electron_hamiltonian.html</guid><description>
&lt;h1 id="principia_materiahamiltonianelectron_hamiltonian-module">principia_materia.hamiltonian.electron_hamiltonian module&lt;/h1>
&lt;h3 id="_class_-principia_materiahamiltonianelectron_hamiltonianelectronhamiltonianstructure-meshnone-pgc1-nspin1-nelectnone-ferminone-ncor0-u0-unitsev-verbosity1-tol1e-06">&lt;em>class&lt;/em> principia_materia.hamiltonian.electron_hamiltonian.ElectronHamiltonian(structure, mesh=None, pg=&amp;lsquo;C1&amp;rsquo;, nspin=1, nelect=None, fermi=None, ncor=0, U=0, units=&amp;lsquo;eV&amp;rsquo;, verbosity=1, tol=1e-06)&lt;/h3>
&lt;p>Bases: &lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian">&lt;code>Hamiltonian&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>nelect&lt;/strong> (int, optional, default to None) – Number of valence electrons.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>fermi&lt;/strong> (float, optional, default to None) – Fermy energy, in unit of eV.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ncor&lt;/strong> (int, optional, default to None) – Number of correlated orbitals.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>U&lt;/strong> (int, optional, default to 0) – The Coulumb hamiltonian term U.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="diagonalize_hamiltonianshamiltonians_matrices-uplol">diagonalize_hamiltonians(hamiltonians_matrices, UPLO=&amp;lsquo;L&amp;rsquo;)&lt;/h4>
&lt;p>Diagonalize and compute the eigenvalues hamiltonians in reciprocal space.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>eigenvalues&lt;/strong> (&lt;em>array of float, shape(N, nspin, norbitals)&lt;/em>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>eigenvectors&lt;/strong> (&lt;em>array of float, shape(N, nspin, norbitals, norbitals)&lt;/em>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_embeded_self_energy">get_embeded_self_energy()&lt;/h4>
&lt;p>Embed the self-energy minus the dc in a matrix the size of the Hamiltonian.&lt;/p>
&lt;h4 id="get_fermi_energy">get_fermi_energy()&lt;/h4>
&lt;p>Get Fermi energy.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>fermi&lt;/strong> – The Fermi energy.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>float&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_hamiltonian_matrices_at_kpointskpoints">get_hamiltonian_matrices_at_kpoints(kpoints)&lt;/h4>
&lt;p>Get hamiltonian matrices at k-points&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>kpoints&lt;/strong> (array of float or &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>, shape(dim, ) or shape(N, dim)) – k-points.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>hamiltonians_matrices&lt;/strong> – Interaction matrices.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of complex, shape(norbitals, norbitals) or shape(N, norbitals, norbitals)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_state">get_state()&lt;/h4>
&lt;p>Get insulator/metal state of the Hamiltonian.&lt;/p>
&lt;h4 id="get_total_energy">get_total_energy()&lt;/h4>
&lt;p>Get the total energy of the Hamiltonian.&lt;/p>
&lt;h4 id="hartree_focknd0-nscf40-tol1e-05-mix07-perturbtrue-dcfalse">hartree_fock(nd=0, nscf=40, tol=1e-05, mix=0.7, perturb=True, dc=False)&lt;/h4>
&lt;p>Hartree Fock.&lt;/p>
&lt;h4 id="set_density_matrix">set_density_matrix()&lt;/h4>
&lt;p>Compute the density matrix of the Hamiltonian.&lt;/p>
&lt;h4 id="set_fermi_energyreplacefalse-maxiter200-raise_exceptionfalse">set_fermi_energy(replace=False, maxiter=200, raise_exception=False)&lt;/h4>
&lt;p>Compute Fermi energy with binary search and tetrahedron method.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>replace&lt;/strong> (bool, optional, default to False) – Re-compute Fermi energy when attribute &lt;code>_fermi&lt;/code> is not None.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>maxiter&lt;/strong> (int, optional, default to 200) – The maximum number of iterations to search for the Fermi energy.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>raise_exception&lt;/strong> (bool, optional, default to False) – Whether to raise an exception when the maximum iteration
is reached before the error tolerence is reached.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_hamiltonianhamiltonian">set_hamiltonian(hamiltonian)&lt;/h4>
&lt;p>Set electron hamiltonian.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>hamiltonian&lt;/strong> (&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian">ModelHamiltonian&lt;/a>) – ModelHamiltonian object.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_hamiltonian">_hamiltonian()&lt;/h4>
&lt;p>ModelHamiltonian object.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>&lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian">ModelHamiltonian&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_ndnd-max_loop200-tol00001">set_nd(nd, max_loop=200, tol=0.0001)&lt;/h4>
&lt;p>Adjust number d-electrons.&lt;/p>
&lt;p>Adjust the double-counting to get the desired number of d-electrons while
maintaining the proper density. This algo creates a a scalar function which
computes nd for a given dc while always adjusting the fermi energy to give
the correct density. This function is then manually bounded and then sent
to brentq in order to find the root.&lt;/p>
&lt;h4 id="set_self_energyself_energy-ferminone-dcnone">set_self_energy(self_energy, fermi=None, dc=None)&lt;/h4>
&lt;h4 id="set_total_energy">set_total_energy()&lt;/h4>
&lt;p>Compute the total energy of the Hamiltonian with tetrahedron method.&lt;/p></description></item><item><title>Docs: Module principia_materia.hamiltonian.hamiltonian</title><link>https://marianettigroup.github.io/docs/references/principia_materia.hamiltonian.hamiltonian.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.hamiltonian.hamiltonian.html</guid><description>
&lt;h1 id="principia_materiahamiltonianhamiltonian-module">principia_materia.hamiltonian.hamiltonian module&lt;/h1>
&lt;h3 id="_class_-principia_materiahamiltonianhamiltonianhamiltonianstructure-meshnone-pgc1-nspin1-unitsev-verbosity1-tol1e-06">&lt;em>class&lt;/em> principia_materia.hamiltonian.hamiltonian.Hamiltonian(structure, mesh=None, pg=&amp;lsquo;C1&amp;rsquo;, nspin=1, units=&amp;lsquo;eV&amp;rsquo;, verbosity=1, tol=1e-06)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>The Hamiltonian of a system.&lt;/p>
&lt;h4 id="compute_dosnbins-return_cdosfalse">compute_DOS(nbins, return_cdos=False)&lt;/h4>
&lt;p>Compute density of states for energies between the minimum and maximum values of eigenvalues.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>nbins&lt;/strong> (int) – The number of energies to evaluate between the minimum and maximum eigenvalues.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_dos">_dos()&lt;/h4>
&lt;p>Density of states.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(nbins, nspins)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_cdos">_cdos()&lt;/h4>
&lt;p>Cumulative density of states.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(nbins, nspins)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="compute_pdosnbins-return_cpdosfalse">compute_PDOS(nbins, return_cpdos=False)&lt;/h4>
&lt;p>Compute partial density of states for energies between the minimum and maximum values of eigenvalues.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>nbins&lt;/strong> (int) – The number of energies to evaluate between the minimum and maximum eigenvalues.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_pdos">_pdos()&lt;/h4>
&lt;p>Partial density of states.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(nbins, nspins, norbitals)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_cpdos">_cpdos()&lt;/h4>
&lt;p>Cumulative partial density of states.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(nbins, nspins, norbitals)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-decimal">&lt;em>property&lt;/em> decimal()&lt;/h4>
&lt;h4 id="_abstract_-diagonalize_hamiltonianshamiltonians_matrices">&lt;em>abstract&lt;/em> diagonalize_hamiltonians(hamiltonians_matrices)&lt;/h4>
&lt;p>Diagonalize hamiltonians in reciprocal space.&lt;/p>
&lt;p>In terms of electrons, it’s computing the eigenvalues of the hamiltonians.
In terms of phonons, it’s compute the phonon frequencies of dynamic matrices.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>eigenvalues&lt;/strong> (&lt;em>array of float, shape(N, nspin, norbitals)&lt;/em>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>eigenvectors&lt;/strong> (&lt;em>array of float, shape(N, nspin, norbitals, norbitals)&lt;/em>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="_abstract_-get_hamiltonian_matrices_at_kpointskpoints">&lt;em>abstract&lt;/em> get_hamiltonian_matrices_at_kpoints(kpoints)&lt;/h4>
&lt;p>Get hamiltonian matrices at k-points&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>kpoints&lt;/strong> (array of float or &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>, shape(dim, ) or shape(N, dim)) – k-points.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>hamiltonians_matrices&lt;/strong> – Interaction matrices.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of complex, shape(norbitals, norbitals) or shape(N, norbitals, norbitals)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-is_kpoints_from_mesh">&lt;em>property&lt;/em> is_kpoints_from_mesh()&lt;/h4>
&lt;p>Check if the k-points attribute matches the k-point mesh generated from self.mesh.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>match&lt;/strong> – Whether the k-points attribute matches the k-point mesh.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>bool&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-nspin">&lt;em>property&lt;/em> nspin()&lt;/h4>
&lt;h4 id="set_charmblochrep">set_charmblochrep()&lt;/h4>
&lt;h4 id="set_eigenvalues">set_eigenvalues()&lt;/h4>
&lt;h4 id="_abstract_-set_hamiltonianhamiltonian">&lt;em>abstract&lt;/em> set_hamiltonian(hamiltonian)&lt;/h4>
&lt;h4 id="set_hamiltonian_at_kpointskpoints">set_hamiltonian_at_kpoints(kpoints)&lt;/h4>
&lt;h4 id="set_hamiltonian_from_mesh">set_hamiltonian_from_mesh()&lt;/h4>
&lt;h4 id="set_tetrahedra">set_tetrahedra()&lt;/h4>
&lt;h4 id="_property_-spin">&lt;em>property&lt;/em> spin()&lt;/h4>
&lt;h4 id="_property_-units">&lt;em>property&lt;/em> units()&lt;/h4></description></item><item><title>Docs: Module principia_materia.hamiltonian.model_hamiltonian</title><link>https://marianettigroup.github.io/docs/references/principia_materia.hamiltonian.model_hamiltonian.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.hamiltonian.model_hamiltonian.html</guid><description>
&lt;h1 id="principia_materiahamiltonianmodel_hamiltonian-module">principia_materia.hamiltonian.model_hamiltonian module&lt;/h1>
&lt;h3 id="_class_-principia_materiahamiltonianmodel_hamiltonianmodelhamiltoniandim3-ftmode0">&lt;em>class&lt;/em> principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian(dim=3, ftmode=0)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;h4 id="_classmethod_-from_dictdata-ftmode0">&lt;em>classmethod&lt;/em> from_dict(data, ftmode=0)&lt;/h4>
&lt;h4 id="get_hamiltonian_at_kpointkpoints">get_hamiltonian_at_kpoint(kpoints)&lt;/h4>
&lt;h4 id="_property_-hamiltonian_matrices">&lt;em>property&lt;/em> hamiltonian_matrices()&lt;/h4>
&lt;h4 id="_property_-nortbials">&lt;em>property&lt;/em> nortbials()&lt;/h4>
&lt;h4 id="set_hamiltoniantpoints-hamiltonian_matrices">set_hamiltonian(tpoints, hamiltonian_matrices)&lt;/h4>
&lt;h4 id="_property_-tpoints">&lt;em>property&lt;/em> tpoints()&lt;/h4>
&lt;h3 id="principia_materiahamiltonianmodel_hamiltonianformat_hamiltonian_to_yamlobj">principia_materia.hamiltonian.model_hamiltonian.format_hamiltonian_to_yaml(obj)&lt;/h3>
&lt;h3 id="principia_materiahamiltonianmodel_hamiltonianget_modelhamiltonian_hdf5_wrapper">principia_materia.hamiltonian.model_hamiltonian.get_ModelHamiltonian_hdf5_wrapper()&lt;/h3>
&lt;h3 id="principia_materiahamiltonianmodel_hamiltonianget_modelhamiltonian_yaml_wrapper">principia_materia.hamiltonian.model_hamiltonian.get_ModelHamiltonian_yaml_wrapper()&lt;/h3>
&lt;h3 id="principia_materiahamiltonianmodel_hamiltonianget_modelhamiltonian_from_hdf5h5file">principia_materia.hamiltonian.model_hamiltonian.get_modelhamiltonian_from_hdf5(h5file)&lt;/h3>
&lt;h3 id="principia_materiahamiltonianmodel_hamiltonianget_modelhamiltonian_from_yamlfilename">principia_materia.hamiltonian.model_hamiltonian.get_modelhamiltonian_from_yaml(filename)&lt;/h3>
&lt;h3 id="principia_materiahamiltonianmodel_hamiltonianload_hamiltoniandata">principia_materia.hamiltonian.model_hamiltonian.load_hamiltonian(data)&lt;/h3>
&lt;h3 id="principia_materiahamiltonianmodel_hamiltoniansave_modelhamiltonian_to_hdf5obj-h5filemodel_hamiltonianhdf5-overwritefalse">principia_materia.hamiltonian.model_hamiltonian.save_modelhamiltonian_to_hdf5(obj, h5file=&amp;lsquo;model_hamiltonian.hdf5&amp;rsquo;, overwrite=False)&lt;/h3>
&lt;h3 id="principia_materiahamiltonianmodel_hamiltoniansave_modelhamiltonian_to_yamlobj-filenamemodel_hamiltonianhdf5-overwritefalse">principia_materia.hamiltonian.model_hamiltonian.save_modelhamiltonian_to_yaml(obj, filename=&amp;lsquo;model_hamiltonian.hdf5&amp;rsquo;, overwrite=False)&lt;/h3></description></item><item><title>Docs: Module principia_materia.hamiltonian.phonon_hamiltonian</title><link>https://marianettigroup.github.io/docs/references/principia_materia.hamiltonian.phonon_hamiltonian.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.hamiltonian.phonon_hamiltonian.html</guid><description>
&lt;h1 id="principia_materiahamiltonianphonon_hamiltonian-module">principia_materia.hamiltonian.phonon_hamiltonian module&lt;/h1>
&lt;h3 id="_class_-principia_materiahamiltonianphonon_hamiltonianphononhamiltonianstructure-meshnone-pgc1-unitsthz-verbosity1-tol1e-06">&lt;em>class&lt;/em> principia_materia.hamiltonian.phonon_hamiltonian.PhononHamiltonian(structure, mesh=None, pg=&amp;lsquo;C1&amp;rsquo;, units=&amp;lsquo;THz&amp;rsquo;, verbosity=1, tol=1e-06)&lt;/h3>
&lt;p>Bases: &lt;a href="principia_materia.hamiltonian.hamiltonian.html#principia_materia.hamiltonian.hamiltonian.Hamiltonian">&lt;code>Hamiltonian&lt;/code>&lt;/a>&lt;/p>
&lt;h4 id="diagonalize_hamiltonianshamiltonians_matrices-uplol">diagonalize_hamiltonians(hamiltonians_matrices, UPLO=&amp;lsquo;L&amp;rsquo;)&lt;/h4>
&lt;p>Diagonalize and compute the phonon frequencies of dynamic matrices in reciprocal space.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>eigenvalues&lt;/strong> (&lt;em>array of float, shape(N, nspin, norbitals)&lt;/em>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>eigenvectors&lt;/strong> (&lt;em>array of float, shape(N, nspin, norbitals, norbitals)&lt;/em>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_hamiltonian_matrices_at_kpointskpoints">get_hamiltonian_matrices_at_kpoints(kpoints)&lt;/h4>
&lt;p>Get hamiltonian matrices at k-points&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>kpoints&lt;/strong> (array of float or &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>, shape(dim, ) or shape(N, dim)) – k-points.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>hamiltonians_matrices&lt;/strong> – Interaction matrices.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of complex, shape(norbitals, norbitals) or shape(N, norbitals, norbitals)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_hamiltonianhamiltonian">set_hamiltonian(hamiltonian)&lt;/h4>
&lt;p>Set phonon hamiltonian.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>hamiltonian&lt;/strong> (&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation">FourierInterpolation&lt;/a> or &lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian">ModelHamiltonian&lt;/a> or str) – FourierInterpolation or ModelHamiltonian object or path to FourierInterpolation HDF5 data file.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_hamiltonian">_hamiltonian()&lt;/h4>
&lt;p>FourierInterpolation or ModelHamiltonian object.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation">FourierInterpolation&lt;/a> or &lt;a href="principia_materia.hamiltonian.model_hamiltonian.html#principia_materia.hamiltonian.model_hamiltonian.ModelHamiltonian">ModelHamiltonian&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.io_interface</title><link>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.html</guid><description>
&lt;h1 id="principia_materiaio_interface-package">principia_materia.io_interface package&lt;/h1>
&lt;h2 id="submodules">Submodules&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.array_io.html">principia_materia.io_interface.array_io module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.array_io.html#principia_materia.io_interface.array_io.ArrayFormatter">&lt;code>ArrayFormatter&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.array_io.html#principia_materia.io_interface.array_io.ArrayFormatter.firstline_line_begin">&lt;code>ArrayFormatter.firstline_line_begin()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.array_io.html#principia_materia.io_interface.array_io.ArrayFormatter.format_array">&lt;code>ArrayFormatter.format_array()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.array_io.html#principia_materia.io_interface.array_io.ArrayFormatter.lastline_line_end">&lt;code>ArrayFormatter.lastline_line_end()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.array_io.html#principia_materia.io_interface.array_io.format_array">&lt;code>format_array()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.array_io.html#principia_materia.io_interface.array_io.pad_array">&lt;code>pad_array()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.array_io.html#principia_materia.io_interface.array_io.parse_array">&lt;code>parse_array()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.array_io.html#principia_materia.io_interface.array_io.parse_expression">&lt;code>parse_expression()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.array_io.html#principia_materia.io_interface.array_io.parse_number">&lt;code>parse_number()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.array_io.html#principia_materia.io_interface.array_io.tex_array_formatter">&lt;code>tex_array_formatter()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html">principia_materia.io_interface.base_data_wrapper module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper">&lt;code>BaseDataWrapper&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.add_item">&lt;code>BaseDataWrapper.add_item()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.copy">&lt;code>BaseDataWrapper.copy()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.delete_item">&lt;code>BaseDataWrapper.delete_item()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.dump">&lt;code>BaseDataWrapper.dump()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.dumps">&lt;code>BaseDataWrapper.dumps()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.get_alias_map">&lt;code>BaseDataWrapper.get_alias_map()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.get_all_names_aliases">&lt;code>BaseDataWrapper.get_all_names_aliases()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.load">&lt;code>BaseDataWrapper.load()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.loads">&lt;code>BaseDataWrapper.loads()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.register_dtype">&lt;code>BaseDataWrapper.register_dtype()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.self_check">&lt;code>BaseDataWrapper.self_check()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper.verify_data">&lt;code>BaseDataWrapper.verify_data()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html">principia_materia.io_interface.compute_job module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob">&lt;code>ComputeJob&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.copy_files">&lt;code>ComputeJob.copy_files()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.create_job">&lt;code>ComputeJob.create_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.get_born_effective_charges">&lt;code>ComputeJob.get_born_effective_charges()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.get_cutoff">&lt;code>ComputeJob.get_cutoff()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.get_dielectric_tensor">&lt;code>ComputeJob.get_dielectric_tensor()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.get_energy">&lt;code>ComputeJob.get_energy()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.get_forces">&lt;code>ComputeJob.get_forces()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.get_kmesh">&lt;code>ComputeJob.get_kmesh()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.get_magnetic_moments">&lt;code>ComputeJob.get_magnetic_moments()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.get_natoms">&lt;code>ComputeJob.get_natoms()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.get_relaxation_displacement">&lt;code>ComputeJob.get_relaxation_displacement()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.get_stress">&lt;code>ComputeJob.get_stress()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.initialize_configuration">&lt;code>ComputeJob.initialize_configuration()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.is_job_finished">&lt;code>ComputeJob.is_job_finished&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.path">&lt;code>ComputeJob.path&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.rescale_kmesh">&lt;code>ComputeJob.rescale_kmesh()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.set_kmesh">&lt;code>ComputeJob.set_kmesh()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.set_output">&lt;code>ComputeJob.set_output()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob.structure">&lt;code>ComputeJob.structure&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html">principia_materia.io_interface.compute_job_series module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries">&lt;code>ComputeJobSeries&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.config_path">&lt;code>ComputeJobSeries.config_path&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.create_directory">&lt;code>ComputeJobSeries.create_directory()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.create_job">&lt;code>ComputeJobSeries.create_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.create_jobs">&lt;code>ComputeJobSeries.create_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.get_born_effective_charges_from_job">&lt;code>ComputeJobSeries.get_born_effective_charges_from_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.get_compute_job">&lt;code>ComputeJobSeries.get_compute_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.get_dielectric_tensor_from_job">&lt;code>ComputeJobSeries.get_dielectric_tensor_from_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.get_energy_from_job">&lt;code>ComputeJobSeries.get_energy_from_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.get_forces_from_job">&lt;code>ComputeJobSeries.get_forces_from_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.get_metadata_path">&lt;code>ComputeJobSeries.get_metadata_path()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.get_results_from_jobs">&lt;code>ComputeJobSeries.get_results_from_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.get_stress_from_job">&lt;code>ComputeJobSeries.get_stress_from_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.save_metadata">&lt;code>ComputeJobSeries.save_metadata()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.series_exists">&lt;code>ComputeJobSeries.series_exists&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.set_static_files">&lt;code>ComputeJobSeries.set_static_files()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries.structure">&lt;code>ComputeJobSeries.structure&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.data_wrapper.html">principia_materia.io_interface.data_wrapper module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.data_wrapper.html#principia_materia.io_interface.data_wrapper.DataWrapper">&lt;code>DataWrapper&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.data_wrapper.html#principia_materia.io_interface.data_wrapper.DataWrapper.dump">&lt;code>DataWrapper.dump()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.data_wrapper.html#principia_materia.io_interface.data_wrapper.DataWrapper.dumps">&lt;code>DataWrapper.dumps()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.data_wrapper.html#principia_materia.io_interface.data_wrapper.DataWrapper.load">&lt;code>DataWrapper.load()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.data_wrapper.html#principia_materia.io_interface.data_wrapper.DataWrapper.load_dict">&lt;code>DataWrapper.load_dict()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.data_wrapper.html#principia_materia.io_interface.data_wrapper.DataWrapper.load_generic">&lt;code>DataWrapper.load_generic()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.data_wrapper.html#principia_materia.io_interface.data_wrapper.DataWrapper.loads">&lt;code>DataWrapper.loads()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.hdf5_wrapper.html">principia_materia.io_interface.hdf5_wrapper module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.hdf5_wrapper.html#principia_materia.io_interface.hdf5_wrapper.HDF5Wrapper">&lt;code>HDF5Wrapper&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.hdf5_wrapper.html#principia_materia.io_interface.hdf5_wrapper.HDF5Wrapper.add_item">&lt;code>HDF5Wrapper.add_item()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.hdf5_wrapper.html#principia_materia.io_interface.hdf5_wrapper.HDF5Wrapper.dump">&lt;code>HDF5Wrapper.dump()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.hdf5_wrapper.html#principia_materia.io_interface.hdf5_wrapper.HDF5Wrapper.dump_h5file">&lt;code>HDF5Wrapper.dump_h5file()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.hdf5_wrapper.html#principia_materia.io_interface.hdf5_wrapper.HDF5Wrapper.dumps">&lt;code>HDF5Wrapper.dumps()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.hdf5_wrapper.html#principia_materia.io_interface.hdf5_wrapper.HDF5Wrapper.load">&lt;code>HDF5Wrapper.load()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.hdf5_wrapper.html#principia_materia.io_interface.hdf5_wrapper.HDF5Wrapper.load_h5file">&lt;code>HDF5Wrapper.load_h5file()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.hdf5_wrapper.html#principia_materia.io_interface.hdf5_wrapper.HDF5Wrapper.loads">&lt;code>HDF5Wrapper.loads()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html">principia_materia.io_interface.jobs_db module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB">&lt;code>JobsDB&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.add_filter">&lt;code>JobsDB.add_filter()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.create_job">&lt;code>JobsDB.create_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.create_jobs">&lt;code>JobsDB.create_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.get_born_effective_charges_from_job">&lt;code>JobsDB.get_born_effective_charges_from_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.get_dielectric_tensor_from_job">&lt;code>JobsDB.get_dielectric_tensor_from_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.get_energy_from_job">&lt;code>JobsDB.get_energy_from_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.get_forces_from_job">&lt;code>JobsDB.get_forces_from_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.get_metadata_path">&lt;code>JobsDB.get_metadata_path()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.get_results_from_jobs">&lt;code>JobsDB.get_results_from_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.get_stress_from_job">&lt;code>JobsDB.get_stress_from_job()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.remove_filter">&lt;code>JobsDB.remove_filter()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.reset_filters">&lt;code>JobsDB.reset_filters()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.save_metadata">&lt;code>JobsDB.save_metadata()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.save_table_info">&lt;code>JobsDB.save_table_info()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.set_table">&lt;code>JobsDB.set_table()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB.structure">&lt;code>JobsDB.structure&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.qpoints_io.html">principia_materia.io_interface.qpoints_io module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.qpoints_io.html#principia_materia.io_interface.qpoints_io.array_to_list">&lt;code>array_to_list()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.qpoints_io.html#principia_materia.io_interface.qpoints_io.array_to_tuple">&lt;code>array_to_tuple()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.vasp.html">principia_materia.io_interface.vasp module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.vasp.html#principia_materia.io_interface.vasp.parse_poscar">&lt;code>parse_poscar()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.vasp.html#principia_materia.io_interface.vasp.write_poscar">&lt;code>write_poscar()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.io_interface.yaml_dump.html">principia_materia.io_interface.yaml_dump module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="principia_materia.io_interface.yaml_dump.html#principia_materia.io_interface.yaml_dump.yaml_dumps">&lt;code>yaml_dumps()&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="module-contents">Module contents&lt;/h2>
&lt;h3 id="principia_materiaio_interfaceformat_tensortensor-prec8-cell_lengthnone-flatfalse-yaml_stylefalse-indicestrue-index_width5">principia_materia.io_interface.format_tensor(tensor, prec=8, cell_length=None, flat=False, yaml_style=False, indices=True, index_width=5)&lt;/h3>
&lt;p>Format a tensor into string&lt;/p>
&lt;p>Format float arrays from 1 or more dimensions into string, with several settings to control the format.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>tensor&lt;/strong> (array of floats) – The tensor to format.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prec&lt;/strong> (int, optional, default to 8) – The decimal points to round the floating point numbers to.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>cell_length&lt;/strong> (int, optional, default to None) – The width to align numbers in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>flat&lt;/strong> (bool, optional, default to False) – If True, print out every single tensor entry along side its index.
If True, flat &lt;code>yaml_style&lt;/code>, and &lt;code>indices&lt;/code> are ignored.
If False, if input tensor is a vector or matrix, print them out directly,
if input tensor has rank greater than 2, loop over all the axes except
the last 2, and print the last 2 axes out as a matrix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>yaml_style&lt;/strong> (bool, optional, default to False) – If True, print out tensor in YAML nested list format.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>indices&lt;/strong> (bool, optional, default to True) – If True, print out the indices of the matrix when rank of tensor is
greater than 2.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>index_width&lt;/strong> (int, optional, default to 5) – The width to align indices numbers in.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaio_interfaceget_compute_engine_map">principia_materia.io_interface.get_compute_engine_map()&lt;/h3>
&lt;p>Load First-Principle Interfaces.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>compute_engine_map&lt;/strong> – A dictionary containing the available first-principle interfaces in the form of
subclasses of ComputeJob.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>dict&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaio_interfaceindenttext-prefix---initial_indentnone">principia_materia.io_interface.indent(text, prefix=&amp;rsquo; &amp;lsquo;, initial_indent=None)&lt;/h3>
&lt;p>Indent text&lt;/p>
&lt;p>Create indentation for text, the function can also treat first line with special indentation.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>text&lt;/strong> (str) – Text to indent&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prefix&lt;/strong> (str or int, optional, default to &amp;quot; &amp;ldquo;) – The indentation, if type is str, prepend the prefix to each line,
if type is int, prepend the amount of spaces to each line.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>initial_indent&lt;/strong> (str, optional, default to None) – If not None, prepend the input string to the first line of text.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaio_interfacejobs_series_to_jobs_dbjobs_db-jobs_series-search_conditions-updatetrue">principia_materia.io_interface.jobs_series_to_jobs_db(jobs_db, jobs_series, search_conditions=[], update=True)&lt;/h3>
&lt;p>Read Jobs in from ComputeJobSeries and store them into database with JobsDB.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobs_db&lt;/strong> (&lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB">JobsDB&lt;/a>) – The interface of the database for storing the jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>jobs_series&lt;/strong> (&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries">ComputeJobSeries&lt;/a>) – The interface to the job series for reading the jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>search_conditions&lt;/strong> (list, optional) – Additional search conditions for filtering the jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>update&lt;/strong> (bool, optional) – If True, only read and store the jobs that haven’t been read in before.
If False, overwrite the data already in the database.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaio_interfacetuple_to_strtup-prec8-striptrue">principia_materia.io_interface.tuple_to_str(tup, prec=8, strip=True)&lt;/h3>
&lt;p>Format tuple into string.&lt;/p>
&lt;p>Recursively format tuples into string.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>tup&lt;/strong> (tuple) – Input tuple.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prec&lt;/strong> (int, optional, default to 8) – The decimal points to round the floating point numbers to.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>strip&lt;/strong> (bool, optional, default to True) – Whether to strip whitespaces from formatted numbers.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.io_interface.array_io</title><link>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.array_io.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.array_io.html</guid><description>
&lt;h1 id="principia_materiaio_interfacearray_io-module">principia_materia.io_interface.array_io module&lt;/h1>
&lt;h3 id="_class_-principia_materiaio_interfacearray_ioarrayformatterprec8-fmtnone-alignl-cell_length1-delimiter--pad0-newlinen-header-footer-line_begin-line_end-indent0">&lt;em>class&lt;/em> principia_materia.io_interface.array_io.ArrayFormatter(prec=8, fmt=None, align=&amp;lsquo;l&amp;rsquo;, cell_length=1, delimiter=&amp;rsquo; &amp;lsquo;, pad=0, newline=&amp;rsquo;\n&amp;rsquo;, header=&amp;rsquo;&amp;rsquo;, footer=&amp;rsquo;&amp;rsquo;, line_begin=&amp;rsquo;&amp;rsquo;, line_end=&amp;rsquo;&amp;rsquo;, indent=0)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>Format 2D array.&lt;/p>
&lt;p>Object oriented class for formatting arrays.
The mechanism is to setup the desired style of the formatter, with which
one can format arrays, just like any formatter function.
Some default styles will be provided below, for convenience.&lt;/p>
&lt;p>This class implements all the basic features of a formatter, so that any
new styles can be achieved with minimum work by simply providing style
specifications.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>prec&lt;/strong> (int, optional, default to 8) – Decimal points to keep for floating points.
Can be directly set in fmt.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>fmt&lt;/strong> (str, optional, default to None) – The string format for each array element.
Default dynamically using prec, align, cell_length and the cell
data type to determine the decimal points.
Once the format is set to not None, it will be used for the cell format,
align and cell_length will be ignored.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>align&lt;/strong> (str, optional, default to &amp;ldquo;l&amp;rdquo;, choices(&amp;ldquo;l&amp;rdquo;, &amp;ldquo;r&amp;rdquo;, &amp;ldquo;c&amp;rdquo;)) – The alignment of the cell, can choose between left, right and centered.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>cell_length&lt;/strong> (int, optional, default to 0) – The length of the cell, this is used to align the cell, if the provided
cell_length is too short, it will be ignored.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>delimiter&lt;/strong> (str, optional, default to &amp;quot; &amp;ldquo;) – The separator of each array element in the same row.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pad&lt;/strong> (int or str, optional, default to 0) – (Takes in int for number of spaces, or str for more customized padding)
The amount of space between element, this will pad between array
elements and line_begin/line_end, as well as after delimiter
and the next array element. If padding in either place is needed,
add the padding to delimeter or line_begin/line_end.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>newline&lt;/strong> (str, optional, default to &amp;ldquo;\n&amp;rdquo;) – The separator between each row.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>header&lt;/strong> (str, optional, default empty) – String that will appear immediately in front of the array.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>footer&lt;/strong> (str, optional, default empty) – String that will appear immediately after the array.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>line_begin&lt;/strong> (str, optional, default empty) – String that will appear immediately in front of each row of the array.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>line_end&lt;/strong> (str, optional, default empty) – String that will appear immediately after each row of the array.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>indent&lt;/strong> (int or str, optional, default to 0) – (Takes in int for number of spaces, or str for more customized indent)
Overall indent of the array, does not affect header and footer.
For indent on the entire string, use textwrap.indent.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">format_array_nparray&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ArrayFormatter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000">prec&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000">delimiter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;, &amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000">line_begin&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ArrayFormatter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">firstline_line_begin&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">line_begin&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34; [&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">first_line_begin&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;array([[&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000">line_end&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">ArrayFormatter&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">lastline_line_end&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">line_end&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;],&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">last_line_end&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;]])&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">format_array_nparray&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">identity&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.00000000&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">formatter&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tex_array_formatter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">texenv&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;bmatrix&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">formatter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">identity&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>\&lt;span style="color:#000">begin&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">bmatrix&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1.00000000&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span> \\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.00000000&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span> \\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.00000000&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1.00000000&lt;/span> \\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>\&lt;span style="color:#000">end&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">bmatrix&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_static_-firstline_line_beginline_begin-first_line_begin">&lt;em>static&lt;/em> firstline_line_begin(line_begin, first_line_begin)&lt;/h4>
&lt;h4 id="format_arrayarr-precnone-cell_lengthnone-extent_dimentionfalse">format_array(arr, prec=None, cell_length=None, extent_dimention=False)&lt;/h4>
&lt;h4 id="_static_-lastline_line_endline_end-last_line_end">&lt;em>static&lt;/em> lastline_line_end(line_end, last_line_end)&lt;/h4>
&lt;h3 id="principia_materiaio_interfacearray_ioformat_arraydata-prec8-fmtnone-alignl-cell_length0-delimiter--pad0-newlinen-header-footer-line_begin-line_end-indent0-extent_dimentionfalse">principia_materia.io_interface.array_io.format_array(data, prec=8, fmt=None, align=&amp;lsquo;l&amp;rsquo;, cell_length=0, delimiter=&amp;rsquo; &amp;lsquo;, pad=0, newline=&amp;rsquo;\n&amp;rsquo;, header=&amp;rsquo;&amp;rsquo;, footer=&amp;rsquo;&amp;rsquo;, line_begin=&amp;rsquo;&amp;rsquo;, line_end=&amp;rsquo;&amp;rsquo;, indent=0, extent_dimention=False)&lt;/h3>
&lt;p>A wrapper funtion for ArrayFormatter&lt;/p>
&lt;p>The same feature but in a function call instead. This is suitable for one time use case.&lt;/p>
&lt;h3 id="principia_materiaio_interfacearray_iopad_arrayarr-shape-dtypeclass-float-fillvalue0-allow_truncatefalse">principia_materia.io_interface.array_io.pad_array(arr, shape, dtype=&amp;lt;class &amp;lsquo;float&amp;rsquo;&amp;gt;, fillvalue=0, allow_truncate=False)&lt;/h3>
&lt;p>Pad array to a given shape with given fillvalue.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>arr&lt;/strong> (nested list of Number.) – Array to be padded.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dtype&lt;/strong> (any Number type, optional, default to float) – Type for the array element to be converted into.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>shape&lt;/strong> (tuple of integers, optional, default to None) – The shape of array to be padded into.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>fillvalue&lt;/strong> (any Number type, optional, default to 0) – Fill values for padding.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_truncate&lt;/strong> (bool, optional, default to False) – Whether allow truncation of array when padding into given
shape, if allowed, any array element outside the padding
target shape will be discarded.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>array&lt;/strong> – The padded array.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>numpy.ndarray of &lt;code>dtype&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaio_interfacearray_ioparse_arrayarr-dtypeclass-float-max_denominatornone-pad_to_shapenone-fillvalue0-allow_truncatefalse-to_listfalse">principia_materia.io_interface.array_io.parse_array(arr, dtype=&amp;lt;class &amp;lsquo;float&amp;rsquo;&amp;gt;, max_denominator=None, pad_to_shape=None, fillvalue=0, allow_truncate=False, to_list=False)&lt;/h3>
&lt;p>Parse array from a compatible format and pad to dimension with given fill value.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>arr&lt;/strong> (parser compatible format (described below)) – Array to be parsed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dtype&lt;/strong> (any Number type, optional, default to float) – Type for the array element to be converted into.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>max_denominator&lt;/strong> (integer, optional, default to None) – If dtype is Fraction, the maximum denominator.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pad_to_shape&lt;/strong> (tuple of integers, optional, default to None) – The shape of array to be padded into.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>fillvalue&lt;/strong> (any Number type, optional, default to 0) – Fill values for padding.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_truncate&lt;/strong> (bool, optional, default to False) – Whether allow truncation of array when padding into given
shape, if allowed, any array element outside the padding
target shape will be discarded.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>array&lt;/strong> (nested list of &lt;code>dtype&lt;/code> or numpy.ndarray of &lt;code>dtype&lt;/code>) – (if pad_to_shape is not None)&lt;/li>
&lt;/ul>
&lt;p>returns numpy.ndarray of &lt;code>dtype&lt;/code> as the parsed and padded array.&lt;/p>
&lt;p>(if pad_to_shape is None)&lt;/p>
&lt;p>returns nested list of of &lt;code>dtype&lt;/code> as the parsed array.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>Parser Compatible Format&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>————————&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>This format can be a numpy array of Number (integer, float, Fraction, any format&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>that shares the abstract base class of Number), nested list of Number or a string&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>with numbers (string format of Number or Fraction) that are separated by any one&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>or more of space, comma, semicolon or newline.&lt;/em>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="examples-1">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">parse_array&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;0 0; 1 2&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">max_denominator&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">pad_to_shape&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">array&lt;/span>&lt;span style="color:#000;font-weight:bold">([[&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)]],&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="principia_materiaio_interfacearray_ioparse_expressionexpression-dtypeclass-float-max_denominatornone">principia_materia.io_interface.array_io.parse_expression(expression, dtype=&amp;lt;class &amp;lsquo;float&amp;rsquo;&amp;gt;, max_denominator=None)&lt;/h3>
&lt;p>Parse an arithmetic expression in string and calculation the resulting number.&lt;/p>
&lt;p>Basic arithmetic operations of +, -,&lt;/p>
&lt;pre tabindex="0">&lt;code>*
&lt;/code>&lt;/pre>&lt;p>, / can be parsed and calculated in the
correct order of precedence.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>expression&lt;/strong> (str) – Expression to be parsed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dtype&lt;/strong> (any Number type, optional, default to float) – Type for the number to be converted into.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>max_denominator&lt;/strong> (integer, optional, default to None) – If dtype is Fraction, the maximum denominator.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>num&lt;/strong> – Parsed number in type of &lt;code>dtype&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>&lt;code>dtype&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="examples-2">Examples&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">parse_number_from_string&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;-r4.0e+4/100&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">max_denominator&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">parse_expression&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;-2.1*r2E-5/r3E-4&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">dtype&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">float&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2.1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sqrt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2E-5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">np&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sqrt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3E-4&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.5422176684690384&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.5422176684690384&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="principia_materiaio_interfacearray_ioparse_numbernum-dtypeclass-float-max_denominatornone">principia_materia.io_interface.array_io.parse_number(num, dtype=&amp;lt;class &amp;lsquo;float&amp;rsquo;&amp;gt;, max_denominator=None)&lt;/h3>
&lt;p>Parse number from compatible format.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>num&lt;/strong> (any type/format compatible with Number or &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>) – Number to be parsed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dtype&lt;/strong> (any Number type, optional, default to float) – Type for the number to be converted into.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>max_denominator&lt;/strong> (integer, optional, default to None) – If dtype is Fraction, the maximum denominator.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>num&lt;/strong> – Parsed number in type of &lt;code>dtype&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>&lt;code>dtype&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaio_interfacearray_iotex_array_formattertexenvbmatrix">principia_materia.io_interface.array_io.tex_array_formatter(texenv=&amp;lsquo;bmatrix&amp;rsquo;)&lt;/h3>
&lt;p>Format array into a TeX matrix.&lt;/p></description></item><item><title>Docs: Module principia_materia.io_interface.base_data_wrapper</title><link>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.base_data_wrapper.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.base_data_wrapper.html</guid><description>
&lt;h1 id="principia_materiaio_interfacebase_data_wrapper-module">principia_materia.io_interface.base_data_wrapper module&lt;/h1>
&lt;h3 id="_class_-principia_materiaio_interfacebase_data_wrapperbasedatawrappertitlenone">&lt;em>class&lt;/em> principia_materia.io_interface.base_data_wrapper.BaseDataWrapper(title=None)&lt;/h3>
&lt;p>Bases: &lt;code>ABC&lt;/code>&lt;/p>
&lt;p>A container stores how to process the dumping/loading of a collection of data&lt;/p>
&lt;p>An object oriented wrapper to load and dump data in a certain format.&lt;/p>
&lt;p>It’s also designed multiple wrappers can be added up to form a wrapper that handles all
the data contained in every one of the sub-wrappers.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>title&lt;/strong> (str, default to None) – A comment description for the file.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="add_itemkey-choicesnone-dtypenone-load_dtypenone-save_dtypenone-optionalfalse-helpnone-aliasnone-dependsnone">add_item(key, choices=None, dtype=None, load_dtype=None, save_dtype=None, optional=False, help=None, alias=None, depends=None)&lt;/h4>
&lt;p>Add an item of data to the container.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>key&lt;/strong> (str) – The name of the item to be save in the data file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dtype&lt;/strong> (str, default to None) – Data type of the item. The corresponding save/load functions will be used to save/load the item.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>load_dtype&lt;/strong> (str or callable, default to None) – The function to load the item.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>save_dtype&lt;/strong> (str or callable, default to None) – The function to save the item.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>optional&lt;/strong> (bool, default to False) – Whether the item is optional.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>help&lt;/strong> (str, default to None) – The description of the item.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>alias&lt;/strong> (list of str, default to None) – A list aliases of the item keyword.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>depends&lt;/strong> (list of str, default to None) – The keywords that are required when the item is present.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="copy">copy()&lt;/h4>
&lt;h4 id="delete_itemkey-allow_missingfalse">delete_item(key, allow_missing=False)&lt;/h4>
&lt;p>Delete an item of the data from the container.&lt;/p>
&lt;h4 id="_abstract_-dumpdata-filename-allow_missingfalse-overwritefalse">&lt;em>abstract&lt;/em> dump(data, filename, allow_missing=False, overwrite=False)&lt;/h4>
&lt;p>Dump the data into a data file&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>data&lt;/strong> (dict) – The dictionary containing data to be saved.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>filename&lt;/strong> (str) – The name of the file to save the data into,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>overwrite&lt;/strong> (bool, optional, default to False) – When the file exists, whether to replace the content of the file
with the content to be saved.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="dumpsdata-allow_missingfalse">dumps(data, allow_missing=False)&lt;/h4>
&lt;p>Dump the data into string&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>data&lt;/strong> (dict) – The dictionary containing data to be saved.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_alias_map">get_alias_map()&lt;/h4>
&lt;h4 id="get_all_names_aliases">get_all_names_aliases()&lt;/h4>
&lt;h4 id="_abstract_-loadfilename-allow_missingfalse-allow_unknownfalse-load_unknownfalse">&lt;em>abstract&lt;/em> load(filename, allow_missing=False, allow_unknown=False, load_unknown=False)&lt;/h4>
&lt;p>Load the data from a data file&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>filename&lt;/strong> (str) – The name of the file to save the data into,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_unknown&lt;/strong> (bool, optional, default to False) – Whether to allow keys not declared in the container. Though even if
allowed, those keys will not be loaded if load_unknown == False.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>load_unknown&lt;/strong> (bool, optional, default to False) – Whether to load keys not declared in the container to be loaded in raw.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="loadstext-allow_missingfalse-allow_unknownfalse-load_unknownfalse">loads(text, allow_missing=False, allow_unknown=False, load_unknown=False)&lt;/h4>
&lt;p>Load the data from a string&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>text&lt;/strong> (str) – Data in text format,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_unknown&lt;/strong> (bool, optional, default to False) – Whether to allow keys not declared in the container. Though even if
allowed, those keys will not be loaded if load_unknown == False.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>load_unknown&lt;/strong> (bool, optional, default to False) – Whether to load keys not declared in the container to be loaded in raw.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="register_dtypename-load_dtype-save_dtype">register_dtype(name, load_dtype, save_dtype)&lt;/h4>
&lt;p>Add an load and save dtype to the container&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>name&lt;/strong> (str) – The name of the dtype.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>load_dtype&lt;/strong> (callable) – A callable to perform the load dtype.
It’ll process the data and return its final form
after loaded from data file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>save_dtype&lt;/strong> (callable) – A callable to perform the save dtype.
It’ll process the data and return the value to be
dumped to the data file.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="self_checktry_fixtrue">self_check(try_fix=True)&lt;/h4>
&lt;h4 id="verify_datadata">verify_data(data)&lt;/h4></description></item><item><title>Docs: Module principia_materia.io_interface.compute_job</title><link>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.compute_job.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.compute_job.html</guid><description>
&lt;h1 id="principia_materiaio_interfacecompute_job-module">principia_materia.io_interface.compute_job module&lt;/h1>
&lt;h3 id="_class_-principia_materiaio_interfacecompute_jobcomputejobpath-structurenone-jobinputnone-joboutputnone">&lt;em>class&lt;/em> principia_materia.io_interface.compute_job.ComputeJob(path, structure=None, jobinput=None, joboutput=None)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>A computation job.&lt;/p>
&lt;p>An abstract class that provides a framework to write interfaces to various compute engines
to work with this package.&lt;/p>
&lt;p>This class holds 1 compute job. It is capable of processing configurations, creating a compute
job, parsing certain output of the compute job, and more. Due to the large size of common
computation runs, the outputs of the compute job are parse only when they are needed.&lt;/p>
&lt;h4 id="copy_filesfilenames-outnone">copy_files(filenames, out=None)&lt;/h4>
&lt;p>Copy static files from config directory to the job directory.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>out&lt;/strong> (str, optional, default to None) – The directory to create the compute job in.
If &lt;code>out&lt;/code> is None, use &lt;code>self.path&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>filenames&lt;/strong> (str) – The filenames or the patterns of the filenames of the files to copy.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="create_joboutnone-is_statictrue-displacementnone-velocitiesnone">create_job(out=None, is_static=True, displacement=None, velocities=None)&lt;/h4>
&lt;p>Create configuration files needed to run a compute job.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>out&lt;/strong> (str, optional, default to None) – The directory to create the compute job in.
If &lt;code>out&lt;/code> is None, use &lt;code>self.path&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>is_static&lt;/strong> (bool, optional, default to True) – Whether the compute job is a static calculation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>displacement&lt;/strong> (array of float, optional, default to None) – The displacement to the crystal.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>velocities&lt;/strong> (array of float, optional, default to None) – The initial velocities of the atoms of the crystal.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_born_effective_charges">get_born_effective_charges()&lt;/h4>
&lt;p>Get Born effective charges from compute result.&lt;/p>
&lt;h4 id="_abstract_-get_cutoff">&lt;em>abstract&lt;/em> get_cutoff()&lt;/h4>
&lt;h4 id="get_dielectric_tensor">get_dielectric_tensor()&lt;/h4>
&lt;p>Get dielectric tensor from compute result.&lt;/p>
&lt;h4 id="get_energy">get_energy()&lt;/h4>
&lt;p>Get energy from compute result.&lt;/p>
&lt;h4 id="get_forces">get_forces()&lt;/h4>
&lt;p>Get forces from compute result.&lt;/p>
&lt;h4 id="get_kmesh">get_kmesh()&lt;/h4>
&lt;h4 id="get_magnetic_moments">get_magnetic_moments()&lt;/h4>
&lt;p>Get magnetic moments from compute result.&lt;/p>
&lt;h4 id="get_natoms">get_natoms()&lt;/h4>
&lt;p>Get number of atoms from compute result.&lt;/p>
&lt;h4 id="get_relaxation_displacement">get_relaxation_displacement()&lt;/h4>
&lt;p>Get relaxation displacement from compute result.&lt;/p>
&lt;h4 id="get_stress">get_stress()&lt;/h4>
&lt;p>Get stress from compute result.&lt;/p>
&lt;h4 id="initialize_configurationconfig_pathnone">initialize_configuration(config_path=None)&lt;/h4>
&lt;p>Initialize configurations of the compute jobs.&lt;/p>
&lt;p>Configurations of a compute jobs includes cutoff energy, kpoint mesh,
error tolorence, magnetic moments, etc.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>config_path&lt;/strong> (str, path to directory) – The directory where configuration of compute job is stored.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_abstract-property_-is_job_finished">&lt;em>abstract property&lt;/em> is_job_finished()&lt;/h4>
&lt;h4 id="_property_-path">&lt;em>property&lt;/em> path()&lt;/h4>
&lt;h4 id="rescale_kmesh">rescale_kmesh()&lt;/h4>
&lt;p>Rescale kmesh according to supercell.&lt;/p>
&lt;h4 id="set_kmeshkmesh">set_kmesh(kmesh)&lt;/h4>
&lt;h4 id="_abstract_-set_outputoutput">&lt;em>abstract&lt;/em> set_output(output)&lt;/h4>
&lt;p>Set the path to the output file of a computation job.&lt;/p>
&lt;h4 id="_property_-structure">&lt;em>property&lt;/em> structure()&lt;/h4></description></item><item><title>Docs: Module principia_materia.io_interface.compute_job_series</title><link>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.compute_job_series.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.compute_job_series.html</guid><description>
&lt;h1 id="principia_materiaio_interfacecompute_job_series-module">principia_materia.io_interface.compute_job_series module&lt;/h1>
&lt;h3 id="_class_-principia_materiaio_interfacecompute_job_seriescomputejobseriesstructure-root_directory-compute_engine-config_pathnone-jobinputnone-joboutputnone">&lt;em>class&lt;/em> principia_materia.io_interface.compute_job_series.ComputeJobSeries(structure, root_directory, compute_engine, config_path=None, jobinput=None, joboutput=None)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>Manage a series of jobs&lt;/p>
&lt;p>Since many part of this package (for example, phonon irreducible derivatives computaiton),
usually needs to create and read a series of calculations.&lt;/p>
&lt;p>The series of jobs are assumed to have a hierarchical directory structure, that every
job is in its own directory with the job name as the directory name.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>structure&lt;/strong> (&lt;a href="principia_materia.translation_group.crystal.html#principia_materia.translation_group.crystal.Crystal">Crystal&lt;/a> or CrystalFTG object) – The primitive crystal structure. Input input is a CrystalFTG object,
the primitive cell will be used.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>root_directory&lt;/strong> (str) – The root directory that hosts all the jobs of the series.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>compute_engine&lt;/strong> (str, or a subclass of &lt;a href="principia_materia.io_interface.compute_job.html#principia_materia.io_interface.compute_job.ComputeJob">principia_materia.io_interface.compute_job.ComputeJob&lt;/a>) – The compute engine, for example “vasp” or VASPJob is referring to VASP DFT engine.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>config_path&lt;/strong> (str, optional, default to None) – The path of the configuration file, it is used to create the series of jobs as a
template.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-config_path">&lt;em>property&lt;/em> config_path()&lt;/h4>
&lt;h4 id="create_directorydirname-existsfalse">create_directory(dirname, exists=False)&lt;/h4>
&lt;p>Create directory inside root directory of the job series.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>dirname&lt;/strong> (str) – Directory name to create.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="create_jobjobname-supa-prefixnone-displacementnone-strainnone-velocitiesnone-appendfalse-dry_runfalse">create_job(jobname, supa, prefix=None, displacement=None, strain=None, velocities=None, append=False, dry_run=False)&lt;/h4>
&lt;p>Create a job at the given jobname (jobname will be the directory name).&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>supa&lt;/strong> (array of int, shape(dim, dim)) – The supercell matrix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prefix&lt;/strong> (str, optional, default to None) – The prefixing directory of the job relative to the root directory of the job series.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>displacement&lt;/strong> (array of float, optional, default to None) – The displacement to the crystal.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>strain&lt;/strong> (array of float, shape(dim, dim), optional, default to None) – The strain matrix of the structure.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>velocities&lt;/strong> (array of float, optional, default to None) – The initial velocities of the atoms of the crystal.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>append&lt;/strong> (bool, optional, default to False) – If True, skip existing jobs. Otherwise, throw an error.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dry_run&lt;/strong> (bool, optional, default to False) – If True, don’t actually create the job.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="create_jobsjobnames-supa-prefixnone-displacementsnone-strainnone-velocitiesnone-appendfalse-job_index_namenone-dry_runfalse">create_jobs(jobnames, supa, prefix=None, displacements=None, strain=None, velocities=None, append=False, job_index_name=None, dry_run=False)&lt;/h4>
&lt;p>Create a series of jobs.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobnames&lt;/strong> (list of str) – The names of the jobs, as well as the directory name to create the jobs in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>supa&lt;/strong> (array of int, shape(dim, dim)) – The supercell matrix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prefix&lt;/strong> (str, optional, default to None) – The prefixing directory of the jobs relative to the root directory of the job series.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>displacements&lt;/strong> (array of float, optional, default to None) – The displacements to the crystal for the jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>strain&lt;/strong> (array of float, shape(dim, dim), optional, default to None) – The strain matrix of the structure.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>velocities&lt;/strong> (array of float, optional, default to None) – The initial velocities of the atoms of the crystal for the jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>append&lt;/strong> (bool, optional, default to False) – If True, skip existing jobs. Otherwise, throw an error.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dry_run&lt;/strong> (bool, optional, default to False) – If True, don’t actually create the job.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_born_effective_charges_from_jobjobname-prefixnone">get_born_effective_charges_from_job(jobname, prefix=None)&lt;/h4>
&lt;p>Parse Born effective charges from the job.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_compute_jobjobname-prefixnone">get_compute_job(jobname, prefix=None)&lt;/h4>
&lt;p>Get the job from the given jobname (jobname would be the directory name).&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_dielectric_tensor_from_jobjobname-prefixnone">get_dielectric_tensor_from_job(jobname, prefix=None)&lt;/h4>
&lt;p>Parse the dielectric tensor from the job.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_energy_from_jobjobname-prefixnone">get_energy_from_job(jobname, prefix=None)&lt;/h4>
&lt;p>Parse the energy from the job.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_forces_from_jobjobname-prefixnone">get_forces_from_job(jobname, prefix=None)&lt;/h4>
&lt;p>Parse forces from the job.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_metadata_pathfilename">get_metadata_path(filename)&lt;/h4>
&lt;p>Get the path to save the metadata file in.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>filename&lt;/strong> (str) – The base name of metadata file.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_results_from_jobsjobnames-data_type-prefixnone">get_results_from_jobs(jobnames, data_type, prefix=None)&lt;/h4>
&lt;p>Get results from a series of jobs.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobnames&lt;/strong> (list of str) – The names of the jobs, as well as the directory name to create the jobs in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>data_type&lt;/strong> (str) – The type of results to retrieve, can be “forces”, “energy”, “stress”, “born_effective_charges”
or “dielectric_tensor”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prefix&lt;/strong> (str, optional, default to None) – The prefixing directory of the jobs relative to the root directory of the job series.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>data&lt;/strong> – The retrieved results from jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of float&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_stress_from_jobjobname-prefixnone">get_stress_from_job(jobname, prefix=None)&lt;/h4>
&lt;p>Parse the stress from the job.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="save_metadatafilename-metadata-dry_runfalse">save_metadata(filename, metadata, dry_run=False)&lt;/h4>
&lt;p>Save metadata into a file in the root directory of job series.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>filename&lt;/strong> (str) – The base name of metadata file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>metadata&lt;/strong> (str) – The metadata to save in plain text.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dry_run&lt;/strong> (bool, optional, default to False) – If True, don’t actually create the metadata file.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-series_exists">&lt;em>property&lt;/em> series_exists()&lt;/h4>
&lt;p>Whether if the root directory exists.&lt;/p>
&lt;h4 id="set_static_filesfilenames-abspathfalse">set_static_files(filenames, abspath=False)&lt;/h4>
&lt;p>Set a list of static files to copy into the job directory.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>filenames&lt;/strong> (str of list of str) – The path names of the files to copy.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>abspath&lt;/strong> (bool, optional, default to False) – Whether the input filenames are absolute path.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-structure">&lt;em>property&lt;/em> structure()&lt;/h4></description></item><item><title>Docs: Module principia_materia.io_interface.data_wrapper</title><link>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.data_wrapper.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.data_wrapper.html</guid><description>
&lt;h1 id="principia_materiaio_interfacedata_wrapper-module">principia_materia.io_interface.data_wrapper module&lt;/h1>
&lt;h3 id="_class_-principia_materiaio_interfacedata_wrapperdatawrappertitlenone-prefixnone">&lt;em>class&lt;/em> principia_materia.io_interface.data_wrapper.DataWrapper(title=None, prefix=None)&lt;/h3>
&lt;p>Bases: &lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper">&lt;code>BaseDataWrapper&lt;/code>&lt;/a>&lt;/p>
&lt;p>A container for the format of a collection of data.&lt;/p>
&lt;p>An object oriented wrapper to enforce input text-based data format.
It’s also designed so that multiple wrappers can be added up to form a wrapper
that handles all the data contained in every one of the sub-wrappers.&lt;/p>
&lt;p>YAML is used as the format to read and write from file.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>title&lt;/strong> (str, default to None) – A comment description for the file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prefix&lt;/strong> (str, default to None) – Prefix for the keywords when flattening the nested DataWrapper.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="dumpdata-filename-allow_missingfalse-overwritefalse">dump(data, filename, allow_missing=False, overwrite=False)&lt;/h4>
&lt;p>Format the data into a YAML file&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>data&lt;/strong> (dict) – The dictionary containing data to be saved.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>filename&lt;/strong> (str) – The name of the file to save the data into,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>overwrite&lt;/strong> (bool, optional, default to False) – When the file exists, whether to replace the content of the file
with the content to be saved.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="dumpsdata-allow_missingfalse">dumps(data, allow_missing=False)&lt;/h4>
&lt;p>Format the data into YAML parsable string&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>data&lt;/strong> (dict) – The dictionary containing data to be saved.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="loadfilename-allow_missingfalse-allow_unknownfalse-load_unknownfalse">load(filename, allow_missing=False, allow_unknown=False, load_unknown=False)&lt;/h4>
&lt;p>Load the data from a YAML file&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>filename&lt;/strong> (str) – The name of the file to save the data into,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_unknown&lt;/strong> (bool, optional, default to False) – Whether to allow keys not declared in the container. Though even if
allowed, those keys will not be loaded if load_unknown == False.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>load_unknown&lt;/strong> (bool, optional, default to False) – Whether to load keys not declared in the container to be loaded in raw.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="load_dictdata-allow_missingfalse-allow_unknownfalse-load_unknownfalse">load_dict(data, allow_missing=False, allow_unknown=False, load_unknown=False)&lt;/h4>
&lt;p>Load the data from a dict&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>text&lt;/strong> (str) – A YAML string to load.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_unknown&lt;/strong> (bool, optional, default to False) – Whether to allow keys not declared in the container. Though even if
allowed, those keys will not be loaded if load_unknown == False.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>load_unknown&lt;/strong> (bool, optional, default to False) – Whether to load keys not declared in the container to be loaded in raw.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="load_genericdata-allow_missingfalse-allow_unknownfalse-load_unknownfalse">load_generic(data, allow_missing=False, allow_unknown=False, load_unknown=False)&lt;/h4>
&lt;h4 id="loadstext-allow_missingfalse-allow_unknownfalse-load_unknownfalse">loads(text, allow_missing=False, allow_unknown=False, load_unknown=False)&lt;/h4>
&lt;p>Load the data from a YAML string&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>text&lt;/strong> (str) – A YAML string to load.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_unknown&lt;/strong> (bool, optional, default to False) – Whether to allow keys not declared in the container. Though even if
allowed, those keys will not be loaded if load_unknown == False.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>load_unknown&lt;/strong> (bool, optional, default to False) – Whether to load keys not declared in the container to be loaded in raw.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.io_interface.hdf5_wrapper</title><link>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.hdf5_wrapper.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.hdf5_wrapper.html</guid><description>
&lt;h1 id="principia_materiaio_interfacehdf5_wrapper-module">principia_materia.io_interface.hdf5_wrapper module&lt;/h1>
&lt;h3 id="_class_-principia_materiaio_interfacehdf5_wrapperhdf5wrappertitlenone">&lt;em>class&lt;/em> principia_materia.io_interface.hdf5_wrapper.HDF5Wrapper(title=None)&lt;/h3>
&lt;p>Bases: &lt;a href="principia_materia.io_interface.base_data_wrapper.html#principia_materia.io_interface.base_data_wrapper.BaseDataWrapper">&lt;code>BaseDataWrapper&lt;/code>&lt;/a>&lt;/p>
&lt;p>Save/load data in/from HDF5 file.&lt;/p>
&lt;p>A object oriented wrapper to save and load data in and from HDF5 files.
This allows us to easily save some custom defined data types into HDF5
supported types.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>title&lt;/strong> (str, default to None) – A comment description for the file.
The title is not used when saving/loading HDF5 files.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="add_itemkey-choicesnone-dtypenone-load_dtypenone-save_dtypenone-optionalfalse">add_item(key, choices=None, dtype=None, load_dtype=None, save_dtype=None, optional=False)&lt;/h4>
&lt;p>Add an item of data to the container.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>key&lt;/strong> (str) – The name of the item to be save in the data file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dtype&lt;/strong> (str, default to None) – Data type of the item. The corresponding save/load functions will be used to save/load the item.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>load_dtype&lt;/strong> (str or callable, default to None) – The function to load the item.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>save_dtype&lt;/strong> (str or callable, default to None) – The function to save the item.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>optional&lt;/strong> (bool, default to False) – Whether the item is optional.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>help&lt;/strong> (str, default to None) – The description of the item.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>alias&lt;/strong> (list of str, default to None) – A list aliases of the item keyword.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>depends&lt;/strong> (list of str, default to None) – The keywords that are required when the item is present.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="dumpdata-filename-allow_missingfalse-overwritefalse">dump(data, filename, allow_missing=False, overwrite=False)&lt;/h4>
&lt;p>Save data into HDF5 file.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>data&lt;/strong> (dict) – The dictionary containing data to be saved.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>filename&lt;/strong> (str) – The name of the file to save the data into,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>overwrite&lt;/strong> (bool, optional, default to False) – When the file exists, whether to replace the content of the file
with the content to be saved.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="dump_h5filedata-h5file-allow_missingfalse">dump_h5file(data, h5file, allow_missing=False)&lt;/h4>
&lt;p>Save data into HDF5 through a h5py.File/h5py.Group object.&lt;/p>
&lt;p>This allows us to save data into a HDF5 group within a HDF5 file.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>data&lt;/strong> (dict) – The dictionary containing data to be saved.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>h5file&lt;/strong> (h5py.File/h5py.Group object) – The h5py.File/h5py.Group object to save the data into.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="dumpsdata-allow_missingfalse">dumps(data, allow_missing=False)&lt;/h4>
&lt;p>Dump the data into string&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>data&lt;/strong> (dict) – The dictionary containing data to be saved.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="loadfilename-allow_missingfalse">load(filename, allow_missing=False)&lt;/h4>
&lt;p>Load data from HDF5 file&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>filename&lt;/strong> (str) – The name of the file to save the data into,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="load_h5fileh5file-allow_missingfalse">load_h5file(h5file, allow_missing=False)&lt;/h4>
&lt;p>Load data from HDF5 through a h5py.File/h5py.Group object.&lt;/p>
&lt;p>This allows us to load data from a HDF5 group within a HDF5 file.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>h5file&lt;/strong> (h5py.File/h5py.Group object) – The h5py.File/h5py.Group object to save the data into.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="loadstext-allow_missingfalse-allow_unknownfalse-load_unknownfalse">loads(text, allow_missing=False, allow_unknown=False, load_unknown=False)&lt;/h4>
&lt;p>Load the data from a string&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>text&lt;/strong> (str) – Data in text format,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_missing&lt;/strong> (bool, optional, default to False) – Whether to allow a declared key not to exists in the data dictionary.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allow_unknown&lt;/strong> (bool, optional, default to False) – Whether to allow keys not declared in the container. Though even if
allowed, those keys will not be loaded if load_unknown == False.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>load_unknown&lt;/strong> (bool, optional, default to False) – Whether to load keys not declared in the container to be loaded in raw.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.io_interface.jobs_db</title><link>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.jobs_db.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.jobs_db.html</guid><description>
&lt;h1 id="principia_materiaio_interfacejobs_db-module">principia_materia.io_interface.jobs_db module&lt;/h1>
&lt;h3 id="_class_-principia_materiaio_interfacejobs_dbjobsdbroot_directory-db_path-db_type-structure-tablenone">&lt;em>class&lt;/em> principia_materia.io_interface.jobs_db.JobsDB(root_directory, db_path, db_type, structure, table=None)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>Interface jobs with database.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>root_directory&lt;/strong> (str) – The root directory that hosts all the jobs of the series.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>db_path&lt;/strong> (str) – Path to database.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>db_type&lt;/strong> (str) – Type of the database, for example “sqlite”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>structure&lt;/strong> (&lt;a href="principia_materia.translation_group.crystal.html#principia_materia.translation_group.crystal.Crystal">Crystal&lt;/a> or CrystalFTG object) – The primitive crystal structure. Input input is a CrystalFTG object,
the primitive cell will be used.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="add_filterkey-value">add_filter(key, value)&lt;/h4>
&lt;p>Add a filtering condition for database action (query/update/insert).&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>key&lt;/strong> (str) – The name of the column.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>value&lt;/strong> (str/int/float/array) – The filtering value of that column.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="create_jobjobname-supa-prefixnone-displacementnone-strainnone-velocitiesnone-appendfalse-dry_runfalse">create_job(jobname, supa, prefix=None, displacement=None, strain=None, velocities=None, append=False, dry_run=False)&lt;/h4>
&lt;p>Create a job with the given jobname in the database.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>supa&lt;/strong> (array of int, shape(dim, dim)) – The supercell matrix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prefix&lt;/strong> (str, optional, default to None) – The prefixing directory of the job relative to the root directory of the job series.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>displacement&lt;/strong> (array of float, optional, default to None) – The displacement to the crystal.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>strain&lt;/strong> (array of float, shape(dim, dim), optional, default to None) – The strain matrix of the structure.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>velocities&lt;/strong> (array of float, optional, default to None) – The initial velocities of the atoms of the crystal.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>append&lt;/strong> (bool, optional, default to False) – If True, skip existing jobs. Otherwise, throw an error.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dry_run&lt;/strong> (bool, optional, default to False) – If True, don’t actually create the job.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="create_jobsjobnames-supa-prefixnone-displacementsnone-strainnone-velocitiesnone-appendfalse-job_index_namenone-additional_filters-dry_runfalse">create_jobs(jobnames, supa, prefix=None, displacements=None, strain=None, velocities=None, append=False, job_index_name=None, additional_filters={}, dry_run=False)&lt;/h4>
&lt;p>Create a series of jobs in database.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobnames&lt;/strong> (list of str) – The names of the jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>supa&lt;/strong> (array of int, shape(dim, dim)) – The supercell matrix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prefix&lt;/strong> (str, optional, default to None) – The prefixing directory of the jobs relative to the root directory of the job series.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>displacements&lt;/strong> (array of float, optional, default to None) – The displacements to the crystal for the jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>strain&lt;/strong> (array of float, shape(dim, dim), optional, default to None) – The strain matrix of the structure.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>velocities&lt;/strong> (array of float, optional, default to None) – The initial velocities of the atoms of the crystal for the jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>append&lt;/strong> (bool, optional, default to False) – If True, skip existing jobs. Otherwise, throw an error.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dry_run&lt;/strong> (bool, optional, default to False) – If True, don’t actually create the job.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_born_effective_charges_from_jobjobnamenone-step_indexnone">get_born_effective_charges_from_job(jobname=None, step_index=None)&lt;/h4>
&lt;p>Get Born effective charges from the job.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>step_index&lt;/strong> (int) – The step index of the job in an finite difference calculation.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_dielectric_tensor_from_jobjobnamenone-step_indexnone">get_dielectric_tensor_from_job(jobname=None, step_index=None)&lt;/h4>
&lt;p>Get the dielectric tensor from the job.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>step_index&lt;/strong> (int) – The step index of the job in an finite difference calculation.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_energy_from_jobjobnamenone-step_indexnone">get_energy_from_job(jobname=None, step_index=None)&lt;/h4>
&lt;p>Get the energy from the job.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>step_index&lt;/strong> (int) – The step index of the job in an finite difference calculation.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_forces_from_jobjobnamenone-step_indexnone">get_forces_from_job(jobname=None, step_index=None)&lt;/h4>
&lt;p>Get forces from the job.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>step_index&lt;/strong> (int) – The step index of the job in an finite difference calculation.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_metadata_pathfilename">get_metadata_path(filename)&lt;/h4>
&lt;h4 id="get_results_from_jobsjobnames-data_type-job_index_namenone">get_results_from_jobs(jobnames, data_type, job_index_name=None)&lt;/h4>
&lt;p>Get results of a series of jobs from database.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobnames&lt;/strong> (list of str) – The names of the jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>data_type&lt;/strong> (str) – The type of results to retrieve, can be “forces”, “energy”, “stress”, “born_effective_charges”
or “dielectric_tensor”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prefix&lt;/strong> (str, optional, default to None) – The prefix of the jobs relative to the root directory of the job series.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>data&lt;/strong> – The retrieved results from jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of float&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_stress_from_jobjobnamenone-step_indexnone">get_stress_from_job(jobname=None, step_index=None)&lt;/h4>
&lt;p>Get the stress from the job.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>jobname&lt;/strong> (str) – The name of the job, as well as the directory name to create the job in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>step_index&lt;/strong> (int) – The step index of the job in an finite difference calculation.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="remove_filterkey">remove_filter(key)&lt;/h4>
&lt;p>Remive a filtering condition from database action.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>key&lt;/strong> (str) – The name of the column.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="reset_filters">reset_filters()&lt;/h4>
&lt;p>Reset the database filters.&lt;/p>
&lt;h4 id="save_metadatafilename-metadata-dry_runfalse">save_metadata(filename, metadata, dry_run=False)&lt;/h4>
&lt;h4 id="save_table_infoinfo_table-data">save_table_info(info_table, data)&lt;/h4>
&lt;p>Save some generic information of the table that the jobs are created in to an information table.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>info_table&lt;/strong> (str) – The name of the information table.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>data&lt;/strong> (dict) – The generic information to save in the information table.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_tabletable">set_table(table)&lt;/h4>
&lt;p>Set name of the table to access.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>table&lt;/strong> (str) – Table name.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-structure">&lt;em>property&lt;/em> structure()&lt;/h4></description></item><item><title>Docs: Module principia_materia.io_interface.qpoints_io</title><link>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.qpoints_io.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.qpoints_io.html</guid><description>
&lt;h1 id="principia_materiaio_interfaceqpoints_io-module">principia_materia.io_interface.qpoints_io module&lt;/h1>
&lt;h3 id="principia_materiaio_interfaceqpoints_ioarray_to_listarray">principia_materia.io_interface.qpoints_io.array_to_list(array)&lt;/h3>
&lt;p>Convert array of nested lists.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>array&lt;/strong> (array of numbers) – The array to convert from.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaio_interfaceqpoints_ioarray_to_tuplearray">principia_materia.io_interface.qpoints_io.array_to_tuple(array)&lt;/h3>
&lt;p>Convert array of nested tuples.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>array&lt;/strong> (array of numbers) – The array to convert from.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.io_interface.vasp</title><link>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.vasp.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.vasp.html</guid><description>
&lt;h1 id="principia_materiaio_interfacevasp-module">principia_materia.io_interface.vasp module&lt;/h1>
&lt;h3 id="principia_materiaio_interfacevaspparse_poscarposcar">principia_materia.io_interface.vasp.parse_poscar(poscar)&lt;/h3>
&lt;p>Parse data from POSCAR, and package the data that can be read into our translation group classes.&lt;/p>
&lt;p>See &lt;code>_parse_poscar&lt;/code> for actual parsing of the POSCAR.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>poscar&lt;/strong> (str) – A path to a POSCAR file or a string with the content of a POSCAR file.
CONTCAR is accepted as well.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>retval&lt;/strong> – A dictionary of all the information from POSCAR, with keywords vec, atoms and velocites in
format that can be ready into tranlation group classes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>dict&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaio_interfacevaspwrite_poscarstructure-displacementnone-titlenone-selective_dynamicsnone-velocitiesnone-is_velocities_directtrue-direct_coordinatestrue-prec8">principia_materia.io_interface.vasp.write_poscar(structure, displacement=None, title=None, selective_dynamics=None, velocities=None, is_velocities_direct=True, direct_coordinates=True, prec=8)&lt;/h3>
&lt;p>Write structure file into POSCAR.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>structure&lt;/strong> (&lt;a href="principia_materia.translation_group.crystal.html#principia_materia.translation_group.crystal.Crystal">Crystal&lt;/a> or CrystalFTG object) – The crystal structure.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>displacement&lt;/strong> (array of float, shape(natoms, 3), optional, default to None) – The displacement to the crystal.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>title&lt;/strong> (str, optional, default to None) – The title of the crystal.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>selective_dynamics&lt;/strong> (array of bool, shape(natoms, 3), optional, default to None) – The selective dynamics flags for POSCAR&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>velocities&lt;/strong> (array of float, shape(natoms, 3), optional, default to None) – The initial velocities of the atoms of the crystal.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>is_velocities_direct&lt;/strong> (bool, optional, default to True) – Whether to write the velocities are in direct coordinates.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>direct_coordinates&lt;/strong> (bool, optional, default to True) – Whether to write the atoms positions in direct coordinates.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prec&lt;/strong> (int, optional, default to 8) – The decimal points to round the floating point numbers to.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.io_interface.yaml_dump</title><link>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.yaml_dump.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.io_interface.yaml_dump.html</guid><description>
&lt;h1 id="principia_materiaio_interfaceyaml_dump-module">principia_materia.io_interface.yaml_dump module&lt;/h1>
&lt;h3 id="principia_materiaio_interfaceyaml_dumpyaml_dumpsdata-prec8">principia_materia.io_interface.yaml_dump.yaml_dumps(data, prec=8)&lt;/h3>
&lt;p>Save data in a custom YAML format string.&lt;/p>
&lt;p>The official yaml module cannot dump data in a consistent format,
this function solves that problem by using a consistent format for
various data types. Additionally, data types like numpy.ndarray can
be safely saved into YAML nested list format without extra work,
making saving YAML file much easier.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>data&lt;/strong> (dict) – The data to save.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>prec&lt;/strong> (int, optional, default to 8) – The decimal points to round the floating point numbers to.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.mathematics</title><link>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.html</guid><description>
&lt;h1 id="principia_materiamathematics-package">principia_materia.mathematics package&lt;/h1>
&lt;h2 id="submodules">Submodules&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.array_utils.html">principia_materia.mathematics.array_utils module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.array_utils.html#principia_materia.mathematics.array_utils.array_in_2darray">&lt;code>array_in_2darray()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.array_utils.html#principia_materia.mathematics.array_utils.index_array_in_array">&lt;code>index_array_in_array()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.core_math.html">principia_materia.mathematics.core_math module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.core_math.html#principia_materia.mathematics.core_math.gaussian">&lt;code>gaussian()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.core_math.html#principia_materia.mathematics.core_math.gs_orthog">&lt;code>gs_orthog()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.errortail.html">principia_materia.mathematics.errortail module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.errortail.html#principia_materia.mathematics.errortail.fit_errortail">&lt;code>fit_errortail()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.errortail.html#principia_materia.mathematics.errortail.generate_picks">&lt;code>generate_picks()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.errortail.html#principia_materia.mathematics.errortail.get_errortail">&lt;code>get_errortail()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.errortail.html#principia_materia.mathematics.errortail.get_errortail_yaml_wrapper">&lt;code>get_errortail_yaml_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.errortail.html#principia_materia.mathematics.errortail.least_square">&lt;code>least_square()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.errortail.html#principia_materia.mathematics.errortail.penalty_linear_mse">&lt;code>penalty_linear_mse()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.errortail.html#principia_materia.mathematics.errortail.penalty_sqrt_mse">&lt;code>penalty_sqrt_mse()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.errortail.html#principia_materia.mathematics.errortail.penalty_square_mse">&lt;code>penalty_square_mse()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html">principia_materia.mathematics.finite_difference module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#principia_materia.mathematics.finite_difference.FiniteDifference">&lt;code>FiniteDifference&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#principia_materia.mathematics.finite_difference.FiniteDifference.order">&lt;code>FiniteDifference.order&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#principia_materia.mathematics.finite_difference.FiniteDifference.delta">&lt;code>FiniteDifference.delta&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#principia_materia.mathematics.finite_difference.FiniteDifference.uniq_steps">&lt;code>FiniteDifference.uniq_steps&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#principia_materia.mathematics.finite_difference.FiniteDifference.add_delta">&lt;code>FiniteDifference.add_delta()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#principia_materia.mathematics.finite_difference.FiniteDifference.compute_finite_difference">&lt;code>FiniteDifference.compute_finite_difference()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#id0">&lt;code>FiniteDifference.delta&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#principia_materia.mathematics.finite_difference.FiniteDifference.get_stencils_1d">&lt;code>FiniteDifference.get_stencils_1d()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#principia_materia.mathematics.finite_difference.FiniteDifference.set_delta">&lt;code>FiniteDifference.set_delta()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#principia_materia.mathematics.finite_difference.FiniteDifference.set_stencils">&lt;code>FiniteDifference.set_stencils()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#principia_materia.mathematics.finite_difference.FiniteDifference.set_stencils_1d">&lt;code>FiniteDifference.set_stencils_1d()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#principia_materia.mathematics.finite_difference.FiniteDifference.set_steps">&lt;code>FiniteDifference.set_steps()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.finite_difference.html#id1">&lt;code>FiniteDifference.uniq_steps&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.fourier_transform.html">principia_materia.mathematics.fourier_transform module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.fourier_transform.html#principia_materia.mathematics.fourier_transform.backward_fourier_transform">&lt;code>backward_fourier_transform()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.fourier_transform.html#principia_materia.mathematics.fourier_transform.forward_fourier_transform">&lt;code>forward_fourier_transform()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.new_fraction.html">principia_materia.mathematics.new_fraction module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">&lt;code>Fraction&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction.limit_denominator">&lt;code>Fraction.limit_denominator()&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.smith_normal_form.html">principia_materia.mathematics.smith_normal_form module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.smith_normal_form.html#principia_materia.mathematics.smith_normal_form.DiagonalForm">&lt;code>DiagonalForm()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.smith_normal_form.html#principia_materia.mathematics.smith_normal_form.HermiteNormalForm_AU">&lt;code>HermiteNormalForm_AU()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.smith_normal_form.html#principia_materia.mathematics.smith_normal_form.HermiteNormalForm_UA">&lt;code>HermiteNormalForm_UA()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.smith_normal_form.html#principia_materia.mathematics.smith_normal_form.SmithNormalForm">&lt;code>SmithNormalForm()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.tensor_utils.html">principia_materia.mathematics.tensor_utils module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.tensor_utils.html#principia_materia.mathematics.tensor_utils.find_linearly_independent_vectors">&lt;code>find_linearly_independent_vectors()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.tensor_utils.html#principia_materia.mathematics.tensor_utils.find_most_linearly_independent_rows">&lt;code>find_most_linearly_independent_rows()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.mathematics.tensor_utils.html#principia_materia.mathematics.tensor_utils.rotate_tensor">&lt;code>rotate_tensor()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="module-contents">Module contents&lt;/h2>
&lt;h3 id="principia_materiamathematicsint_detmatrix">principia_materia.mathematics.int_det(matrix)&lt;/h3></description></item><item><title>Docs: Module principia_materia.mathematics.array_utils</title><link>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.array_utils.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.array_utils.html</guid><description>
&lt;h1 id="principia_materiamathematicsarray_utils-module">principia_materia.mathematics.array_utils module&lt;/h1>
&lt;h3 id="principia_materiamathematicsarray_utilsarray_in_2darrayarr1-arr2-tolnone">principia_materia.mathematics.array_utils.array_in_2darray(arr1, arr2, tol=None)&lt;/h3>
&lt;p>Check if a 1D array is a sub-array of a 2D array.&lt;/p>
&lt;h3 id="principia_materiamathematicsarray_utilsindex_array_in_arrayarr1-arr2-tolnone-completetrue-return_bothfalse">principia_materia.mathematics.array_utils.index_array_in_array(arr1, arr2, tol=None, complete=True, return_both=False)&lt;/h3>
&lt;p>Find the indices for sub-arrays of arr1 in arr2.&lt;/p>
&lt;p>Both arr1 and arr2 have same sub-arrays but in different order.
This method finds the indices of these sub-arrays in arr2 to order them
to the same ordering in arr1.&lt;/p></description></item><item><title>Docs: Module principia_materia.mathematics.core_math</title><link>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.core_math.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.core_math.html</guid><description>
&lt;h1 id="principia_materiamathematicscore_math-module">principia_materia.mathematics.core_math module&lt;/h1>
&lt;h3 id="principia_materiamathematicscore_mathgaussianw-sigma-w000">principia_materia.mathematics.core_math.gaussian(w, sigma, w0=0.0)&lt;/h3>
&lt;p>Gaussian&lt;/p>
&lt;p>..math&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-default" data-lang="default">g (w - w_0) = \frac{1}{\sqrt{2 \pi} \sigma} e^{- \frac{(w - w_0)^2}{2 sigma^2}}
&lt;/code>&lt;/pre>&lt;h3 id="principia_materiamathematicscore_mathgs_orthogarr-allowzerofalse-tol1e-06">principia_materia.mathematics.core_math.gs_orthog(arr, allowzero=False, tol=1e-06)&lt;/h3>
&lt;p>Gram-Schmidt orthonormalize a set of vectors.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>arr&lt;/strong> (array of numbers, shape(n, m)) – The set of vectors to be orthonormalized, in row convention.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>allowzero&lt;/strong> (bool, optional, default to False) – If True, allow 0 vectors in orthogonalization.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, optional, default to 1.0E-6) – Error tolerance.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>arr&lt;/strong> – The orthonormalized vectors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of numbers, shape(n, m)&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.mathematics.errortail</title><link>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.errortail.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.errortail.html</guid><description>
&lt;h1 id="principia_materiamathematicserrortail-module">principia_materia.mathematics.errortail module&lt;/h1>
&lt;h3 id="principia_materiamathematicserrortailfit_errortaildelta-datapoints-power2-pick_min3-pick_maxnone-consecutive_picksfalse-penaltyfunction-penalty_linear_mse-separate_complexfalse">principia_materia.mathematics.errortail.fit_errortail(delta, datapoints, power=2, pick_min=3, pick_max=None, consecutive_picks=False, penalty=&lt;function penalty_linear_mse>, separate_complex=False)&lt;/h3>
&lt;p>Fit error tail for finite difference calculations.&lt;/p>
&lt;p>Either pick n and pick N scheme can be used with various penalty function.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>delta&lt;/strong> (array of floats, shape(n, )) – The delta values of the finite difference.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>datapoints&lt;/strong> (array of numbers (complex or float), shape(n, ) or shape(n, m)) – The target function values evaluated at each delta.
If the input is 2-dimensional, each column is computed separately.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>power&lt;/strong> (int, optional, default to 2) – The power of the error tail.
For forward and backward only FD, the error tail is linear.
For central FD, the error tail is quadratic.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pick_min&lt;/strong> (int, optional, default to 3) – The minimum number of picks for delta selection.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pick_max&lt;/strong> (int, optional, default to None) – The maximum number of picks for delta selection.
If None, the pick n scheme is used with n=pick_min.
If not None, the pick N schcme is used with N=[pick_min, pick_max].&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>consecutive_picks&lt;/strong> (bool, optional, default to False) – Whether to pick consecutive deltas in the picking process.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>penalty&lt;/strong> (callable, optional, default to penalty_linear_mse) – The penalty function to determine the best fit.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>separate_complex&lt;/strong> (bool, optional, default to False) – Whether to fit real and imaginary part of the complex data points
separetely.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>fit_result&lt;/strong> (&lt;em>array of numbers (complex or float, same of type of datapoints), shape(m, 2)&lt;/em>) – The coefficients of the fitted error tail.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>final_pick&lt;/strong> (&lt;em>list of arrays of int or complex, length of m&lt;/em>) – The indices of the picked points.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>penalty_value&lt;/strong> (&lt;em>array of numbers (complex or float, same of type of datapoints), shape(m, )&lt;/em>) – The result of the penalty function.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiamathematicserrortailgenerate_pickstotal-pick-consecutivefalse">principia_materia.mathematics.errortail.generate_picks(total, pick, consecutive=False)&lt;/h3>
&lt;p>Generator for indices to pick with specified pick scheme.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>total&lt;/strong> (int) – The total number of points to pick from.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pick&lt;/strong> (int) – The number of points to pick.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>consecutive&lt;/strong> (bool, optional, detault to False) – Whether the points need to be picked consecutively.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiamathematicserrortailget_errortaildeltas-values-fdtypec-pick_min3-pick_maxnone-consecutivefalse-penaltyfunction-penalty_linear_mse-separate_complextrue-return_xcoeffalse-return_pickfalse-return_penaltyfalse">principia_materia.mathematics.errortail.get_errortail(deltas, values, fdtype=&amp;lsquo;c&amp;rsquo;, pick_min=3, pick_max=None, consecutive=False, penalty=&lt;function penalty_linear_mse>, separate_complex=True, return_xcoef=False, return_pick=False, return_penalty=False)&lt;/h3>
&lt;p>Compute error tail for finite difference results.&lt;/p>
&lt;p>In this function, contrary to the &lt;code>fit_errortail&lt;/code> function, the order of
the errortail is determined by the type of the finite difference instead.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>delta&lt;/strong> (array of floats, shape(n, )) – The delta values of the finite difference.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>values&lt;/strong> (array of numbers (complex or float), shape(n, ) or shape(n, m, &amp;hellip;)) – The target function values evaluated at each delta.
If the input dimention is higher than 1, each entry from the second dimention and
beyond is computed separately.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>fdtype&lt;/strong> (str, choice of [&amp;ldquo;c&amp;rdquo;, &amp;ldquo;b&amp;rdquo;, &amp;ldquo;f&amp;rdquo;], default to &amp;ldquo;c&amp;rdquo;) – The type of finite difference calculation, “c” for central,
“b” for backward and “f” for forward.
For forward and backward only FD, the error tail is linear.
For central FD, the error tail is quadratic.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pick_min&lt;/strong> (int, optional, default to 3) – The minimum number of picks for delta selection.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pick_max&lt;/strong> (int, optional, default to None) – The maximum number of picks for delta selection.
If None, the pick n scheme is used with n=pick_min.
If not None, the pick N schcme is used with N=[pick_min, pick_max].&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>consecutive_picks&lt;/strong> (bool, optional, default to False) – Whether to pick consecutive deltas in the picking process.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>penalty&lt;/strong> (callable, optional, default to penalty_linear_mse) – The penalty function to determine the best fit.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>separate_complex&lt;/strong> (bool, optional, default to False) – Whether to fit real and imaginary part of the complex data points
separetely.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>return_xcoef&lt;/strong> (bool, optional, default to False) – Whether to return the coefficient of the x^order term.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>return_pick&lt;/strong> (bool, optional, default to False) – Whether to return the indices of the picked points.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>return_penalty&lt;/strong> (bool, optional, default to False) – Whether to return the result of the penalty function.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>result&lt;/strong> (&lt;em>array of numbers (complex or float, same of type of values), shape(m, …)&lt;/em>) – The intercept of the error tail.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>xcoef&lt;/strong> (&lt;em>array of numbers (complex or float, same of type of values), shape(m, …)&lt;/em>) – The coefficient of the x^order term, can be used to plot the fitted error tail.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pick&lt;/strong> (&lt;em>list of arrays of int or complex, length of m&lt;/em>) – The indices of the picked points.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>penalty&lt;/strong> (&lt;em>array of numbers (complex or float, same of type of values), shape(m, …)&lt;/em>) – The result of the penalty function.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiamathematicserrortailget_errortail_yaml_wrappertitleerrortail-dataset-iscomplexfalse">principia_materia.mathematics.errortail.get_errortail_yaml_wrapper(title=&amp;lsquo;Errortail Dataset&amp;rsquo;, iscomplex=False)&lt;/h3>
&lt;h3 id="principia_materiamathematicserrortailleast_squarea-b-return_rfalse-return_msefalse-return_sfalse-return_stdxfalse">principia_materia.mathematics.errortail.least_square(A, b, return_R=False, return_mse=False, return_S=False, return_stdx=False)&lt;/h3>
&lt;p>Compute least square of Ax=b&lt;/p>
&lt;p>The function computes the least square solution for the equation $A \cdot x=b$,
as well as metrics to evaluate the quality of the solution when the input A is not
square and full rank, and the solution is not exact.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>A&lt;/strong> (array of numbers, shape(N, m)) – Matrix A.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>b&lt;/strong> (array of numbers, shape(N, ) or shape(N, l)) – Vector b, if b is 2 dimensional, least square is computed
for each column of b.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>return_R&lt;/strong> (bool) – Whether to return residuals.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>return_mse&lt;/strong> (bool) – Whether to return mean square error.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>return_S&lt;/strong> (bool) – Whether to return covariance matrix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>return_stdx&lt;/strong> (bool) – Whether to return standard error.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>x&lt;/strong> (&lt;em>array of numbers, shape(l, m)&lt;/em>) – Least square solution.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>R&lt;/strong> (&lt;em>array of numbers, shape(l, )&lt;/em>) – Residuals of the least square.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>mse&lt;/strong> (&lt;em>array of numbers, shape(l, )&lt;/em>) – Mean square error of the least square.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>S&lt;/strong> (&lt;em>array of numbers, shape(l, m, m)&lt;/em>) – Covariance matrix of the least square.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>stdx&lt;/strong> (&lt;em>array of numbers, shape(l, m)&lt;/em>) – Standard error of the least square.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiamathematicserrortailpenalty_linear_msen-r-mse-s-stdx">principia_materia.mathematics.errortail.penalty_linear_mse(n, R, mse, S, stdx)&lt;/h3>
&lt;p>Compute linear penalty from mse&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>n&lt;/strong> (int) – Number of points to fit with&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>R&lt;/strong> (float or complex) – Residule of least square&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>mse&lt;/strong> (float or complex) – Mean squared error of least square&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>S&lt;/strong> (float or complex) – Covariance of least square&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>stdx&lt;/strong> (float or complex) – Standard error of least square&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>penalty&lt;/strong> – The penalty&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>float or complex&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiamathematicserrortailpenalty_sqrt_msen-r-mse-s-stdx">principia_materia.mathematics.errortail.penalty_sqrt_mse(n, R, mse, S, stdx)&lt;/h3>
&lt;p>Compute square root penalty from mse&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>n&lt;/strong> (int) – Number of points to fit with&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>R&lt;/strong> (float or complex) – Residule of least square&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>mse&lt;/strong> (float or complex) – Mean squared error of least square&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>S&lt;/strong> (float or complex) – Covariance of least square&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>stdx&lt;/strong> (float or complex) – Standard error of least square&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>penalty&lt;/strong> – The penalty&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>float or complex&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiamathematicserrortailpenalty_square_msen-r-mse-s-stdx">principia_materia.mathematics.errortail.penalty_square_mse(n, R, mse, S, stdx)&lt;/h3>
&lt;p>Compute squared penalty from mse&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>n&lt;/strong> (int) – Number of points to fit with&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>R&lt;/strong> (float or complex) – Residule of least square&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>mse&lt;/strong> (float or complex) – Mean squared error of least square&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>S&lt;/strong> (float or complex) – Covariance of least square&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>stdx&lt;/strong> (float or complex) – Standard error of least square&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>penalty&lt;/strong> – The penalty&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>float or complex&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.mathematics.finite_difference</title><link>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.finite_difference.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.finite_difference.html</guid><description>
&lt;h1 id="principia_materiamathematicsfinite_difference-module">principia_materia.mathematics.finite_difference module&lt;/h1>
&lt;h3 id="_class_-principia_materiamathematicsfinite_differencefinitedifferenceorder-fdtypec">&lt;em>class&lt;/em> principia_materia.mathematics.finite_difference.FiniteDifference(order, fdtype=&amp;lsquo;c&amp;rsquo;)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>Compute finite difference&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>order&lt;/strong> (int, or tuple of int) – The order of the finite difference derivative.
If input type int, compute FD of a single variable to given order.
If input tuple of int, compute FD of len(order) variables, to respective order.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>fdtype&lt;/strong> (choice between &amp;ldquo;c&amp;rdquo;, &amp;ldquo;f&amp;rdquo; and &amp;ldquo;b&amp;rdquo;) – Type of finite difference:&lt;/p>
&lt;p>”c” for central,
“f” for forward,
“b” for backward.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="order">order()&lt;/h4>
&lt;p>The order of derivative at each variable.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>array of int, shape(nvar, )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="delta">delta()&lt;/h4>
&lt;p>The delta(s) to evaluate at using the finite difference.
The delta can be different at each variable.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(nvar, ndelta)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="uniq_steps">uniq_steps()&lt;/h4>
&lt;p>The unique steps needed to compute finite difference for the given
order and delta configuration.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(n, nvar)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="add_deltanew_delta-decimal6">add_delta(new_delta, decimal=6)&lt;/h4>
&lt;p>Add extra delta(s) and found the map from old steps to new steps.&lt;/p>
&lt;h4 id="compute_finite_differencefvals">compute_finite_difference(fvals)&lt;/h4>
&lt;p>Compute finite difference&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>fvals&lt;/strong> (array of numbers, shape (len(uniq_steps), ) or (len(uniq_steps), N&amp;hellip;)) – Values of the target function at each step, can process multiple values simultaneously.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>fd_result&lt;/strong> – Result of the finite difference.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of numbers, shape fvals.shape[1:]&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-delta">&lt;em>property&lt;/em> delta()&lt;/h4>
&lt;h4 id="get_stencils_1dorder">get_stencils_1d(order)&lt;/h4>
&lt;p>Compute the single variable FD stencil to given order.&lt;/p>
&lt;p>Equations for coefficients on each stencil can be found on
&lt;a href="https://en.wikipedia.org/wiki/Finite_difference">Finite difference Wikipedia page&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>order&lt;/strong> (int) – The order of the derivative&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_deltadelta-overwritefalse">set_delta(delta, overwrite=False)&lt;/h4>
&lt;p>Set delta for finite difference computation&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>delta&lt;/strong> (float or array of float, shape of (N, ) or (len(order), N)) – ( N != len(order) )
The delta(s) of the derivative.
If pass in a float, use the same delta for each order.
If pass in array:&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>In the case of shape(N, ), use same delta for all variables,
and compute N deltas at the same time.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;ol start="2">
&lt;li>In the case of shape(len(order), N), use different delta for
each variable, and compute N deltas at the same time.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_stencils">set_stencils()&lt;/h4>
&lt;p>Set stencils for FD derivatives.&lt;/p>
&lt;p>Find the stencils needed to compute finite difference.&lt;/p>
&lt;h4 id="set_stencils_1d">set_stencils_1d()&lt;/h4>
&lt;p>Find stencils for each FD variable.&lt;/p>
&lt;h4 id="set_stepsdecimal6">set_steps(decimal=6)&lt;/h4>
&lt;p>Find unique steps needed to compute finite differece.&lt;/p>
&lt;p>With the found stencils, find all the steps needed to evaluate for the target function,
and find the unique steps as well as the inverse map to the full steps grid.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>decimal&lt;/strong> (int) – The precision to consider 2 steps equal.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-uniq_steps">&lt;em>property&lt;/em> uniq_steps()&lt;/h4></description></item><item><title>Docs: Module principia_materia.mathematics.fourier_transform</title><link>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.fourier_transform.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.fourier_transform.html</guid><description>
&lt;h1 id="principia_materiamathematicsfourier_transform-module">principia_materia.mathematics.fourier_transform module&lt;/h1>
&lt;h3 id="principia_materiamathematicsfourier_transformbackward_fourier_transformtensors-p-q">principia_materia.mathematics.fourier_transform.backward_fourier_transform(tensors, p, q)&lt;/h3>
&lt;p>Backward Fourier Transform for arbitrary orders&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>tensors&lt;/strong> (array of complex/float of shape(N, n_1, &amp;hellip;, n_n)) – Tensors to be Fourier Transformed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>p&lt;/strong> (array of numbers of shape(N, m_1, &amp;hellip;, m_m)) – The corresponding T/Q points of the tensors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>q&lt;/strong> (array of numbers of shape(M, m_1, &amp;hellip;, m_m) or shape(m_1, &amp;hellip;, m_m)) – The Q/T points for the tensors to be transformed into.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>restult&lt;/strong> – The result of Fourier Transform.
(If input q has shape of (m_1, …, m_m), returns shape (n_1, …, n_n).)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>length M array of complex/float of shape(M, n_1, …, n_n)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiamathematicsfourier_transformforward_fourier_transformtensors-p-q">principia_materia.mathematics.fourier_transform.forward_fourier_transform(tensors, p, q)&lt;/h3>
&lt;p>Forward Fourier Transform for arbitrary orders&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>tensors&lt;/strong> (array of complex/float of shape(N, n_1, &amp;hellip;, n_n)) – Tensors to be Fourier Transformed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>p&lt;/strong> (array of numbers of shape(N, m_1, &amp;hellip;, m_m)) – The corresponding T/Q points of the tensors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>q&lt;/strong> (array of numbers of shape(M, m_1, &amp;hellip;, m_m) or shape(m_1, &amp;hellip;, m_m)) – The Q/T points for the tensors to be transformed into.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>restult&lt;/strong> – The result of Fourier Transform.
(If input q has shape of (m_1, …, m_m), returns shape (n_1, …, n_n).)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>length M array of complex/float of shape(M, n_1, …, n_n)&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.mathematics.new_fraction</title><link>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.new_fraction.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.new_fraction.html</guid><description>
&lt;h1 id="principia_materiamathematicsnew_fraction-module">principia_materia.mathematics.new_fraction module&lt;/h1>
&lt;h3 id="_class_-principia_materiamathematicsnew_fractionfractionnumerator0-denominatornone--_normalizetrue">&lt;em>class&lt;/em> principia_materia.mathematics.new_fraction.Fraction(numerator=0, denominator=None, *, _normalize=True)&lt;/h3>
&lt;p>Bases: &lt;code>Fraction&lt;/code>&lt;/p>
&lt;p>Updated methods of built-in Fraction type to fix some deprecation errors.&lt;/p>
&lt;h4 id="limit_denominatormax_denominator1000000">limit_denominator(max_denominator=1000000)&lt;/h4>
&lt;p>Closest Fraction to self with denominator at most max_denominator.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;3.141592653589793&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">limit_denominator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">22&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;3.141592653589793&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">limit_denominator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">311&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">99&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4321&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8765&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">limit_denominator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Fraction&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4321&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8765&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Module principia_materia.mathematics.smith_normal_form</title><link>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.smith_normal_form.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.smith_normal_form.html</guid><description>
&lt;h1 id="principia_materiamathematicssmith_normal_form-module">principia_materia.mathematics.smith_normal_form module&lt;/h1>
&lt;p>Smith Normal Form and Hermite Normal Form&lt;/p>
&lt;p>An implementation of Smith Normal Form following the algorithm described in &lt;a href="https://en.wikipedia.org/wiki/Smith_normal_form">Smith Normal Form - Wikipedia&lt;/a>.&lt;/p>
&lt;p>Hermite Normal Form is implemented following the definition in &lt;a href="https://en.wikipedia.org/wiki/Hermite_normal_form">Hermite Normal Form - Wikipedia&lt;/a>.&lt;/p>
&lt;h3 id="principia_materiamathematicssmith_normal_formdiagonalformm">principia_materia.mathematics.smith_normal_form.DiagonalForm(M)&lt;/h3>
&lt;p>Finds the diagonalized form of the integer matrix M.&lt;/p>
&lt;h3 id="principia_materiamathematicssmith_normal_formhermitenormalform_aum">principia_materia.mathematics.smith_normal_form.HermiteNormalForm_AU(M)&lt;/h3>
&lt;p>Hermite Normal Form of M, Column style&lt;/p>
&lt;p>H = ML&lt;/p>
&lt;h3 id="principia_materiamathematicssmith_normal_formhermitenormalform_uam">principia_materia.mathematics.smith_normal_form.HermiteNormalForm_UA(M)&lt;/h3>
&lt;p>Hermite Normal Form of M, Row style&lt;/p>
&lt;p>H = LM&lt;/p>
&lt;h3 id="principia_materiamathematicssmith_normal_formsmithnormalformm">principia_materia.mathematics.smith_normal_form.SmithNormalForm(M)&lt;/h3>
&lt;p>Finds the Smith Normal Form of the integer matrix M.&lt;/p>
&lt;p>The 0 diagonal elements will appear at the end.&lt;/p></description></item><item><title>Docs: Module principia_materia.mathematics.tensor_utils</title><link>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.tensor_utils.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.mathematics.tensor_utils.html</guid><description>
&lt;h1 id="principia_materiamathematicstensor_utils-module">principia_materia.mathematics.tensor_utils module&lt;/h1>
&lt;h3 id="principia_materiamathematicstensor_utilsfind_linearly_independent_vectorsvectors-tol1e-06-return_vectorsfalse">principia_materia.mathematics.tensor_utils.find_linearly_independent_vectors(vectors, tol=1e-06, return_vectors=False)&lt;/h3>
&lt;p>Use Gram-Schmidt to find a set of linearly independent vectors.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>vectors&lt;/strong> (array of numbers, shape(n, m)) – The set of vectors to be orthonormalized, in row convention.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, optional, default to 1.0E-6) – Error tolerance.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>return_vectors&lt;/strong> (bool, optional, default to False) – Whether to return the orthonormalized vectors.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>liv_indices&lt;/strong> (&lt;em>array of int, shape(rank(vectors), )&lt;/em>) – The indicies of the linearly independent vectors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>vectors&lt;/strong> (&lt;em>array of numbers, shape(n, m)&lt;/em>) – (if return_vectors == True)
The orthonormalized vectors.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiamathematicstensor_utilsfind_most_linearly_independent_rowsvectors-tol1e-06-return_vectorsfalse">principia_materia.mathematics.tensor_utils.find_most_linearly_independent_rows(vectors, tol=1e-06, return_vectors=False)&lt;/h3>
&lt;h3 id="principia_materiamathematicstensor_utilsrotate_tensorrotation_matricies-tensor-rank">principia_materia.mathematics.tensor_utils.rotate_tensor(rotation_matricies, tensor, rank)&lt;/h3>
&lt;p>Rotate a tensor.&lt;/p>
&lt;p>$$
T^{\prime}_{i^{\prime} j^{\prime} k^{\prime} l^{\prime} \cdots} = %
\sum_{i j k l} %
a_{i i^{\prime}} b_{j j^{\prime}} c_{i k^{\prime}} d_{i l^{\prime}} %
\cdots T_{i j k l \cdots}
$$&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>rotation_matricies&lt;/strong> (list of arrays of float/complex, length of rank) – (Each array must be a square matrix of same shape of i-th index of tensor)
Rotation matrices to rotate the tensor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tensor&lt;/strong> (array of float/complex, shape(n_1, &amp;hellip;, n_{rank}) of shape(n_1, &amp;hellip;, n_{rank + 1})) – The tensor to rotate.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>rank&lt;/strong> (int) – The rank of the tensor.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.phonon_id</title><link>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.html</guid><description>
&lt;h1 id="principia_materiaphonon_id-package">principia_materia.phonon_id package&lt;/h1>
&lt;h2 id="submodules">Submodules&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html">principia_materia.phonon_id.analytic_dynamic_tensor module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor">&lt;code>AnalyticDynamicTensor&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.Qpoint">&lt;code>AnalyticDynamicTensor.Qpoint&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.compute_tensor">&lt;code>AnalyticDynamicTensor.compute_tensor()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.get_irreducible_basis_rowname">&lt;code>AnalyticDynamicTensor.get_irreducible_basis_rowname()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.get_irreps">&lt;code>AnalyticDynamicTensor.get_irreps()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.get_rotation_matrix">&lt;code>AnalyticDynamicTensor.get_rotation_matrix()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.irreducible_derivative_names">&lt;code>AnalyticDynamicTensor.irreducible_derivative_names&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.n_irreducible_derivatives">&lt;code>AnalyticDynamicTensor.n_irreducible_derivatives&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.order">&lt;code>AnalyticDynamicTensor.order&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.qpoint_displacement_rep">&lt;code>AnalyticDynamicTensor.qpoint_displacement_rep&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.set_irreducible_derivative_names">&lt;code>AnalyticDynamicTensor.set_irreducible_derivative_names()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.set_irreducible_derivatives">&lt;code>AnalyticDynamicTensor.set_irreducible_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.set_qpoint_displacement_rep">&lt;code>AnalyticDynamicTensor.set_qpoint_displacement_rep()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.set_vectorized_tensor">&lt;code>AnalyticDynamicTensor.set_vectorized_tensor()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.solve_irreducible_derivatives">&lt;code>AnalyticDynamicTensor.solve_irreducible_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.symmetrized_tensor_shape">&lt;code>AnalyticDynamicTensor.symmetrized_tensor_shape&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.symmetrized_vectorized_tensor">&lt;code>AnalyticDynamicTensor.symmetrized_vectorized_tensor&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.tensor_shape">&lt;code>AnalyticDynamicTensor.tensor_shape&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.unique_qpoints">&lt;code>AnalyticDynamicTensor.unique_qpoints&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor.vectorized_tensor">&lt;code>AnalyticDynamicTensor.vectorized_tensor&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.get_AnalyticDynamicTensor_hdf5_wrapper">&lt;code>get_AnalyticDynamicTensor_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_dynamic_tensor.html#principia_materia.phonon_id.analytic_dynamic_tensor.get_IrreducibleDerivatives_hdf5_wrapper">&lt;code>get_IrreducibleDerivatives_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html">principia_materia.phonon_id.analytic_strain_tensor module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor">&lt;code>AnalyticStrainTensor&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.compute_tensor">&lt;code>AnalyticStrainTensor.compute_tensor()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.get_irreducible_basis_rowname">&lt;code>AnalyticStrainTensor.get_irreducible_basis_rowname()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.get_irreps">&lt;code>AnalyticStrainTensor.get_irreps()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.get_rotation_matrix">&lt;code>AnalyticStrainTensor.get_rotation_matrix()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.identity_subspace">&lt;code>AnalyticStrainTensor.identity_subspace&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.irreducible_derivative_names">&lt;code>AnalyticStrainTensor.irreducible_derivative_names&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.irreducible_strains">&lt;code>AnalyticStrainTensor.irreducible_strains&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.n_irreducible_derivatives">&lt;code>AnalyticStrainTensor.n_irreducible_derivatives&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.set_irreducible_derivative_names">&lt;code>AnalyticStrainTensor.set_irreducible_derivative_names()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.set_irreducible_derivatives">&lt;code>AnalyticStrainTensor.set_irreducible_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.set_irreducible_strains">&lt;code>AnalyticStrainTensor.set_irreducible_strains()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.set_strain_rep">&lt;code>AnalyticStrainTensor.set_strain_rep()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.set_vectorized_tensor">&lt;code>AnalyticStrainTensor.set_vectorized_tensor()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.solve_irreducible_derivatives">&lt;code>AnalyticStrainTensor.solve_irreducible_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.symmetrized_tensor_shape">&lt;code>AnalyticStrainTensor.symmetrized_tensor_shape&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.symmetrized_vectorized_tensor">&lt;code>AnalyticStrainTensor.symmetrized_vectorized_tensor&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.tensor_shape">&lt;code>AnalyticStrainTensor.tensor_shape&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_strain_tensor.html#principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor.vectorized_tensor">&lt;code>AnalyticStrainTensor.vectorized_tensor&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html">principia_materia.phonon_id.analytic_tensors module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.AnalyticTensors">&lt;code>AnalyticTensors&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.AnalyticTensors.compute_D_from_ID">&lt;code>AnalyticTensors.compute_D_from_ID()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.AnalyticTensors.compute_ID_from_D">&lt;code>AnalyticTensors.compute_ID_from_D()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.AnalyticTensors.copy">&lt;code>AnalyticTensors.copy()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.AnalyticTensors.irreducible_derivative_names">&lt;code>AnalyticTensors.irreducible_derivative_names&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.AnalyticTensors.n_irreducible_derivatives">&lt;code>AnalyticTensors.n_irreducible_derivatives&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.AnalyticTensors.set_ADT">&lt;code>AnalyticTensors.set_ADT()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.AnalyticTensors.set_D">&lt;code>AnalyticTensors.set_D()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.AnalyticTensors.set_irreducible_D">&lt;code>AnalyticTensors.set_irreducible_D()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.get_AnalyticTensors_from_hdf5">&lt;code>get_AnalyticTensors_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.get_AnalyticTensors_hdf5_wrapper">&lt;code>get_AnalyticTensors_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.save_AnalyticTensors_to_hdf5">&lt;code>save_AnalyticTensors_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html">principia_materia.phonon_id.anharmonic_interpolation module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation">&lt;code>AnharmincInterpolation&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.analytic_derivative_dynamic_matrix">&lt;code>AnharmincInterpolation.analytic_derivative_dynamic_matrix()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.existing_orders">&lt;code>AnharmincInterpolation.existing_orders&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.fd_derivative_dynamic_matrix">&lt;code>AnharmincInterpolation.fd_derivative_dynamic_matrix()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.get_Dq2">&lt;code>AnharmincInterpolation.get_Dq2()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.get_DqN">&lt;code>AnharmincInterpolation.get_DqN()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.get_Phi">&lt;code>AnharmincInterpolation.get_Phi()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.get_phonons">&lt;code>AnharmincInterpolation.get_phonons()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.group_velocity">&lt;code>AnharmincInterpolation.group_velocity()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.heat_capacity">&lt;code>AnharmincInterpolation.heat_capacity()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.set_Phi">&lt;code>AnharmincInterpolation.set_Phi()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.set_dipole">&lt;code>AnharmincInterpolation.set_dipole()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation.set_q_direction">&lt;code>AnharmincInterpolation.set_q_direction()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.anharmonic_interpolation.html#principia_materia.phonon_id.anharmonic_interpolation.mode_heat_capacuty">&lt;code>mode_heat_capacuty()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html">principia_materia.phonon_id.bid module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID">&lt;code>BID&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.compute_irreducible_derivatives">&lt;code>BID.compute_irreducible_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.irreducible_derivatives">&lt;code>BID.irreducible_derivatives&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.create_jobs">&lt;code>BID.create_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.derivative_order">&lt;code>BID.derivative_order&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.find_measurements">&lt;code>BID.find_measurements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.get_dynamic_tensors">&lt;code>BID.get_dynamic_tensors()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.get_fourier_interpolation">&lt;code>BID.get_fourier_interpolation()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.get_irreducible_derivative_names">&lt;code>BID.get_irreducible_derivative_names()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.set_chainrule_derivatives">&lt;code>BID.set_chainrule_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID._chainrule">&lt;code>BID._chainrule&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.set_chainrule_matrix">&lt;code>BID.set_chainrule_matrix()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.set_errortail_results">&lt;code>BID.set_errortail_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID._fd_errortail">&lt;code>BID._fd_errortail&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.set_measurements">&lt;code>BID.set_measurements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID.set_results">&lt;code>BID.set_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.BID._fd_results">&lt;code>BID._fd_results&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.DisplacementGenerator">&lt;code>DisplacementGenerator&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.DisplacementGenerator.astep">&lt;code>DisplacementGenerator.astep()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.DisplacementGenerator.astep_one">&lt;code>DisplacementGenerator.astep_one()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.DisplacementGenerator.n">&lt;code>DisplacementGenerator.n&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.DisplacementGenerator.next">&lt;code>DisplacementGenerator.next()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.DisplacementGenerator.reset">&lt;code>DisplacementGenerator.reset()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.RandomDisplacementGenerator">&lt;code>RandomDisplacementGenerator&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.RandomDisplacementGenerator.next">&lt;code>RandomDisplacementGenerator.next()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.RandomDisplacementGenerator.reset">&lt;code>RandomDisplacementGenerator.reset()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.format_measurement_label">&lt;code>format_measurement_label()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.get_BID_from_hdf5">&lt;code>get_BID_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.get_BID_hdf5_wrapper">&lt;code>get_BID_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.save_BID_to_hdf5">&lt;code>save_BID_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.bid.html#principia_materia.phonon_id.bid.save_bid_errortails">&lt;code>save_bid_errortails()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html">principia_materia.phonon_id.chainrule_derivatives module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives">&lt;code>ChainruleDerivatives&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.add_known_ID">&lt;code>ChainruleDerivatives.add_known_ID()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.basis_names">&lt;code>ChainruleDerivatives.basis_names&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.basis_vectors">&lt;code>ChainruleDerivatives.basis_vectors&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.compute_chainrule">&lt;code>ChainruleDerivatives.compute_chainrule()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.decompose_displacements">&lt;code>ChainruleDerivatives.decompose_displacements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.displacement_shape">&lt;code>ChainruleDerivatives.displacement_shape&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.get_chainrule_factors">&lt;code>ChainruleDerivatives.get_chainrule_factors()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.known_ID">&lt;code>ChainruleDerivatives.known_ID&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.nonzero_ID_index">&lt;code>ChainruleDerivatives.nonzero_ID_index&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.normalize_displacements">&lt;code>ChainruleDerivatives.normalize_displacements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.set_basis">&lt;code>ChainruleDerivatives.set_basis()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.set_naive_basis">&lt;code>ChainruleDerivatives.set_naive_basis()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.set_symmetric_basis">&lt;code>ChainruleDerivatives.set_symmetric_basis()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives.unknown_ID">&lt;code>ChainruleDerivatives.unknown_ID&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.get_ChainruleDerivatives_from_hdf5">&lt;code>get_ChainruleDerivatives_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.get_ChainruleDerivatives_hdf5_wrapper">&lt;code>get_ChainruleDerivatives_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.save_ChainruleDerivatives_to_hdf5">&lt;code>save_ChainruleDerivatives_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html">principia_materia.phonon_id.conductivity module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.Conductivity">&lt;code>Conductivity&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.Conductivity.gamma_tetra">&lt;code>Conductivity.gamma_tetra()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.Conductivity.gamma_tetra_at_phonon">&lt;code>Conductivity.gamma_tetra_at_phonon()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.Conductivity.gamma_tetra_grid">&lt;code>Conductivity.gamma_tetra_grid()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.Conductivity.has_Phi_order">&lt;code>Conductivity.has_Phi_order()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.Conductivity.scattering_rate_boundary">&lt;code>Conductivity.scattering_rate_boundary()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.Conductivity.set_Phi">&lt;code>Conductivity.set_Phi()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.Conductivity.set_dipole">&lt;code>Conductivity.set_dipole()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.Conductivity.thermal_conductivity_LBTE">&lt;code>Conductivity.thermal_conductivity_LBTE()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.Conductivity.thermal_conductivity_RTA">&lt;code>Conductivity.thermal_conductivity_RTA()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.Conductivity.two_phonon_dos">&lt;code>Conductivity.two_phonon_dos()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.bedist">&lt;code>bedist()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.conductivity.html#principia_materia.phonon_id.conductivity.reciprocal">&lt;code>reciprocal()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html">principia_materia.phonon_id.dipole_dipole module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.DipoleDipole">&lt;code>DipoleDipole&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.DipoleDipole.Gvecs">&lt;code>DipoleDipole.Gvecs&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.DipoleDipole.c_dd">&lt;code>DipoleDipole.c_dd()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.DipoleDipole.c_dd_batch">&lt;code>DipoleDipole.c_dd_batch()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.DipoleDipole.c_dd_q0">&lt;code>DipoleDipole.c_dd_q0&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.DipoleDipole.dc_dd_G_dK">&lt;code>DipoleDipole.dc_dd_G_dK()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.DipoleDipole.dc_dd_dK">&lt;code>DipoleDipole.dc_dd_dK()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.DipoleDipole.dc_dd_dK_batch">&lt;code>DipoleDipole.dc_dd_dK_batch()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.DipoleDipole.get_c_dd_q0">&lt;code>DipoleDipole.get_c_dd_q0()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.DipoleDipole.get_valid_slice">&lt;code>DipoleDipole.get_valid_slice()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.get_DipoleDipole_from_yaml">&lt;code>get_DipoleDipole_from_yaml()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.get_dipole_dataset_yaml_wrapper">&lt;code>get_dipole_dataset_yaml_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dipole_dipole.html#principia_materia.phonon_id.dipole_dipole.save_DipoleDipole_to_yaml">&lt;code>save_DipoleDipole_to_yaml()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html">principia_materia.phonon_id.dynamic_tensors module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.DynamicTensors">&lt;code>DynamicTensors&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.DynamicTensors.copy">&lt;code>DynamicTensors.copy()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.DynamicTensors.get_D_at_Q">&lt;code>DynamicTensors.get_D_at_Q()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.DynamicTensors.get_full_D">&lt;code>DynamicTensors.get_full_D()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.DynamicTensors.prepend_hiden_q">&lt;code>DynamicTensors.prepend_hiden_q()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.DynamicTensors.set_D">&lt;code>DynamicTensors.set_D()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.DynamicTensors.set_dipoledipole">&lt;code>DynamicTensors.set_dipoledipole()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.DynamicTensors.set_dipoledipole_contribution">&lt;code>DynamicTensors.set_dipoledipole_contribution()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.DynamicTensors.set_irreducible_D">&lt;code>DynamicTensors.set_irreducible_D()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.get_DynamicTensors_from_hdf5">&lt;code>get_DynamicTensors_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.get_DynamicTensors_hdf5_wrapper">&lt;code>get_DynamicTensors_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.save_DynamicTensors_to_hdf5">&lt;code>save_DynamicTensors_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html">principia_materia.phonon_id.fd_series module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.FDSeries">&lt;code>FDSeries&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.FDSeries.create_jobs">&lt;code>FDSeries.create_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.FDSeries.project_fd_results">&lt;code>FDSeries.project_fd_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.FDSeries.set_deltas">&lt;code>FDSeries.set_deltas()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.FDSeries.set_errortail_results">&lt;code>FDSeries.set_errortail_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.FDSeries.set_jobname_prefix">&lt;code>FDSeries.set_jobname_prefix()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.FDSeries.set_measurement_alias">&lt;code>FDSeries.set_measurement_alias()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.FDSeries.set_measurements">&lt;code>FDSeries.set_measurements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.FDSeries.set_results">&lt;code>FDSeries.set_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.FDSeries._fd_results">&lt;code>FDSeries._fd_results&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.format_delta_dirname">&lt;code>format_delta_dirname()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.get_FDSeries_from_hdf5">&lt;code>get_FDSeries_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.get_FDSeries_hdf5_wrapper">&lt;code>get_FDSeries_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.get_FDSeries_results_hdf5_wrapper">&lt;code>get_FDSeries_results_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.save_FDSeries_results_to_hdf5">&lt;code>save_FDSeries_results_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fd_series.html#principia_materia.phonon_id.fd_series.save_FDSeries_to_hdf5">&lt;code>save_FDSeries_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html">principia_materia.phonon_id.finite_displacements module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements">&lt;code>FiniteDisplacements&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements.add_delta">&lt;code>FiniteDisplacements.add_delta()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements.compute_finite_displacements">&lt;code>FiniteDisplacements.compute_finite_displacements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements.create_jobs">&lt;code>FiniteDisplacements.create_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements.delta">&lt;code>FiniteDisplacements.delta&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements.get_jobname">&lt;code>FiniteDisplacements.get_jobname&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements.set_delta">&lt;code>FiniteDisplacements.set_delta()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements.set_displacement_vectors">&lt;code>FiniteDisplacements.set_displacement_vectors()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements.set_jobname_template">&lt;code>FiniteDisplacements.set_jobname_template()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements.set_jobs">&lt;code>FiniteDisplacements.set_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements.set_raw_results">&lt;code>FiniteDisplacements.set_raw_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.FiniteDisplacements.uniq_displacements">&lt;code>FiniteDisplacements.uniq_displacements&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.get_FD_from_configuration">&lt;code>get_FD_from_configuration()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.get_fd_config_hdf5_wrapper">&lt;code>get_fd_config_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.get_fd_config_yaml_wrapper">&lt;code>get_fd_config_yaml_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.get_fd_results_hdf5_wrapper">&lt;code>get_fd_results_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.get_fd_results_yaml_wrapper">&lt;code>get_fd_results_yaml_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.save_FD_config_to_hdf5">&lt;code>save_FD_config_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.finite_displacements.html#principia_materia.phonon_id.finite_displacements.save_FD_config_to_yaml">&lt;code>save_FD_config_to_yaml()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html">principia_materia.phonon_id.fourier_interpolation module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation">&lt;code>FourierInterpolation&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.analytic_derivative_dynamic_tensor">&lt;code>FourierInterpolation.analytic_derivative_dynamic_tensor()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.copy">&lt;code>FourierInterpolation.copy()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.fourier_transform">&lt;code>FourierInterpolation.fourier_transform()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.from_dynamic_tensors">&lt;code>FourierInterpolation.from_dynamic_tensors()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.get_Phi">&lt;code>FourierInterpolation.get_Phi()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.get_Phi_WS_at_Tpoint">&lt;code>FourierInterpolation.get_Phi_WS_at_Tpoint()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.get_Phi_WS_dict">&lt;code>FourierInterpolation.get_Phi_WS_dict()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.get_Tindex">&lt;code>FourierInterpolation.get_Tindex()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.get_Tpoints">&lt;code>FourierInterpolation.get_Tpoints()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.interpolate_Qpoint">&lt;code>FourierInterpolation.interpolate_Qpoint()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.prepend_hiden_t">&lt;code>FourierInterpolation.prepend_hiden_t()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.set_D">&lt;code>FourierInterpolation.set_D()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.set_Phi">&lt;code>FourierInterpolation.set_Phi()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.set_Wigner_Seitz_map">&lt;code>FourierInterpolation.set_Wigner_Seitz_map()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.set_dipoledipole_contribution">&lt;code>FourierInterpolation.set_dipoledipole_contribution()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation.set_irreducible_D">&lt;code>FourierInterpolation.set_irreducible_D()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.get_FourierInterpolation_from_hdf5">&lt;code>get_FourierInterpolation_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.get_FourierInterpolation_hdf5_wrapper">&lt;code>get_FourierInterpolation_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.save_FourierInterpolation_to_hdf5">&lt;code>save_FourierInterpolation_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html">principia_materia.phonon_id.frozen_phonons module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons">&lt;code>FrozenPhonons&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.check_supercell">&lt;code>FrozenPhonons.check_supercell()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.create_jobs">&lt;code>FrozenPhonons.create_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.derivative_order">&lt;code>FrozenPhonons.derivative_order&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.get_dynamic_tensor">&lt;code>FrozenPhonons.get_dynamic_tensor()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.order">&lt;code>FrozenPhonons.order&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.set_displacements">&lt;code>FrozenPhonons.set_displacements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.set_displacements_basis">&lt;code>FrozenPhonons.set_displacements_basis()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.set_errortail_results">&lt;code>FrozenPhonons.set_errortail_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons._fp_errortail">&lt;code>FrozenPhonons._fp_errortail&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.set_realspace_displacements">&lt;code>FrozenPhonons.set_realspace_displacements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.realdisp_cs_index">&lt;code>FrozenPhonons.realdisp_cs_index&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.realdisp_transformation_matrices">&lt;code>FrozenPhonons.realdisp_transformation_matrices&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.realdisp_associated_displacements">&lt;code>FrozenPhonons.realdisp_associated_displacements&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons.set_results">&lt;code>FrozenPhonons.set_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.FrozenPhonons._fp_results">&lt;code>FrozenPhonons._fp_results&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.LoneQ_FP">&lt;code>LoneQ_FP&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.LoneQ_FP.set_displacements">&lt;code>LoneQ_FP.set_displacements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.LoneQ_FP.set_displacements_basis">&lt;code>LoneQ_FP.set_displacements_basis()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.LoneQ_FP.set_dynamic_tensor">&lt;code>LoneQ_FP.set_dynamic_tensor()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.LoneQ_FP._dynamic_tensor">&lt;code>LoneQ_FP._dynamic_tensor&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.LoneQ_FP.set_naive_displacements">&lt;code>LoneQ_FP.set_naive_displacements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.LoneQ_FP.set_naive_displacements_basis">&lt;code>LoneQ_FP.set_naive_displacements_basis()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.find_realspace_displacements">&lt;code>find_realspace_displacements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.find_unique">&lt;code>find_unique()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.format_irrep_instances">&lt;code>format_irrep_instances()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.format_measurement_label">&lt;code>format_measurement_label()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.get_FrozenPhonons_hdf5_wrapper">&lt;code>get_FrozenPhonons_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.get_LoneQ_from_hdf5">&lt;code>get_LoneQ_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.get_dynamic_tensor_wrapper">&lt;code>get_dynamic_tensor_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.is_qpoint_real">&lt;code>is_qpoint_real()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.load_fp_errortails">&lt;code>load_fp_errortails()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.make_displacement_identifier">&lt;code>make_displacement_identifier()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.save_LoneQ_to_hdf5">&lt;code>save_LoneQ_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.save_dynamic_tensor_to_hdf5">&lt;code>save_dynamic_tensor_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.frozen_phonons.html#principia_materia.phonon_id.frozen_phonons.save_fp_errortails">&lt;code>save_fp_errortails()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html">principia_materia.phonon_id.hsbid module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID">&lt;code>HSBID&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.QpointsN">&lt;code>HSBID.QpointsN&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.compute_irreducible_derivatives">&lt;code>HSBID.compute_irreducible_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.irreducible_derivatives">&lt;code>HSBID.irreducible_derivatives&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.create_jobs">&lt;code>HSBID.create_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.derivative_order">&lt;code>HSBID.derivative_order&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.find_measurements">&lt;code>HSBID.find_measurements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.get_dynamic_tensors">&lt;code>HSBID.get_dynamic_tensors()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.get_fourier_interpolation">&lt;code>HSBID.get_fourier_interpolation()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.get_irreducible_derivative_names">&lt;code>HSBID.get_irreducible_derivative_names()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.load_hsbid">&lt;code>HSBID.load_hsbid()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.set_chainrule_derivatives">&lt;code>HSBID.set_chainrule_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID._chainrule">&lt;code>HSBID._chainrule&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.set_errortail_results">&lt;code>HSBID.set_errortail_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.set_hsbid">&lt;code>HSBID.set_hsbid()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.HSBID.set_results">&lt;code>HSBID.set_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.find_hierarchical_supercells">&lt;code>find_hierarchical_supercells()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.format_supa_dirname">&lt;code>format_supa_dirname()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.get_HSBID_from_hdf5">&lt;code>get_HSBID_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.get_HSBID_hdf5_wrapper">&lt;code>get_HSBID_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.hsbid.html#principia_materia.phonon_id.hsbid.save_HSBID_to_hdf5">&lt;code>save_HSBID_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html">principia_materia.phonon_id.lid module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP">&lt;code>LoneID_FP&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP.get_irreducible_derivative_names">&lt;code>LoneID_FP.get_irreducible_derivative_names()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP.get_irreducible_derivatives">&lt;code>LoneID_FP.get_irreducible_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP.irreducible_derivatives">&lt;code>LoneID_FP.irreducible_derivatives&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP.set_analytic_tensor">&lt;code>LoneID_FP.set_analytic_tensor()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP._adt">&lt;code>LoneID_FP._adt&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP.set_displacements">&lt;code>LoneID_FP.set_displacements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP.set_displacements_basis">&lt;code>LoneID_FP.set_displacements_basis()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP.set_dynamic_tensor">&lt;code>LoneID_FP.set_dynamic_tensor()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP._dynamic_tensor">&lt;code>LoneID_FP._dynamic_tensor&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP.set_irreducible_derivatives">&lt;code>LoneID_FP.set_irreducible_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.LoneID_FP.set_target_irrep_products">&lt;code>LoneID_FP.set_target_irrep_products()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.get_LoneID_from_hdf5">&lt;code>get_LoneID_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.get_LoneID_hdf5_wrapper">&lt;code>get_LoneID_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid.html#principia_materia.phonon_id.lid.save_LoneID_to_hdf5">&lt;code>save_LoneID_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html">principia_materia.phonon_id.lid_mesh module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.LIDMesh">&lt;code>LIDMesh&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.LIDMesh.create_jobs">&lt;code>LIDMesh.create_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.LIDMesh.get_dynamic_tensors">&lt;code>LIDMesh.get_dynamic_tensors()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.LIDMesh.get_fourier_interpolation">&lt;code>LIDMesh.get_fourier_interpolation()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.LIDMesh.get_irreducible_derivative_names">&lt;code>LIDMesh.get_irreducible_derivative_names()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.LIDMesh.get_irreducible_derivatives">&lt;code>LIDMesh.get_irreducible_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.LIDMesh.irreducible_derivatives">&lt;code>LIDMesh.irreducible_derivatives&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.LIDMesh.load_lid">&lt;code>LIDMesh.load_lid()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.LIDMesh.set_errortail_results">&lt;code>LIDMesh.set_errortail_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.LIDMesh.set_lid">&lt;code>LIDMesh.set_lid()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.LIDMesh.set_results">&lt;code>LIDMesh.set_results()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.get_LIDMesh_config_wrapper">&lt;code>get_LIDMesh_config_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.get_LIDMesh_from_hdf5">&lt;code>get_LIDMesh_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.get_LIDMesh_from_yaml">&lt;code>get_LIDMesh_from_yaml()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.get_LIDMesh_hdf5_wrapper">&lt;code>get_LIDMesh_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.save_LIDMesh_to_hdf5">&lt;code>save_LIDMesh_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.lid_mesh.html#principia_materia.phonon_id.lid_mesh.save_LIDMesh_to_yaml">&lt;code>save_LIDMesh_to_yaml()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.little_group_adt.html">principia_materia.phonon_id.little_group_adt module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.little_group_adt.html#principia_materia.phonon_id.little_group_adt.LittleGroupADT">&lt;code>LittleGroupADT&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.little_group_adt.html#principia_materia.phonon_id.little_group_adt.LittleGroupADT.set_irreducible_derivatives">&lt;code>LittleGroupADT.set_irreducible_derivatives()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.little_group_adt.html#principia_materia.phonon_id.little_group_adt.LittleGroupADT.set_qpoint_displacement_rep">&lt;code>LittleGroupADT.set_qpoint_displacement_rep()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.little_group_adt.html#principia_materia.phonon_id.little_group_adt.get_LittleGroupADT_from_hdf5">&lt;code>get_LittleGroupADT_from_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.little_group_adt.html#principia_materia.phonon_id.little_group_adt.inverse_qpoint">&lt;code>inverse_qpoint()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.little_group_adt.html#principia_materia.phonon_id.little_group_adt.save_LittleGroupADT_to_hdf5">&lt;code>save_LittleGroupADT_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_db.html">principia_materia.phonon_id.phonon_db module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_db.html#principia_materia.phonon_id.phonon_db.create_BID_table">&lt;code>create_BID_table()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_db.html#principia_materia.phonon_id.phonon_db.create_LID_table">&lt;code>create_LID_table()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_db.html#principia_materia.phonon_id.phonon_db.create_metadata_table">&lt;code>create_metadata_table()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_db.html#principia_materia.phonon_id.phonon_db.create_strain_table">&lt;code>create_strain_table()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_report_util.html">principia_materia.phonon_id.phonon_report_util module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_report_util.html#principia_materia.phonon_id.phonon_report_util.summarize_bid">&lt;code>summarize_bid()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_report_util.html#principia_materia.phonon_id.phonon_report_util.summarize_hsbid">&lt;code>summarize_hsbid()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_report_util.html#principia_materia.phonon_id.phonon_report_util.summarize_lid">&lt;code>summarize_lid()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_report_util.html#principia_materia.phonon_id.phonon_report_util.summarize_lid_mesh">&lt;code>summarize_lid_mesh()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_report_util.html#principia_materia.phonon_id.phonon_report_util.summarize_structure">&lt;code>summarize_structure()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_tools.html">principia_materia.phonon_id.phonon_tools module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_tools.html#principia_materia.phonon_id.phonon_tools.adjust_eigenvectors_subspace">&lt;code>adjust_eigenvectors_subspace()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_tools.html#principia_materia.phonon_id.phonon_tools.compute_eigenvalues">&lt;code>compute_eigenvalues()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_tools.html#principia_materia.phonon_id.phonon_tools.compute_phonon_frequencies_from_eigenvalues">&lt;code>compute_phonon_frequencies_from_eigenvalues()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_tools.html#principia_materia.phonon_id.phonon_tools.compute_phonons">&lt;code>compute_phonons()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_tools.html#principia_materia.phonon_id.phonon_tools.find_degenerate_frequencies">&lt;code>find_degenerate_frequencies()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_tools.html#principia_materia.phonon_id.phonon_tools.get_mass_matrix">&lt;code>get_mass_matrix()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.phonon_tools.html#principia_materia.phonon_id.phonon_tools.multiply_mass_matrix">&lt;code>multiply_mass_matrix()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html">principia_materia.phonon_id.strained_finite_displacements module&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements">&lt;code>StrainedFiniteDisplacements&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.create_jobs">&lt;code>StrainedFiniteDisplacements.create_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.delta">&lt;code>StrainedFiniteDisplacements.delta&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.get_jobname">&lt;code>StrainedFiniteDisplacements.get_jobname&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.order">&lt;code>StrainedFiniteDisplacements.order&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.set_delta">&lt;code>StrainedFiniteDisplacements.set_delta()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.set_displacement_vectors">&lt;code>StrainedFiniteDisplacements.set_displacement_vectors()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.set_finite_difference">&lt;code>StrainedFiniteDisplacements.set_finite_difference()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.set_jobname_template">&lt;code>StrainedFiniteDisplacements.set_jobname_template()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.set_jobs">&lt;code>StrainedFiniteDisplacements.set_jobs()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.set_strain">&lt;code>StrainedFiniteDisplacements.set_strain()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.set_strain_delta">&lt;code>StrainedFiniteDisplacements.set_strain_delta()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.set_strain_internal_displacements">&lt;code>StrainedFiniteDisplacements.set_strain_internal_displacements()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.strain_delta">&lt;code>StrainedFiniteDisplacements.strain_delta&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.StrainedFiniteDisplacements.uniq_strains">&lt;code>StrainedFiniteDisplacements.uniq_strains&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.get_StrainedFD_from_configuration">&lt;code>get_StrainedFD_from_configuration()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.get_strain_fd_config_hdf5_wrapper">&lt;code>get_strain_fd_config_hdf5_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.get_strain_fd_config_yaml_wrapper">&lt;code>get_strain_fd_config_yaml_wrapper()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.save_StrainedFD_config_to_hdf5">&lt;code>save_StrainedFD_config_to_hdf5()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="principia_materia.phonon_id.strained_finite_displacements.html#principia_materia.phonon_id.strained_finite_displacements.save_StrainedFD_config_to_yaml">&lt;code>save_StrainedFD_config_to_yaml()&lt;/code>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="module-contents">Module contents&lt;/h2></description></item><item><title>Docs: Module principia_materia.phonon_id.analytic_dynamic_tensor</title><link>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.analytic_dynamic_tensor.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.analytic_dynamic_tensor.html</guid><description>
&lt;h1 id="principia_materiaphonon_idanalytic_dynamic_tensor-module">principia_materia.phonon_id.analytic_dynamic_tensor module&lt;/h1>
&lt;h3 id="_class_-principia_materiaphonon_idanalytic_dynamic_tensoranalyticdynamictensorstructure-pg-qpoint-tol1e-06">&lt;em>class&lt;/em> principia_materia.phonon_id.analytic_dynamic_tensor.AnalyticDynamicTensor(structure, pg, Qpoint, tol=1e-06)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>Abstract class for analytic representation of dynamic tensor under group theory.&lt;/p>
&lt;p>Exploits the group theory to find the irreducible derivatives, and construct the dynamic
tensor analytically in both symmetrized basis and naive basis. The analytic form of the
dynamic tensor is stored in a vectorized form to facilitate further computation.&lt;/p>
&lt;p>The analytic tensor allows us to perform further analysis of the dynamics and thermodynamics
of the crystal.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>structure&lt;/strong> (CrystalFTG object or a structure file of &lt;a href="principia_materia.translation_group.crystal_ftg.html#principia_materia.translation_group.crystal_ftg.CrystalFTG">CrystalFTG&lt;/a>) – The crystal structure.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pg&lt;/strong> (str or PointGroup object) – The point group.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Qpoint&lt;/strong> (array of Fraction or a &lt;code>parse_array&lt;/code> supported Fraction array.) – The Q-point&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, optional, default to 1.0E-6) – Error tolerence.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-qpoint">&lt;em>property&lt;/em> Qpoint()&lt;/h4>
&lt;h4 id="compute_tensorirreducible_derivatives-symmetrized_basisfalse">compute_tensor(irreducible_derivatives, symmetrized_basis=False)&lt;/h4>
&lt;p>Substute irreducible derivatives into vectorized tensor to compute dynamic tensor.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>irreducible_derivatives&lt;/strong> (array of complex, shape(self.n_irreducible_derivatives, )) – The value of irreducible derivatives to substitute in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>symmetrized_basis&lt;/strong> (bool, optional, default to False) – Whether to return the tensor in symmetrized basis or in naive basis.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>tensor&lt;/strong> – The resulting dynamic tensor after the substitution.
If &lt;code>symmetrized_basis==True&lt;/code>, shape equals self.symmetrized_tensor_shape,
If &lt;code>symmetrized_basis==False&lt;/code>, shape equals self.tensor_shape.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of complex&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_irreducible_basis_rownameqpoint">get_irreducible_basis_rowname(qpoint)&lt;/h4>
&lt;p>Get the list of names of the rows for the irreducible basis&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>qpoint&lt;/strong> (array of &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>, shape(dim, )) – A q-point of the Q-point that is being studied.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_irrepsqpoint">get_irreps(qpoint)&lt;/h4>
&lt;p>Get the list of irreducible representations and it’s instance number of a q-point.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>qpoint&lt;/strong> (array of &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>, shape(dim, )) – A q-point of the Q-point that is being studied.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_rotation_matrixqpoint">get_rotation_matrix(qpoint)&lt;/h4>
&lt;p>Get the rotation matrix from symmetrized basis to naive basis of a q-point within the Q-point.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>qpoint&lt;/strong> (array of &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>, shape(dim, )) – A q-point of the Q-point that is being studied.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-irreducible_derivative_names">&lt;em>property&lt;/em> irreducible_derivative_names()&lt;/h4>
&lt;p>The list of names of of all irreducible derivatives in the tensor, also reference for the vectorized tensors.&lt;/p>
&lt;h4 id="_property_-n_irreducible_derivatives">&lt;em>property&lt;/em> n_irreducible_derivatives()&lt;/h4>
&lt;p>Number of irreducible derivatives&lt;/p>
&lt;h4 id="_property_-order">&lt;em>property&lt;/em> order()&lt;/h4>
&lt;p>The order of the irreducible derivatives.&lt;/p>
&lt;h4 id="_property_-qpoint_displacement_rep">&lt;em>property&lt;/em> qpoint_displacement_rep()&lt;/h4>
&lt;h4 id="set_irreducible_derivative_namesirreducible_derivative_names-allow_missingfalse">set_irreducible_derivative_names(irreducible_derivative_names, allow_missing=False)&lt;/h4>
&lt;p>Set the irreducible derivatives names.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>irreducible_derivative_names&lt;/strong> (list of tuples) – The names of irreducible derivatives.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_abstract_-set_irreducible_derivatives">&lt;em>abstract&lt;/em> set_irreducible_derivatives()&lt;/h4>
&lt;p>Constructs irreducible derivatives as well as the coefficients for them in the symmetrized basis.&lt;/p>
&lt;h4 id="_abstract_-set_qpoint_displacement_rep">&lt;em>abstract&lt;/em> set_qpoint_displacement_rep()&lt;/h4>
&lt;p>Find all irreducible derivatives allowed in the given Qpoint and PointGroup.&lt;/p>
&lt;h4 id="set_vectorized_tensorallow_missingfalse">set_vectorized_tensor(allow_missing=False)&lt;/h4>
&lt;p>Constructed vectorized tensor from computed irreducible derivatives.&lt;/p>
&lt;h4 id="solve_irreducible_derivativesdynamic_tensor-symmetrized_basisfalse-tolnone">solve_irreducible_derivatives(dynamic_tensor, symmetrized_basis=False, tol=None)&lt;/h4>
&lt;p>Solve for irreducible derivatives from the numerical tensor.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>dynamic_tensor&lt;/strong> (array of complex) – The numerical dynamic tensor to solve irreducible derivatives with.
If &lt;code>symmetrized_basis==True&lt;/code>, &lt;code>dynamic_tensor.shape == self.symmetrized_tensor_shape&lt;/code>,
If &lt;code>symmetrized_basis==False&lt;/code>, &lt;code>dynamic_tensor.shape == self.tensor_shape&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>symmetrized_basis&lt;/strong> (bool, optional, default to False) – If True, the input &lt;code>dynamic_tensor&lt;/code> is in symmetrized basis,
if False, the input is in naive basis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, optional, default to None) – Error tolerance, if None, use &lt;code>self.tol&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>irreducible_derivatives&lt;/strong> (&lt;em>array of complex, shape(self.n_irreducible_derivatives, )&lt;/em>) – The least square result of the irreducible derivatives.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>residues&lt;/strong> (&lt;em>float&lt;/em>) – The residues of the least square.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>rank&lt;/strong> (&lt;em>int&lt;/em>) – The rank of the reshaped analytic tensor,
which equals the number of irreducible derivatives.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>s&lt;/strong> (&lt;em>array of complex&lt;/em>) – Singular values of the reshaped analytic tensor.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-symmetrized_tensor_shape">&lt;em>property&lt;/em> symmetrized_tensor_shape()&lt;/h4>
&lt;p>The shape of the dynamic tensor in symmetrized basis.&lt;/p>
&lt;h4 id="_property_-symmetrized_vectorized_tensor">&lt;em>property&lt;/em> symmetrized_vectorized_tensor()&lt;/h4>
&lt;p>Vectorized analytic dynamic tensor in symmetrized basis.&lt;/p>
&lt;h4 id="_property_-tensor_shape">&lt;em>property&lt;/em> tensor_shape()&lt;/h4>
&lt;p>The shape of the dynamic tensor in naive basis.&lt;/p>
&lt;h4 id="_property_-unique_qpoints">&lt;em>property&lt;/em> unique_qpoints()&lt;/h4>
&lt;p>Unique q-points in the Q-point.&lt;/p>
&lt;h4 id="_property_-vectorized_tensor">&lt;em>property&lt;/em> vectorized_tensor()&lt;/h4>
&lt;p>Vectorized analytic dynamic tensor in naive basis.&lt;/p>
&lt;h3 id="principia_materiaphonon_idanalytic_dynamic_tensorget_analyticdynamictensor_hdf5_wrapper">principia_materia.phonon_id.analytic_dynamic_tensor.get_AnalyticDynamicTensor_hdf5_wrapper()&lt;/h3>
&lt;p>HDF5 data wrapper for AnalyticDynamicTensor class.&lt;/p>
&lt;h3 id="principia_materiaphonon_idanalytic_dynamic_tensorget_irreduciblederivatives_hdf5_wrapper">principia_materia.phonon_id.analytic_dynamic_tensor.get_IrreducibleDerivatives_hdf5_wrapper()&lt;/h3>
&lt;p>HDF5 data wrapper for irreducible derivatives.&lt;/p></description></item><item><title>Docs: Module principia_materia.phonon_id.analytic_strain_tensor</title><link>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.analytic_strain_tensor.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.analytic_strain_tensor.html</guid><description>
&lt;h1 id="principia_materiaphonon_idanalytic_strain_tensor-module">principia_materia.phonon_id.analytic_strain_tensor module&lt;/h1>
&lt;h3 id="_class_-principia_materiaphonon_idanalytic_strain_tensoranalyticstraintensororder-pg-dim3-tol1e-06">&lt;em>class&lt;/em> principia_materia.phonon_id.analytic_strain_tensor.AnalyticStrainTensor(order, pg, dim=3, tol=1e-06)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;h4 id="compute_tensorirreducible_derivatives-symmetrized_basisfalse">compute_tensor(irreducible_derivatives, symmetrized_basis=False)&lt;/h4>
&lt;p>Substute irreducible derivatives into vectorized tensor to compute strain tensor.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>irreducible_derivatives&lt;/strong> (array of complex, shape(self.n_irreducible_derivatives, )) – The value of irreducible derivatives to substitute in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>symmetrized_basis&lt;/strong> (bool, optional, default to False) – Whether to return the tensor in symmetrized basis or in naive basis.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>tensor&lt;/strong> – The resulting strain tensor after the substitution.
If &lt;code>symmetrized_basis==True&lt;/code>, shape equals self.symmetrized_tensor_shape,
If &lt;code>symmetrized_basis==False&lt;/code>, shape equals self.tensor_shape.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of complex&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_irreducible_basis_rowname">get_irreducible_basis_rowname()&lt;/h4>
&lt;p>Get the list of names of the rows for the irreducible basis&lt;/p>
&lt;h4 id="get_irreps">get_irreps()&lt;/h4>
&lt;p>Get the list of irreducible representations and it’s instance number of the strain rep.&lt;/p>
&lt;h4 id="get_rotation_matrix">get_rotation_matrix()&lt;/h4>
&lt;p>Get the rotation matrix from symmetrized basis to naive basis of strain rep.&lt;/p>
&lt;h4 id="_property_-identity_subspace">&lt;em>property&lt;/em> identity_subspace()&lt;/h4>
&lt;h4 id="_property_-irreducible_derivative_names">&lt;em>property&lt;/em> irreducible_derivative_names()&lt;/h4>
&lt;p>The list of names of of all irreducible derivatives in the tensor, also reference for the vectorized tensors.&lt;/p>
&lt;h4 id="_property_-irreducible_strains">&lt;em>property&lt;/em> irreducible_strains()&lt;/h4>
&lt;h4 id="_property_-n_irreducible_derivatives">&lt;em>property&lt;/em> n_irreducible_derivatives()&lt;/h4>
&lt;p>Number of irreducible derivatives&lt;/p>
&lt;h4 id="set_irreducible_derivative_namesirreducible_derivative_names">set_irreducible_derivative_names(irreducible_derivative_names)&lt;/h4>
&lt;p>Set the irreducible derivatives names.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>irreducible_derivative_names&lt;/strong> (list of tuples) – The names of irreducible derivatives.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_irreducible_derivativesuse_int_irrvecfalse">set_irreducible_derivatives(use_int_irrvec=False)&lt;/h4>
&lt;p>The irreducible derivatives is constructued as well as the coefficients for them in the symmetrized basis.&lt;/p>
&lt;h4 id="set_irreducible_strains">set_irreducible_strains()&lt;/h4>
&lt;h4 id="set_strain_rep">set_strain_rep()&lt;/h4>
&lt;h4 id="set_vectorized_tensor">set_vectorized_tensor()&lt;/h4>
&lt;p>Constructed vectorized tensor from computed irreducible derivatives.&lt;/p>
&lt;h4 id="solve_irreducible_derivativesstrain_tensor-symmetrized_basisfalse-tolnone">solve_irreducible_derivatives(strain_tensor, symmetrized_basis=False, tol=None)&lt;/h4>
&lt;p>Solve for irreducible derivatives from the numerical tensor.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>strain_tensor&lt;/strong> (array of complex) – The numerical strain tensor to solve irreducible derivatives with.
If &lt;code>symmetrized_basis==True&lt;/code>, &lt;code>strain_tensor.shape == self.symmetrized_tensor_shape&lt;/code>,
If &lt;code>symmetrized_basis==False&lt;/code>, &lt;code>strain_tensor.shape == self.tensor_shape&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>symmetrized_basis&lt;/strong> (bool, optional, default to False) – If True, the input &lt;code>strain_tensor&lt;/code> is in symmetrized basis,
if False, the input is in naive basis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, optional, default to None) – Error tolerance, if None, use &lt;code>self.tol&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>irreducible_derivatives&lt;/strong> (&lt;em>array of complex, shape(self.n_irreducible_derivatives, )&lt;/em>) – The least square result of the irreducible derivatives.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>residues&lt;/strong> (&lt;em>float&lt;/em>) – The residues of the least square.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>rank&lt;/strong> (&lt;em>int&lt;/em>) – The rank of the reshaped analytic tensor,
which equals the number of irreducible derivatives.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>s&lt;/strong> (&lt;em>array of complex&lt;/em>) – Singular values of the reshaped analytic tensor.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-symmetrized_tensor_shape">&lt;em>property&lt;/em> symmetrized_tensor_shape()&lt;/h4>
&lt;p>The shape of the strain tensor in symmetrized basis.&lt;/p>
&lt;h4 id="_property_-symmetrized_vectorized_tensor">&lt;em>property&lt;/em> symmetrized_vectorized_tensor()&lt;/h4>
&lt;p>Vectorized analytic strain tensor in symmetrized basis.&lt;/p>
&lt;h4 id="_property_-tensor_shape">&lt;em>property&lt;/em> tensor_shape()&lt;/h4>
&lt;p>The shape of the strain tensor in naive basis.&lt;/p>
&lt;h4 id="_property_-vectorized_tensor">&lt;em>property&lt;/em> vectorized_tensor()&lt;/h4>
&lt;p>Vectorized analytic strain tensor in naive basis.&lt;/p></description></item><item><title>Docs: Module principia_materia.phonon_id.analytic_tensors</title><link>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.analytic_tensors.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.analytic_tensors.html</guid><description>
&lt;h1 id="principia_materiaphonon_idanalytic_tensors-module">principia_materia.phonon_id.analytic_tensors module&lt;/h1>
&lt;h3 id="_class_-principia_materiaphonon_idanalytic_tensorsanalytictensorsstructure-supa-order-pgc1-tol1e-06">&lt;em>class&lt;/em> principia_materia.phonon_id.analytic_tensors.AnalyticTensors(structure, supa, order, pg=&amp;lsquo;C1&amp;rsquo;, tol=1e-06)&lt;/h3>
&lt;p>Bases: &lt;a href="principia_materia.phonon_id.dynamic_tensors.html#principia_materia.phonon_id.dynamic_tensors.DynamicTensors">&lt;code>DynamicTensors&lt;/code>&lt;/a>&lt;/p>
&lt;p>Analytic dynamic tensor of a reciprocal mesh at a given order.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>structure&lt;/strong> (CrystalFTG object or a structure file of &lt;a href="principia_materia.translation_group.crystal_ftg.html#principia_materia.translation_group.crystal_ftg.CrystalFTG">CrystalFTG&lt;/a>) – The crystal structure.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>supa&lt;/strong> (array of int, shape(dim, dim)) – The supercell matrix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>order&lt;/strong> (int) – Order of the dynamic tensor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pg&lt;/strong> (str or PointGroup object) – The point group.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, optional, default to 1.0E-6) – Error tolerence.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="compute_d_from_idirreducible_derivatives">compute_D_from_ID(irreducible_derivatives)&lt;/h4>
&lt;p>Compute D by substituting in irreducible derivatives.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>irreducible_derivatives&lt;/strong> (array of complex, shape(n_irreducible_derivatives, )) – The values of the irreducible derivatives.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="compute_id_from_ddynamic_tensors">compute_ID_from_D(dynamic_tensors)&lt;/h4>
&lt;p>Compute irreducible derivatives from dynamic tensors.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>dynamic_tensors&lt;/strong> (array of complex, shape(len(self._D), norbitals, &amp;hellip;, norbitals)) – The dynamic tensors to compute irreducible derivatives from.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="copy">copy()&lt;/h4>
&lt;p>Make a copy&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>new&lt;/strong> – A copy of AnalyticTensors object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>AnalyticTensors&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-irreducible_derivative_names">&lt;em>property&lt;/em> irreducible_derivative_names()&lt;/h4>
&lt;p>List of names of irreducible derivatives.&lt;/p>
&lt;h4 id="_property_-n_irreducible_derivatives">&lt;em>property&lt;/em> n_irreducible_derivatives()&lt;/h4>
&lt;p>Number of irreducible derivatives.&lt;/p>
&lt;h4 id="set_adtfull_symmetryfalse-conjugatefalse-verbosefalse">set_ADT(full_symmetry=False, conjugate=False, verbose=False)&lt;/h4>
&lt;p>Construct analytic dynamic tensors of the irreducible Q-points.&lt;/p>
&lt;p>Construct analytic dynamic tensor of the irreducible Q-points, collect all
irreducible derivatives in a list, and vectorize all the analytic tensors
in the irreducible zone with respect to the irreducible derivatives list.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>full_symmetry&lt;/strong> (bool, optional, default to False) – If True use full symmetry approach to find the irreducible derivatives;
If False use little group approach instead.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>verbose&lt;/strong> (bool, optional, default to False) – Whether to print out steps verbally.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_dqpoints-d">set_D(Qpoints, D)&lt;/h4>
&lt;p>Set vectorized dynamic tensors.&lt;/p>
&lt;h4 id="set_irreducible_dd">set_irreducible_D(D)&lt;/h4>
&lt;p>Set vectorized dynamic tensors for irreducible Q-points.&lt;/p>
&lt;h3 id="principia_materiaphonon_idanalytic_tensorsget_analytictensors_from_hdf5h5file-tol1e-06">principia_materia.phonon_id.analytic_tensors.get_AnalyticTensors_from_hdf5(h5file, tol=1e-06)&lt;/h3>
&lt;p>Load AnalyticTensors from HDF5 file.&lt;/p>
&lt;h3 id="principia_materiaphonon_idanalytic_tensorsget_analytictensors_hdf5_wrapper">principia_materia.phonon_id.analytic_tensors.get_AnalyticTensors_hdf5_wrapper()&lt;/h3>
&lt;p>HDF5 data wrapper for AnalyticTensors class.&lt;/p>
&lt;h3 id="principia_materiaphonon_idanalytic_tensorssave_analytictensors_to_hdf5obj-h5fileanalytic_tensorshdf5-overwritefalse">principia_materia.phonon_id.analytic_tensors.save_AnalyticTensors_to_hdf5(obj, h5file=&amp;lsquo;analytic_tensors.hdf5&amp;rsquo;, overwrite=False)&lt;/h3>
&lt;p>Save AnalyticTensors data into HDF5 file.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>obj&lt;/strong> (AnalyticTensors) – A AnalyticTensors object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>h5file&lt;/strong> (str or h5py.File/h5py.Group obejct, optional, default to &amp;ldquo;dynamic_tensors.hdf5&amp;rdquo;) – Path to a HDF5 file or a h5py.File/h5py.Group object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>overwrite&lt;/strong> (bool, optional, default to False) – When the file exists, whether to replace the content of the file
with the content to be saved.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.phonon_id.anharmonic_interpolation</title><link>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.anharmonic_interpolation.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.anharmonic_interpolation.html</guid><description>
&lt;h1 id="principia_materiaphonon_idanharmonic_interpolation-module">principia_materia.phonon_id.anharmonic_interpolation module&lt;/h1>
&lt;h3 id="_class_-principia_materiaphonon_idanharmonic_interpolationanharmincinterpolationstructure-tol1e-06">&lt;em>class&lt;/em> principia_materia.phonon_id.anharmonic_interpolation.AnharmincInterpolation(structure, tol=1e-06)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>Interpolation of anharmonic phonon interaction coefficients.&lt;/p>
&lt;p>This class will store PhiN of arbitrary order together and perform interpolation to arbitrary Q.
And generate phonon interaction tensors in desired conventen &amp;amp; basis.&lt;/p>
&lt;h4 id="analytic_derivative_dynamic_matrixqpoints">analytic_derivative_dynamic_matrix(Qpoints)&lt;/h4>
&lt;p>Analytical derivatives of the dynamical matrices wrt Q-points.&lt;/p>
&lt;p>The short range part is calculated as as following.&lt;/p>
&lt;p>$$
\frac{\partial\hat D_{\mathbf{K}}}{\partial K_\alpha} =
\sum_{\mathbf{y}} \imag T_\alpha e^{\imag \mathbf{K}
\cdot \mathbf{y}\hat a} \hat \Phi_{\mathbf{y}}
$$&lt;/p>
&lt;h4 id="_property_-existing_orders">&lt;em>property&lt;/em> existing_orders()&lt;/h4>
&lt;h4 id="fd_derivative_dynamic_matrixqpoints-amplitute1e-05">fd_derivative_dynamic_matrix(qpoints, amplitute=1e-05)&lt;/h4>
&lt;p>Derivative dynamic matrix using central finite difference method.&lt;/p>
&lt;h4 id="get_dq2qpoints">get_Dq2(qpoints)&lt;/h4>
&lt;p>Get second order dynamic matrices of input q-points.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>qpoints&lt;/strong> (array of float or &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>, shape(dim, ) or (1, dim) or (N, 1, dim)) – q-points to to compute dynamic matrices. The hidden q-points will be prepended,
and Fourier transform will be executed.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_dqnqpoints-order">get_DqN(Qpoints, order)&lt;/h4>
&lt;p>Get the DqN tensor of a given q at a given order.&lt;/p>
&lt;h4 id="get_phiorder">get_Phi(order)&lt;/h4>
&lt;p>Get the PhiN of a given order.&lt;/p>
&lt;h4 id="get_phononsqpoints-return_eigenvectorstrue-unitsthz">get_phonons(qpoints, return_eigenvectors=True, units=&amp;lsquo;THz&amp;rsquo;)&lt;/h4>
&lt;h4 id="group_velocityqpoints-fdfalse-amplitute1e-05-tol1e-05-unitsthz">group_velocity(qpoints, fd=False, amplitute=1e-05, tol=1e-05, units=&amp;lsquo;THz&amp;rsquo;)&lt;/h4>
&lt;p>Compute group velocity using either the analytic derivative or CFD.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>qpoints&lt;/strong> (array of floats, shape(N, 3) or coordinate parse compatible format.) – Qpoints to evaluate group velocity at.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>amplitute&lt;/strong> (float) – Displacement amplitute on qpoints.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float) – Tolerance.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>units&lt;/strong> (str) – Unit of phonon frequencies.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>gv&lt;/strong> – Group velocity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(len(qpoints), norbitals, 3)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="heat_capacityqpoints-temperature-phonon_unitsev-phonon_cutoffnone-tol00001">heat_capacity(qpoints, temperature, phonon_units=&amp;lsquo;eV&amp;rsquo;, phonon_cutoff=None, tol=0.0001)&lt;/h4>
&lt;p>Mode heat capacity at given q-points and temperature.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>qpoints&lt;/strong> (array of float, shape(nqpoints, 3)) – q-points to evaulate the mode heat capacity&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>temperature&lt;/strong> (float or array of float, shape(ntemp)) – temperature to evaulate the mode heat capacity&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>cv&lt;/strong> – Mode heat capacity in units of eV/K.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(nqpoints, ntemp, norbitals)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_phiphi-order">set_Phi(Phi, order)&lt;/h4>
&lt;p>Add a Phi of a given order.&lt;/p>
&lt;h4 id="set_dipoleepsilon-q_directionnone">set_dipole(epsilon, q_direction=None)&lt;/h4>
&lt;h4 id="set_q_directionq_directionnone">set_q_direction(q_direction=None)&lt;/h4>
&lt;h3 id="principia_materiaphonon_idanharmonic_interpolationmode_heat_capacutyfrequencies-temperature-phonon_unitsthz-phonon_cutoffnone-tol00001">principia_materia.phonon_id.anharmonic_interpolation.mode_heat_capacuty(frequencies, temperature, phonon_units=&amp;lsquo;THz&amp;rsquo;, phonon_cutoff=None, tol=0.0001)&lt;/h3>
&lt;p>Compute mode heat capacity from phonon freuqencies.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>frequencies&lt;/strong> (array of float, shape(nqpoints, norbitals)) –&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>temperature&lt;/strong> (float or array of float, shape(ntemp)) –&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>cv&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(nqpoints, ntemp, norbitals)&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.phonon_id.bid</title><link>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.bid.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.bid.html</guid><description>
&lt;h1 id="principia_materiaphonon_idbid-module">principia_materia.phonon_id.bid module&lt;/h1>
&lt;h3 id="_class_-principia_materiaphonon_idbidbidstructure-supa-order-pgc1-full_symmetryfalse-hidden_order1-fdtypec-tol1e-06">&lt;em>class&lt;/em> principia_materia.phonon_id.bid.BID(structure, supa, order, pg=&amp;lsquo;C1&amp;rsquo;, full_symmetry=False, hidden_order=1, fdtype=&amp;lsquo;c&amp;rsquo;, tol=1e-06)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>Use Bundled Irreducible Derivatives approach to compute phonons and their interactions.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>structure&lt;/strong> (CrystalFTG object or a structure file of &lt;a href="principia_materia.translation_group.crystal_ftg.html#principia_materia.translation_group.crystal_ftg.CrystalFTG">CrystalFTG&lt;/a>) – The crystal structure.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>supa&lt;/strong> (array of int, shape(dim, dim)) – The supercell matrix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>order&lt;/strong> (int) – Order of the phonon interaction.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pg&lt;/strong> (str or PointGroup object, optional, default to &amp;ldquo;C1&amp;rdquo;) – The point group.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>full_symmetry&lt;/strong> (bool, optional, default to False) – If True, use full group analysis (not implemented yet).
If False, use little group analysis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>hidden_order&lt;/strong> (int, optional, default to 1) – The order of derivatives from first principles.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>fdtype&lt;/strong> (str, choice of [&amp;ldquo;c&amp;rdquo;, &amp;ldquo;f&amp;rdquo;, &amp;ldquo;b&amp;rdquo;]) – Type of finite displacement.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, optional, default to 1.0E-6) – Error tolerence.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="compute_irreducible_derivativesknown_id">compute_irreducible_derivatives(known_ID=[])&lt;/h4>
&lt;p>Compute irreducible derivatives with finite displacements result and chainrule matrices/tensors.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>known_ID&lt;/strong> (array of complex, shape(len(self._chainrule._known_ID_index), )) – The values of the known irreducible derivatives.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="irreducible_derivatives">irreducible_derivatives()&lt;/h4>
&lt;p>The values of all irreducible derivatives in the current system.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>array of complex shape(n_irreducible_derivatives, )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="create_jobsjob_handler-deltas-prefixnone-delta_formatfunction-format_delta_dirname-measurement_labelfunction-format_measurement_label-jobname_prefix-config_filefinite_displacementsyml-appendfalse-dry_runfalse">create_jobs(job_handler, deltas, prefix=None, delta_format=&lt;function format_delta_dirname>, measurement_label=&lt;function format_measurement_label>, jobname_prefix=&amp;rsquo;&amp;rsquo;, config_file=&amp;lsquo;finite_displacements.yml&amp;rsquo;, append=False, dry_run=False)&lt;/h4>
&lt;p>Create compute jobs for the BID calculations.&lt;/p>
&lt;p>The displacement amplitudes applied to the crystal follow the convention discussed in the paper
Phys. Rev. B 100, 014303 (2019).&lt;/p>
&lt;p>$$
u_{\textbf{t}}*{\left(b, \beta\right)} = \sum_{\textbf{q} \in \hat{S}_{BZ}}
u_{\textbf{q}}*{\left(b, \beta\right)} e^{2\pi\imag \textbf{t} \cdot \textbf{q}}
$$&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>job_handler&lt;/strong> (&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries">ComputeJobSeries&lt;/a> or &lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB">JobsDB&lt;/a>) – Either a ComputeJobSeries or a JobsDB object as the interface to the jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>deltas&lt;/strong> (list of numbers, list of arrays, 1-d or 2-d array) – Displacement amplitude.
Can take following types:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;pre>&lt;code>1. a number, will be broadcast into a shape(n_measurements, 1) array.
&lt;/code>&lt;/pre>
&lt;/blockquote>
&lt;blockquote>
&lt;pre>&lt;code>2. an 1-d array of length N, will be broadcast into a shape(n_measurements, N) array.
&lt;/code>&lt;/pre>
&lt;/blockquote>
&lt;blockquote>
&lt;pre>&lt;code>3. a 2-d array of shape(n_measurements, N).
&lt;/code>&lt;/pre>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>prefix&lt;/strong> (str, optional, default to None) – Prefix to the jobnames.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>delta_format&lt;/strong> (callable, optional, default to function: format_delta_dirname.) – A function that format a delta into a string for directory name.
Must be in form of &lt;code>def function(delta, ...): ...&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>measurement_label&lt;/strong> (callable, optional, default to format_measurement_label) – A function that format the measurement indices into certain string format.
Must be in form of def function(measurement_index, …): …&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>jobname_prefix&lt;/strong> (str) – Prefix for jobnames.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>config_file&lt;/strong> (str, optional, default to &amp;ldquo;finite_displacements.yml&amp;rdquo;) – The name of the finite displacements configuration file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dry_run&lt;/strong> (bool, optional, default to False) – If True, don’t actually create the job.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-derivative_order">&lt;em>property&lt;/em> derivative_order()&lt;/h4>
&lt;p>The order of the finite displacements derivative.&lt;/p>
&lt;h4 id="find_measurementsextra_measurements0-test_measurements5-verbosefalse-max_search20">find_measurements(extra_measurements=0, test_measurements=5, verbose=False, max_search=20)&lt;/h4>
&lt;p>Find measurements that can solve the chainrule matrix.&lt;/p>
&lt;p>The steps are as follows:&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Find the number of unknown irreducible derivatives.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;ol start="2">
&lt;li>With &lt;code>test_measurements&lt;/code> test measurements, find
the maximum rank a single displacement can provide.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;ol start="3">
&lt;li>Assume the initial number of measurement as
&lt;code>ceil(n_unknowns/single_measurement_rank)&lt;/code>.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;ol start="4">
&lt;li>If &lt;code>extra_measurements&lt;/code> is none zero, multiply
&lt;code>n_measurements&lt;/code> by &lt;code>extra_measurements + 1&lt;/code>.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;ol start="5">
&lt;li>Start with trying out several sets of &lt;code>n_measurements&lt;/code>
measurements to see if the chainrule matrices/tensors
can reach condition &lt;code>rank==n_unknowns&lt;/code>.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;ol start="6">
&lt;li>If above condition can’t be met after several (5) attemps,
increase &lt;code>n_measurements&lt;/code> by 1 and repeat step 5-6,
until the condition is reached. However, after too many
failed attempts (20), the code will quit and throw an error
saying the measurements can’t be found.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>extra_measurements&lt;/strong> (int, optional, default to 0) – The amount of extra measurement, the new number of
measurement is calculated with the equation:
&lt;code>n_measurements \*= extra_measurements + 1&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>test_measurements&lt;/strong> (int, optional, default to 5) – The number of test measurements.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>verbose&lt;/strong> (bool, optional, default to False) – Verbosity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>max_search&lt;/strong> (int, optional, default to 20) – Number of attempts to search for the measurements.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_dynamic_tensors">get_dynamic_tensors()&lt;/h4>
&lt;p>Compute dynamic tensors of the irreducible Q-points from irreducible derivatives.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>dynamic_tensors&lt;/strong> – (where N_IQ is the number of irreducible Q-points)
The dynamic tensors of the irreducible Q-points.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of complex, shape(N_IQ, ) + (norbitals, ) * order&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_fourier_interpolation">get_fourier_interpolation()&lt;/h4>
&lt;p>Construct the FourierInterpolation object from dynamic tensors of irreducible Q-points.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>fourier_interpolation&lt;/strong> – A FourierInterpolation object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>&lt;a href="principia_materia.phonon_id.fourier_interpolation.html#principia_materia.phonon_id.fourier_interpolation.FourierInterpolation">FourierInterpolation&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="get_irreducible_derivative_names">get_irreducible_derivative_names()&lt;/h4>
&lt;h4 id="set_chainrule_derivativesverbosefalse">set_chainrule_derivatives(verbose=False)&lt;/h4>
&lt;p>Instantiate the ChainruleDerivatives class to compute chainrule matrices/tensors.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>verbose&lt;/strong> (bool, optional, default to False) – Whether to print out the analysis steps in the construction of the
ChainruleDerivatives object.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_chainrule">_chainrule()&lt;/h4>
&lt;p>The ChainruleDerivatives object for the system.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>&lt;a href="principia_materia.phonon_id.chainrule_derivatives.html#principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives">ChainruleDerivatives&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_chainrule_matrix">set_chainrule_matrix()&lt;/h4>
&lt;p>Compute chainrule matrices/tensors for the set measurements.&lt;/p>
&lt;h4 id="set_errortail_resultspick_min3-pick_maxnone-consecutivefalse-penaltyfunction-penalty_linear_mse-separate_complextrue-outputnone-overwritetrue">set_errortail_results(pick_min=3, pick_max=None, consecutive=False, penalty=&lt;function penalty_linear_mse>, separate_complex=True, output=None, overwrite=True)&lt;/h4>
&lt;p>Compute error tail for the BID finite displacements result.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>pick_min&lt;/strong> (int, optional, default to 3) – The minimum number of picks for delta selection.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pick_max&lt;/strong> (int, optional, default to None) – The maximum number of picks for delta selection.
If None, the pick n scheme is used with n=pick_min.
If not None, the pick N schcme is used with N=[pick_min, pick_max].&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>consecutive&lt;/strong> (bool, optional, default to False) – Whether to pick consecutive deltas in the picking process.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>penalty&lt;/strong> (callable, optional, default to penalty_linear_mse) – The penalty function to determine the best fit.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>separate_complex&lt;/strong> (bool, optional, default to False) – Whether to fit real and imaginary part of the complex data points
separetely.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>output&lt;/strong> (str, optional, default to None) – Path of the output file.
If not None, save the output of errortail fit to the file.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="_fd_errortail">_fd_errortail()&lt;/h4>
&lt;p>The errortail extrapolated finite displacements results of
the BID finite displacements calculations.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>array of complex&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_measurementsmeasurements">set_measurements(measurements)&lt;/h4>
&lt;p>Set measurements, normalize them and compute chainrule matrices/tensor for them.&lt;/p>
&lt;h4 id="set_resultsjob_handler-data_type-prefixnone-config_filefinite_displacementsyml">set_results(job_handler, data_type, prefix=None, config_file=&amp;lsquo;finite_displacements.yml&amp;rsquo;)&lt;/h4>
&lt;p>Get finite displacements results from calculations.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>job_handler&lt;/strong> (&lt;a href="principia_materia.io_interface.compute_job_series.html#principia_materia.io_interface.compute_job_series.ComputeJobSeries">ComputeJobSeries&lt;/a> or &lt;a href="principia_materia.io_interface.jobs_db.html#principia_materia.io_interface.jobs_db.JobsDB">JobsDB&lt;/a>) – Either a ComputeJobSeries or a JobsDB object as the interface to the jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>data_type&lt;/strong> (str, choices of &amp;ldquo;forces&amp;rdquo; and &amp;ldquo;energy&amp;rdquo;) – Type of data to read from compute jobs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>config_file&lt;/strong> (str, optional, default to &amp;ldquo;finite_displacements.yml&amp;rdquo;) – The name of the finite displacements configuration file.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="_fd_results">_fd_results()&lt;/h4>
&lt;p>The result of the finite displacements calculations.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Type&lt;/strong>&lt;/p>
&lt;p>list of arrays of complex, length of number of measurements&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="_class_-principia_materiaphonon_idbiddisplacementgeneratorshape-decimals8">&lt;em>class&lt;/em> principia_materia.phonon_id.bid.DisplacementGenerator(shape, decimals=8)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>Displacement vector generator.&lt;/p>
&lt;p>The algorithm of this displacement generator is described in the &lt;a href="https://doi.org/10.1103/PhysRevB.100.014303">paper&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>shape&lt;/strong> (tuple of integers) – Shape of the displacement.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>decimals&lt;/strong> (interger) – The decimal points to round up the displacement vector.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="astep">astep()&lt;/h4>
&lt;h4 id="astep_one">astep_one()&lt;/h4>
&lt;h4 id="_property_-n">&lt;em>property&lt;/em> n()&lt;/h4>
&lt;h4 id="next">next()&lt;/h4>
&lt;h4 id="reset">reset()&lt;/h4>
&lt;h3 id="_class_-principia_materiaphonon_idbidrandomdisplacementgeneratorshape-decimals8">&lt;em>class&lt;/em> principia_materia.phonon_id.bid.RandomDisplacementGenerator(shape, decimals=8)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>Random number displacement vector generator.&lt;/p>
&lt;p>Generate displacement vectors with purely random numbers.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>shape&lt;/strong> (tuple of integers) – Shape of the displacement.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>decimals&lt;/strong> (interger) – The decimal points to round up the displacement vector.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="next-1">next()&lt;/h4>
&lt;h4 id="reset-1">reset()&lt;/h4>
&lt;h3 id="principia_materiaphonon_idbidformat_measurement_labelmeasurement_index-zero_padding0">principia_materia.phonon_id.bid.format_measurement_label(measurement_index, zero_padding=0)&lt;/h3>
&lt;p>Format measurement indices into str labels.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>measurement_index&lt;/strong> (int) – The index of the measurement.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>zero_padding&lt;/strong> (int, optional, default to 0) – The amount of zero padding on the left of the measurement indices.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>label&lt;/strong> – The label for the measurement.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>str&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaphonon_idbidget_bid_from_hdf5h5file-tol1e-06">principia_materia.phonon_id.bid.get_BID_from_hdf5(h5file, tol=1e-06)&lt;/h3>
&lt;p>Read data from HDF5 file and construct a BID object.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>h5file&lt;/strong> (str or h5py.File/h5py.Group obejct) – Path to a HDF5 file or a h5py.File/h5py.Group object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, optional, default to 1.0E-6) – Error tolerance.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaphonon_idbidget_bid_hdf5_wrapper">principia_materia.phonon_id.bid.get_BID_hdf5_wrapper()&lt;/h3>
&lt;p>HDF5 data wrapper for BID class.&lt;/p>
&lt;h3 id="principia_materiaphonon_idbidsave_bid_to_hdf5obj-h5filebidhdf5-overwritefalse">principia_materia.phonon_id.bid.save_BID_to_hdf5(obj, h5file=&amp;lsquo;bid.hdf5&amp;rsquo;, overwrite=False)&lt;/h3>
&lt;p>Save data of a BID object into a HDF5 file.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>obj&lt;/strong> (BID) – A BID object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>h5file&lt;/strong> (str or h5py.File/h5py.Group obejct, optional, default to &amp;ldquo;bid.hdf5&amp;rdquo;) – Path to a HDF5 file or a h5py.File/h5py.Group object.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaphonon_idbidsave_bid_errortailsoutput-fdtype-deltas-fd_values-result-xcoef-pick-penalty-overwritetrue">principia_materia.phonon_id.bid.save_bid_errortails(output, fdtype, deltas, fd_values, result, xcoef, pick, penalty, overwrite=True)&lt;/h3>
&lt;p>Save errortail data of frozen phonon runs into HDF5 file.&lt;/p></description></item><item><title>Docs: Module principia_materia.phonon_id.chainrule_derivatives</title><link>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.chainrule_derivatives.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.chainrule_derivatives.html</guid><description>
&lt;h1 id="principia_materiaphonon_idchainrule_derivatives-module">principia_materia.phonon_id.chainrule_derivatives module&lt;/h1>
&lt;h3 id="_class_-principia_materiaphonon_idchainrule_derivativeschainrulederivativesstructure-supa-order-pgc1-use_symmetric_basisfalse-tol1e-06">&lt;em>class&lt;/em> principia_materia.phonon_id.chainrule_derivatives.ChainruleDerivatives(structure, supa, order, pg=&amp;lsquo;C1&amp;rsquo;, use_symmetric_basis=False, tol=1e-06)&lt;/h3>
&lt;p>Bases: &lt;a href="principia_materia.phonon_id.analytic_tensors.html#principia_materia.phonon_id.analytic_tensors.AnalyticTensors">&lt;code>AnalyticTensors&lt;/code>&lt;/a>&lt;/p>
&lt;p>Compute chainrule derivatives of a measurement for a given crystal system at given FTG and order.&lt;/p>
&lt;p>In bundled irreducible derivatives (BID) method, for a given measurement basis, at a given order,
structure and supercell, we can obtain a series of derivatives from finite displacement computations,
referred to as $\textbf{V}_{b}^{\hat{S}_{BZ}}$, where $\hat{S}_{BZ}$ is the supercell matrix.&lt;/p>
&lt;p>These measurement basis derivatives are linear combinations of irreducible derivatives in this
system,&lt;/p>
&lt;p>$$
\textbf{V}_{b}^{\hat{S}_{BZ}} = \hat{C}_b^{\hat{S}_{BZ}} \textbf{d}_{ir}^{\hat{S}_{BZ}}
$$
, where $\hat{C}_b^{\hat{S}_{BZ}}$ is the chainrule matrix,
and $\textbf{d}_{ir}^{\hat{S}_{BZ}}$ is the vector of irreducible derivatives.
This chainrule matrix is what we are aiming to find in this class, such linear combinations
$\hat{C}_b^{\hat{S}_{BZ}}$ can be calculated using chain rule derivatives. With the
chainrule matrix and measurement basis derivatives, we can solve for irreducible derivatives.&lt;/p>
&lt;p>Additionally, in hierarchical supercell BID method, at a given supercell, the irreducible
derivatives that fit in smaller supercells are already computed. Thus we can split the
chainrule matrix into 2 parts: a known part and an unknown part, where the task at hand
is to solve the unknown part for the irreducible derivatives.&lt;/p>
&lt;p>$$
\textbf{V}_{b}^{\hat{S}_{BZ}} -
\hat{C}_{b,known}^{\hat{S}_{BZ}} \textbf{d}_{ir,known}^{\hat{S}_{BZ}}
=
\hat{C}_{b,unknown}^{\hat{S}_{BZ}} \textbf{d}_{ir,unknown}^{\hat{S}_{BZ}}
$$&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>structure&lt;/strong> (CrystalFTG object or a structure file of &lt;a href="principia_materia.translation_group.crystal_ftg.html#principia_materia.translation_group.crystal_ftg.CrystalFTG">CrystalFTG&lt;/a>) – The crystal structure.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>supa&lt;/strong> (array of int, shape(dim, dim)) – The supercell matrix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>order&lt;/strong> (int) – Order of the dynamic tensor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>pg&lt;/strong> (str or PointGroup object) – The point group.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>use_symmetric_basis&lt;/strong> (bool, optional, default to False) – Whether to use the symmetric basis or the naive basis for the
hidden orders of the chainrule matrix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, optional, default to 1.0E-6) – Error tolerence.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="add_known_idknown_id">add_known_ID(known_ID)&lt;/h4>
&lt;p>Mark irreducible derivatives as know ID.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>known_ID&lt;/strong> (list of nested tuples) – Irreducible derivaties to be marked as known.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-basis_names">&lt;em>property&lt;/em> basis_names()&lt;/h4>
&lt;h4 id="_property_-basis_vectors">&lt;em>property&lt;/em> basis_vectors()&lt;/h4>
&lt;h4 id="compute_chainruledisplacements-hidden_order1">compute_chainrule(displacements, hidden_order=1)&lt;/h4>
&lt;p>Compute chainrule matrices/tensors that converts between irreducible derivatives and the measurement
basis derivatives.&lt;/p>
&lt;p>For a single measurement.&lt;/p>
&lt;p>$$
C_Q(u_1, \cdots, u_{O_{h}}) = \frac{1}{\left(O-O_{h}\right)!} \sum_{u_{O_{h} + 1}, \cdots, u_{O}}
D_{Q}^{O}[u_{O_{h} + 1}, \cdots, u_{O}] \prod_{i=O_{h} + 1}^{O}
\frac{\partial u_i}{\partial v_i}
$$
where $O$ is order, $O_{h}$ is the hidden order, $u$ is q-space displacement basis,
$v$ is the measurement bases at otrder $O$, $V$ is the $u_0$ line of
the chainrule matrix, and $D_Q^{O}$ is the tensor vector of $Q$.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>displacements&lt;/strong> (array of floats, shape(N, order - hidden_order, natoms, dim) or (order - hidden_order, natoms, dim)) – Measurement basis displacements, can be 1 set of measurement or multiple measurements at the same time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>hidden_order&lt;/strong> (int, optional, default to 1) – The order of derivatives from first principles calculation.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>chainrule_tensor&lt;/strong> – The chainrule matrix in a tensor form.
If the input displacements shape is (order - hidden_order, natoms, dim), return value will be in shape
(n_QpointsN, norbitals) * hidden_order + (n_irreducible_derivatives, ).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of complex, shape(N, ) + (n_QpointsN, norbitals) * hidden_order + (n_irreducible_derivatives, )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="decompose_displacementsdisplacements">decompose_displacements(displacements)&lt;/h4>
&lt;p>Decompose the displacements in real space into reciprocal space.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>displacements&lt;/strong> (array of float, shape (n, ) + self.displacement_shape) – A measurement, which consists of several displacements.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-displacement_shape">&lt;em>property&lt;/em> displacement_shape()&lt;/h4>
&lt;p>Shape of a single displacement.&lt;/p>
&lt;p>A measurement basis usually consists of several displacements.&lt;/p>
&lt;h4 id="get_chainrule_factorsmeasurement-hidden_order1">get_chainrule_factors(measurement, hidden_order=1)&lt;/h4>
&lt;p>Compute chainrule factor of a measurement.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>measurement&lt;/strong> (array of float, shape(order - hidden_order, supercell.natoms, dim)) – A set of displacement to displace the system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>hidden_order&lt;/strong> (int, optional, default to 1) – The order of derivatives from first principles.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>decomp_measurement&lt;/strong> – The chainrule factors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of complex, shape(order - hidden_order, multiplicity, norbitals)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="_property_-known_id">&lt;em>property&lt;/em> known_ID()&lt;/h4>
&lt;p>Names of known irreducible derivatives.&lt;/p>
&lt;h4 id="_property_-nonzero_id_index">&lt;em>property&lt;/em> nonzero_ID_index()&lt;/h4>
&lt;h4 id="normalize_displacementsdisplacements">normalize_displacements(displacements)&lt;/h4>
&lt;p>Normalize a measurement in reciprocal space.&lt;/p>
&lt;p>The normalization makes the reciprocal space decomposition of the displacements to 1.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;p>&lt;strong>displacements&lt;/strong> (array of float, shape (n, ) + self.displacement_shape) – A measurement, which consists of several displacements.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="set_basis">set_basis()&lt;/h4>
&lt;p>Compute all the reciprocal displacement basis that fit in the supercell.&lt;/p>
&lt;h4 id="set_naive_basis">set_naive_basis()&lt;/h4>
&lt;p>Compute all the naive reciprocal displacement basis that fit in the supercell.&lt;/p>
&lt;h4 id="set_symmetric_basis">set_symmetric_basis()&lt;/h4>
&lt;p>Compute all the symmetric reciprocal displacement basis that fit in the supercell.&lt;/p>
&lt;h4 id="_property_-unknown_id">&lt;em>property&lt;/em> unknown_ID()&lt;/h4>
&lt;p>Names of unknown irreducible derivatives.&lt;/p>
&lt;h3 id="principia_materiaphonon_idchainrule_derivativesget_chainrulederivatives_from_hdf5h5file-tol1e-06">principia_materia.phonon_id.chainrule_derivatives.get_ChainruleDerivatives_from_hdf5(h5file, tol=1e-06)&lt;/h3>
&lt;p>Load ChainruleDerivatives from HDF5 file.&lt;/p>
&lt;h3 id="principia_materiaphonon_idchainrule_derivativesget_chainrulederivatives_hdf5_wrapper">principia_materia.phonon_id.chainrule_derivatives.get_ChainruleDerivatives_hdf5_wrapper()&lt;/h3>
&lt;p>HDF5 data wrapper for ChainruleDerivatives class.&lt;/p>
&lt;h3 id="principia_materiaphonon_idchainrule_derivativessave_chainrulederivatives_to_hdf5obj-h5fileanalytic_tensorshdf5-overwritefalse">principia_materia.phonon_id.chainrule_derivatives.save_ChainruleDerivatives_to_hdf5(obj, h5file=&amp;lsquo;analytic_tensors.hdf5&amp;rsquo;, overwrite=False)&lt;/h3>
&lt;p>Save ChainruleDerivatives data into HDF5 file.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>obj&lt;/strong> (ChainruleDerivatives) – A ChainruleDerivatives object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>h5file&lt;/strong> (str or h5py.File/h5py.Group obejct, optional, default to &amp;ldquo;dynamic_tensors.hdf5&amp;rdquo;) – Path to a HDF5 file or a h5py.File/h5py.Group object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>overwrite&lt;/strong> (bool, optional, default to False) – When the file exists, whether to replace the content of the file
with the content to be saved.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Module principia_materia.phonon_id.conductivity</title><link>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.conductivity.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marianettigroup.github.io/docs/references/principia_materia.phonon_id.conductivity.html</guid><description>
&lt;h1 id="principia_materiaphonon_idconductivity-module">principia_materia.phonon_id.conductivity module&lt;/h1>
&lt;h3 id="_class_-principia_materiaphonon_idconductivityconductivitystructure-mesh-pg-tol1e-06">&lt;em>class&lt;/em> principia_materia.phonon_id.conductivity.Conductivity(structure, mesh, pg, tol=1e-06)&lt;/h3>
&lt;p>Bases: &lt;code>object&lt;/code>&lt;/p>
&lt;p>Calculate thermal conductivity&lt;/p>
&lt;h4 id="gamma_tetraqpoint-temperature-frequencies-phonon_unitsthz-unitsthz-phonon_cutoffnone-tol1e-06-high_temp_limitfalse">gamma_tetra(qpoint, temperature, frequencies, phonon_units=&amp;lsquo;THz&amp;rsquo;, units=&amp;lsquo;THz&amp;rsquo;, phonon_cutoff=None, tol=1e-06, high_temp_limit=False)&lt;/h4>
&lt;p>Use the tetrahedron method to calculate the imaginary self energy (ISE).&lt;/p>
&lt;p>This version is mostly implemented in fortran.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>qpoint&lt;/strong> (array of float or &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>, shape(3, ); or coordinate_parse compatible format) – The Q-vector to calculate ISE.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>temperature&lt;/strong> (float of array of float, shape(ntemp, )) – The temperature(s) to calculate ISE.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>frequencies&lt;/strong> (array of float, shape(nbin, )) – The frequencies to evaluate ISE at.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>phonon_units&lt;/strong> (str, default &amp;ldquo;THz&amp;rdquo;, optional) – The unit of phonon frequencies.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>units&lt;/strong> (str, default &amp;ldquo;THz&amp;rdquo;, optional) – The unit of ISE.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>phonon_cutoff&lt;/strong> (None or float, default None, optional) – The phonon cutoff frequencies, all frequencies below cutoff are replaced with the value of cutoff.
If omitted, the value of tol is used.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, default 1.0E-6, optional) – The error tolerence.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>gammas&lt;/strong> – The ISE of given q at all given temperatures at each frequencies.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(ntemp, nbin, self.structure.norbitals)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="gamma_tetra_at_phononqpoint-temperature-phonon_unitsthz-unitsthz-tol1e-06-phonon_cutoffnone-high_temp_limitfalse">gamma_tetra_at_phonon(qpoint, temperature, phonon_units=&amp;lsquo;THz&amp;rsquo;, units=&amp;lsquo;THz&amp;rsquo;, tol=1e-06, phonon_cutoff=None, high_temp_limit=False)&lt;/h4>
&lt;p>Calculate imaginary self energy at the phonon frequencies at the given q.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>qpoint&lt;/strong> (array of float or &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>, shape(3, ); or coordinate_parse compatible format) – The Q-vector to calculate ISE.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>temperature&lt;/strong> (float of array of float, shape(ntemp, )) – The temperature(s) to calculate ISE.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>phonon_units&lt;/strong> (str, default &amp;ldquo;THz&amp;rdquo;, optional) – The unit of phonon frequencies.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>units&lt;/strong> (str, default &amp;ldquo;THz&amp;rdquo;, optional) – The unit of ISE.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>phonon_cutoff&lt;/strong> (None or float, default None, optional) – The phonon cutoff frequencies, all frequencies below cutoff are replaced with the value of cutoff.
If omitted, the value of tol is used.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, default 1.0E-6, optional) – The error tolerence.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>gammas&lt;/strong> – The ISE of given q at all given temperatures.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(ntemp, self.structure.norbitals)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="gamma_tetra_gridtemperature-frequenciesnone-grid_qvecsnone-phonon_unitsthz-unitsthz-debugfalse-phonon_cutoffnone-tol1e-06-return_phononfalse-return_eigenvectorsfalse">gamma_tetra_grid(temperature, frequencies=None, grid_qvecs=None, phonon_units=&amp;lsquo;THz&amp;rsquo;, units=&amp;lsquo;THz&amp;rsquo;, debug=False, phonon_cutoff=None, tol=1e-06, return_phonon=False, return_eigenvectors=False)&lt;/h4>
&lt;p>Use the tetrahedron method to calculate the imaginary self energy.&lt;/p>
&lt;p>This version is set to take advantage of the grid and calculate ISE of the grid.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>temperature&lt;/strong> (float of array of float, shape(ntemp, )) – The temperature(s) to calculate ISE.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>frequencies&lt;/strong> (array of float, shape(nbin, )) – The frequencies to evaluate ISE at.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>grid_qves&lt;/strong> (array of float or &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>, shape(3, ) or shape(N, 3); or coordinate_parse compatible format) – A subset of Q-vectors on the grid the calculate ISE at.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>phonon_units&lt;/strong> (str, default &amp;ldquo;THz&amp;rdquo;, optional) – The unit of phonon frequencies.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>units&lt;/strong> (str, default &amp;ldquo;THz&amp;rdquo;, optional) – The unit of ISE.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>debug&lt;/strong> (bool, default False, optional) – A debug flag.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>phonon_cutoff&lt;/strong> (None or float, default None, optional) – The phonon cutoff frequencies, all frequencies below cutoff are replaced with the value of cutoff.
If omitted, the value of tol is used.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, default 1.0E-6, optional) – The error tolerence.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>return_phonon&lt;/strong> (bool, defult False, optional) – Whether to return phonon frequencies.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>return_eigenvectors&lt;/strong> (bool, default False, optional) – Whether to return phonon eigenvectors.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>gammas&lt;/strong> (&lt;em>array of float&lt;/em>) – (if frequencies is None: shape(N, ntemp, self.structure.norbitals))&lt;/li>
&lt;/ul>
&lt;p>The ISE of given q at all given temperatures.&lt;/p>
&lt;p>(if frequencies is not None: shape(N, ntemp, nbin, self.structure.norbitals))&lt;/p>
&lt;p>The ISE of given q at all given temperatures at each frequencies.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>phonon_frequencies&lt;/strong> (&lt;em>array of float, shape(N, self.structure.norbitals)&lt;/em>) – (if return_phonon == True)&lt;/li>
&lt;/ul>
&lt;p>The phonon frequencies of Q_vectors on the grid. If grid_qvecs is not None,
the phonon frequencies of the grid_qvecs will be returned.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>eigenvectors&lt;/strong> (&lt;em>array of complex, shape(N, self.structure.norbitals, self.structure.norbitals)&lt;/em>) – (if return_eigenvectors == True)&lt;/li>
&lt;/ul>
&lt;p>The phonon eigenvectors of Q_vectors on the grid. If grid_qvecs is not None,
the phonon eigenvectors of the grid_qvecs will be returned.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="has_phi_orderorders">has_Phi_order(orders)&lt;/h4>
&lt;h4 id="scattering_rate_boundarytemperature-boundary-qpointsnone-phonon_cutoffnone-tol00001">scattering_rate_boundary(temperature, boundary, qpoints=None, phonon_cutoff=None, tol=0.0001)&lt;/h4>
&lt;h4 id="set_phiphi-order-tol1e-05">set_Phi(Phi, order, tol=1e-05)&lt;/h4>
&lt;h4 id="set_dipoleepsilon-q_directionnone">set_dipole(epsilon, q_direction=None)&lt;/h4>
&lt;h4 id="thermal_conductivity_lbtetemperature-phonon_cutoffnone-debugfalse-tol1e-06">thermal_conductivity_LBTE(temperature, phonon_cutoff=None, debug=False, tol=1e-06)&lt;/h4>
&lt;p>The implementation follows paper by Chaput, Phys. Rev. Lett. 110, 265506 (2013).
It is basically identical to the paper by Fugallo, et al. Phys. Rev. B 88, 045430 (2013),
apart from the latter opting to use an iterative approach instead of solving it directly.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>kappa&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(len(qpoints), ntemp, norbitals, 3, 3)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="thermal_conductivity_rtatemperature-qpointsnone-phonon_cutoffnone-tol1e-06">thermal_conductivity_RTA(temperature, qpoints=None, phonon_cutoff=None, tol=1e-06)&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>mode_kappa&lt;/strong> (&lt;em>array of float, shape(ntemp, len(qpoints), norbitals, 3, 3)&lt;/em>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>kappa&lt;/strong> (&lt;em>array of float, shape(ntemp, 3, 3)&lt;/em>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="two_phonon_dosq-temperature-frequenciesnone-include_phononsfalse-unitsthz-phonon_cutoffnone-tol1e-06">two_phonon_dos(q, temperature, frequencies=None, include_phonons=False, units=&amp;lsquo;THz&amp;rsquo;, phonon_cutoff=None, tol=1e-06)&lt;/h4>
&lt;p>Two-phonon density of states.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>q&lt;/strong> (array of float or &lt;a href="principia_materia.mathematics.new_fraction.html#principia_materia.mathematics.new_fraction.Fraction">Fraction&lt;/a>, shape(3, ); or coordinate_parse compatible format) – The Q-vector to calculate ISE.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>temperature&lt;/strong> (float of array of float, shape(ntemp, )) – The temperature(s).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>frequencies&lt;/strong> (array of float, shape(nbin, )) – The frequencies to evaluate two-phonon DOS at.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>include_phonons&lt;/strong> (bool, optinoal, default to False) – Whether or not include the product of phonon frequencies in the coefficients.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>phonon_cutoff&lt;/strong> (None or float, default None, optional) – The phonon cutoff frequencies, all frequencies below cutoff are replaced with the value of cutoff.
If omitted, the value of tol is used.
This would also cutoff all imaginary phonons.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float, default 1.0E-6, optional) – The error tolerence.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>two_phonon_dos&lt;/strong> – Two-phonon density of states of the phonon q, in 2 parts.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>array of float, shape(2, ntemp, len(frequencies))&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaphonon_idconductivitybedistfreq-temperature-freq_unitsthz-tol00001">principia_materia.phonon_id.conductivity.bedist(freq, temperature, freq_units=&amp;lsquo;THz&amp;rsquo;, tol=0.0001)&lt;/h3>
&lt;p>Bose-Einstein distribution&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Parameters&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>freq&lt;/strong> (float of array of float, shape(N, )) – The frequencies to evaluate Bose-Einstein distribution.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>freq_units&lt;/strong> (str, default &amp;ldquo;THz&amp;rdquo;) – The unit of frequencies.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>temperature&lt;/strong> (float or array of float, shape(ntemp, )) – Temperature(s) in unit of K.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>tol&lt;/strong> (float) – The tolerence for low temperature limit.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Returns&lt;/strong>&lt;/p>
&lt;p>&lt;strong>bedist&lt;/strong> – The Bose-Einstein distribution&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Return type&lt;/strong>&lt;/p>
&lt;p>float or array of float, shape(ntemp, N)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="principia_materiaphonon_idconductivityreciprocalarr-tol1e-06-fill_zero00">principia_materia.phonon_id.conductivity.reciprocal(arr, tol=1e-06, fill_zero=0.0)&lt;/h3></description></item></channel></rss>