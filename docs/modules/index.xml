<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Modules on Principia Materia</title><link>https://example.docsy.dev/docs/modules/</link><description>Recent content in Modules on Principia Materia</description><generator>Hugo</generator><language>en</language><atom:link href="https://example.docsy.dev/docs/modules/index.xml" rel="self" type="application/rss+xml"/><item><title>Translation Group</title><link>https://example.docsy.dev/docs/modules/translation-group/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/modules/translation-group/</guid><description>When performing calculations, we need to use various properties of both the infinite translation group (Lattice) and the finite translation group (LatticeFTG). The infinite translation group contains the lattice vectors, and computes various information from them (e.g. vector lengths and angles, volume, reciprocal lattice, etc). The FTG is naturally characterized by a supercell \(\hat{S}_{BZ}\), and LatticeFTG derives from Lattice. Finding all translation points within a given supercell is a key task.</description></item><item><title>Symmetry</title><link>https://example.docsy.dev/docs/modules/symmetry/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/modules/symmetry/</guid><description>Here we encode all information about the crystallographic point groups. In the near future, we will add space group information here as well.
Cornwell_group_matrices Cornwell_point_group PointGroup get_little_group</description></item><item><title>Representation</title><link>https://example.docsy.dev/docs/modules/representation/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/modules/representation/</guid><description>This module contains all classes relevant to building a representation of a group, finding the composition in terms of irreducible representations, and building irreducible vectors.
BaseRepresentation CharmBlochRep ShiftMode ClusterRep DispClusterRep SingleTensorRep DirectProduct SymmetricDirectProduct StarCharmBlochRep and Stars ProductofQIrreps SymmetricProductofQIrreps QStarRep SymmetricQStarRep</description></item><item><title>Finite Difference</title><link>https://example.docsy.dev/docs/modules/finite-difference/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://example.docsy.dev/docs/modules/finite-difference/</guid><description>Finite difference is used to compute phonons and phonon interactions in PM, and this module isolates all the tasks associated with performing finite difference. Here we give some examples to illustrate the key features.
Let us consider a potential with three variables, labeled 0, 1, 2, and set up all derivatives to second order. Begin by instantiating the class:
&amp;gt;&amp;gt;&amp;gt; from principia_materia.finite_difference.finite_difference_np import FiniteDifferenceNP &amp;gt;&amp;gt;&amp;gt; fd=FiniteDifferenceNP() Set all the derivatives to be evaluated:</description></item></channel></rss>