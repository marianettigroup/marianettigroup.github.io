.. index:: install

.. _install:

Installation
============

principia-materia consists of Python codes with C++ and Fortran extensions.




.. Install from PyPI
.. -----------------
..
.. If you use ``pip``, you can install principia-materia with:
..
.. .. code-block:: bash
..
..       pip install principia-materia


.. Install from Conda
.. ------------------
.. 
.. If you use ``conda``, you can install principia-materia with:
.. 
.. .. code-block:: bash
.. 
..       conda install -c principia-materia


.. Using Docker image
.. ------------------
..
.. If you use ``docker``, you can install principia-materia with:
..
.. .. code-block:: bash
..
..       docker pull marianettigroup/principia-materia


Compile from source
-------------------

Additionally, you can also compile and install the package from the source code,
which requires several libraries used in extensions.

The required libraries are::

      openmp
      lapack
      blas
      gcc
      gfortran

* For Ubuntu 18.04 and latear with gcc compilers::

      sudo apt install gcc gfortran libopenblas-dev libgomp1 libhdf5-dev

* For macOS with Homebrew::

      brew install gcc openblas

Required python modules for the packge are listed in the file ``requirements.txt``::

      pip install --upgrade -r requirements.txt

The next step is compiling the source code.

* For Ubuntu 18.04 and latear with gcc compilers::

      python setup.py build

* For macOS with Homebrew::

      CC=gcc-11 CXX=g++-11 F90=gfortran-11 python setup.py build

The installation step can be executed with either the regular mode ::

      python setup.py install

or the *development* mode ::

      python setup.py develop

with the latter offering more flexibility during development, where the
repository is dynamically link to serve as the python module so that any
changes to the code can come in effect without reinstalling the module. However
for the extensions of the module that is written in either C or FORTRAN, the
module requires recompilation to reflect any changes to the source code.


Using Virtual Environment
-------------------------

Virtual environment is recommended when working with the package.
To setup a virtual environment:

.. code-block:: bash

  python3 -m virtualenv ENVNAME && source ENVNAME/bin/activate

(replace ``ENVNAME`` with the name of the environment).


Setup Shell Auto-Complete
-------------------------

The auto-complete feature is optional, and is realized with `argcomplete <https://kislyuk.github.io/argcomplete>`_ module.
To activate this feature, in Bash for example, install the moculde first:

.. code-block:: bash

   pip install argcomplete
   activate-global-python-argcomplete

then within the virtual environment source the ``pm-completion.sh`` script in activation script ``ENVNAME/bin/activate``:

.. code-block:: bash

  source ${VIRTUAL_ENV}/../pm-completion.sh

