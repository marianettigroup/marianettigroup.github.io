{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Symmetry of a molecule"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "np.set_printoptions(linewidth=150)\n",
    "from principia_materia.translation_group import Cluster\n",
    "from principia_materia.representation import ClusterRep, DispClusterRep"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Symmetry of $CO_2$ molecule\n",
    "\n",
    "### Representation of atoms in a molecule\n",
    "\n",
    "In this example, we analyze the symmetry of a $CO_2$ molecule. \n",
    "Since the 3 atoms of the molecule are positioned along a line, the molecule has rotational symmetry along this axis. \n",
    "We can simplify the problem by studying the displacements along the rotational axis (referred to as $x$) and perpendicular to it ($y$), instead of all 3 dimensions.\n",
    "\n",
    "For this 1 dimensional molecule, there is an inversion centered at the carbon atom, thus we can use point group $C_i$ for the symmetry analysis of this molecule.\n",
    "\n",
    "The representation of the molecule atoms is straightforward since each species can only map into each other under point operations. That is the carbon atom has its own odd mode and the 2 oxygen atoms linearly combine into an odd and an even mode.\n",
    "\n",
    "![co2](../translation_group/illustrations/molecule/co2.pdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we construct a _Cluster_ object with the atoms, and only $p_x$ and $p_y$ orbitals:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "atoms = {\n",
    "    \"C\": np.array([\n",
    "        [0.0, 0.0, 0.0]\n",
    "    ]),\n",
    "    \"O\": np.array([\n",
    "        [ 1.0, 0.0, 0.0],\n",
    "        [-1.0, 0.0, 0.0]\n",
    "    ])\n",
    "}\n",
    "cluster = Cluster(atoms=atoms, orbitals=\"p_x,p_y\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the _ClusterRep_ class, we can find that the representation of the molecule atoms decomposes into:\n",
    "$\n",
    "\\Gamma = 2 A \\oplus B\n",
    "$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('A', 2), ('B', 1)])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_rep = ClusterRep(cluster=cluster, pg=\"Ci\")\n",
    "cluster_rep.irrep_counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([(('A', 0), array([[1., 0., 0.]])),\n",
       "             (('A', 1), array([[0.        , 0.70710678, 0.70710678]])),\n",
       "             (('B', 0), array([[ 0.        ,  0.70710678, -0.70710678]]))])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_rep.construct_irreducible_basis()\n",
    "cluster_rep.irrvec_dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And the basis of irreducible representations can also be computed easily:\n",
    "$$\n",
    "\\vec{v}_{C, odd} = \\vec{v}_{A} = \\left[ 1, 0, 0 \\right] ^T \\\\\n",
    "\\vec{v}_{O, odd} = \\vec{v}_{A^{'}} = \\frac{1}{\\sqrt{2}}\\left[ 0, 1, 1 \\right] ^T \\\\\n",
    "\\vec{v}_{O, even} = \\vec{v}_{B} = \\frac{1}{\\sqrt{2}}\\left[ 0, 1, -1 \\right] ^T \\\\\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Displacements of a molecule\n",
    "\n",
    "The symmetry analysis of the displacements of the molecule can be easily performed with _DispClusterRep_ class\n",
    "to obtain the irreducible representations:\n",
    "$$\n",
    "\\Gamma = 2 A \\oplus 4 B\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('A', 2), ('B', 4)])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "disp_cluster_rep = DispClusterRep(cluster=cluster, pg=\"Ci\")\n",
    "disp_cluster_rep.irrep_counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([(('A', 0),\n",
       "              array([[ 0.        ,  0.        ,  0.70710678,  0.        , -0.70710678,  0.        ]])),\n",
       "             (('A', 1),\n",
       "              array([[ 0.        ,  0.        ,  0.        ,  0.70710678,  0.        , -0.70710678]])),\n",
       "             (('B', 0), array([[1., 0., 0., 0., 0., 0.]])),\n",
       "             (('B', 1), array([[0., 1., 0., 0., 0., 0.]])),\n",
       "             (('B', 2),\n",
       "              array([[0.        , 0.        , 0.70710678, 0.        , 0.70710678, 0.        ]])),\n",
       "             (('B', 3),\n",
       "              array([[0.        , 0.        , 0.        , 0.70710678, 0.        , 0.70710678]]))])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "disp_cluster_rep.construct_irreducible_basis()\n",
    "disp_cluster_rep.irrvec_dict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can find the basis vectors of the irreducible representations:\n",
    "$$\n",
    "\\vec{v}_{C, x, odd} = \\vec{v}_{B} = \\left[ 1, 0, 0, 0, 0, 0 \\right] ^T \\\\\n",
    "\\vec{v}_{C, y, odd} = \\vec{v}_{B'} = \\left[ 0, 1, 0, 0, 0, 0 \\right] ^T \\\\\n",
    "%\n",
    "\\vec{v}_{O, x, odd} = \\vec{v}_{B''} = \\frac{1}{\\sqrt{2}}\\left[ 0, 0, 1, 0, 1, 0 \\right] ^T \\\\\n",
    "\\vec{v}_{O, y, odd} = \\vec{v}_{B'''} = \\frac{1}{\\sqrt{2}}\\left[ 0, 0, 0, 1, 0, 1 \\right] ^T \\\\\n",
    "\\vec{v}_{O, x, even} = \\vec{v}_{A} = \\frac{1}{\\sqrt{2}}\\left[ 0, 0, 1, 0, -1, 0 \\right] ^T \\\\\n",
    "\\vec{v}_{O, y, even} = \\vec{v}_{A'} = \\frac{1}{\\sqrt{2}}\\left[ 0, 0, 0, 1, 0, -1 \\right] ^T \\\\\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Symmetry analysis for phonons\n",
    "\n",
    "Here we demonstrate the symmetry analysis for phonons at a given $\\textbf{q}$-point in a crystal, which can break down into several steps: \n",
    "1. Find the irreducible representaions of the nuclei displacements at said $\\textbf{q}$-point;\n",
    "2. Using the direct product or symmetric direct product to find the irreducible derivatives at second order;\n",
    "3. Compute the coefficients for the irreducible derivatives in the dynamic matrix.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Symmetry of Displacements of a Crystal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from principia_materia import Fraction\n",
    "from principia_materia.io_interface import parse_array\n",
    "from principia_materia.translation_group import CrystalFTG\n",
    "from principia_materia.representation import CharmBlochRep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "vec =  np.array([\n",
    "    [0.0, 0.5, 0.5],\n",
    "    [0.5, 0.0, 0.5],\n",
    "    [0.5, 0.5, 0.0],\n",
    "])\n",
    "atoms = {\n",
    "    \"Na\": np.array([\n",
    "        [0.0, 0.0, 0.0]\n",
    "    ]),\n",
    "    \"Cl\": np.array([\n",
    "        [0.5, 0.5, 0.5],\n",
    "    ])\n",
    "}\n",
    "orbitals = \"p\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "structure = CrystalFTG(vec=vec, atoms=atoms, orbitals=orbitals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "cbr = CharmBlochRep(\n",
    "    structure=structure,\n",
    "    pg=\"Oh\",\n",
    "    qpoint=np.array(parse_array(\"0 0 0\", dtype=Fraction)),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('T1u', 2)])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cbr.irrep_counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OrderedDict([('T1u', 1)])\n",
      "('T1u', 0)\n",
      "[[ 0.707107+0.j  0.      +0.j  0.      +0.j -0.707107+0.j  0.      +0.j  0.      +0.j]\n",
      " [ 0.      +0.j  0.707107+0.j  0.      +0.j  0.      +0.j -0.707107+0.j  0.      +0.j]\n",
      " [ 0.      +0.j  0.      +0.j  0.707107+0.j  0.      +0.j  0.      +0.j -0.707107+0.j]]\n"
     ]
    }
   ],
   "source": [
    "cbr.construct_irreducible_basis()\n",
    "cbr.orthogonalize_shift_modes(remove=True)\n",
    "print(cbr.irrep_counter)\n",
    "for key, val in cbr.irrvec_dict.items():\n",
    "    print(key)\n",
    "    print(np.round(val, 6))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Direct product and symmetric direct product of irreducible representations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from principia_materia.representation import DirectProduct, SymmetricDirectProduct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "dp = DirectProduct(pg=\"Oh\", irrep_inputs=[\"T1u\", \"T1u\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('A1g', 1), ('Eg', 1), ('T1g', 1), ('T2g', 1)])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dp.irrep_counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "dp.construct_irreducible_basis()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.57735027, 0.        , 0.        , 0.        , 0.57735027, 0.        , 0.        , 0.        , 0.57735027]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dp.irrvec_dict[(\"A1g\", 0)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(('T1u', 0), ('T1u', 0)),\n",
       " (('T1u', 0), ('T1u', 1)),\n",
       " (('T1u', 0), ('T1u', 2)),\n",
       " (('T1u', 1), ('T1u', 0)),\n",
       " (('T1u', 1), ('T1u', 1)),\n",
       " (('T1u', 1), ('T1u', 2)),\n",
       " (('T1u', 2), ('T1u', 0)),\n",
       " (('T1u', 2), ('T1u', 1)),\n",
       " (('T1u', 2), ('T1u', 2))]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dp.basis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "sdp = SymmetricDirectProduct(pg=\"Oh\", irrep_inputs=[\"T1u\", \"T1u\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('A1g', 1), ('Eg', 1), ('T2g', 1)])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sdp.irrep_counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "sdp.construct_irreducible_basis()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.57735027, 0.        , 0.        , 0.57735027, 0.        , 0.57735027]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sdp.irrvec_dict[(\"A1g\", 0)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(('T1u', 0), ('T1u', 0)),\n",
       " (('T1u', 0), ('T1u', 1)),\n",
       " (('T1u', 0), ('T1u', 2)),\n",
       " (('T1u', 1), ('T1u', 1)),\n",
       " (('T1u', 1), ('T1u', 2)),\n",
       " (('T1u', 2), ('T1u', 2))]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sdp.basis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., 1., 0., 1.]])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sdp.get_integer_irrvec((\"A1g\", 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
