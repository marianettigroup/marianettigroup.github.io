{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hamiltonian"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from principia_materia.io_interface import parse_array\n",
    "from principia_materia.translation_group import get_structure, CrystalFTG\n",
    "from principia_materia.hamiltonian import (\n",
    "    get_modelhamiltonian_from_yaml,\n",
    "    ModelHamiltonian,\n",
    "    ElectronHamiltonian,\n",
    "    PhononHamiltonian\n",
    ")\n",
    "from principia_materia.plotting.kpath import KPath\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Electron Hamiltonian - 1D Hubbard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "vec = np.identity(3)\n",
    "atoms = {\"H\": np.array([[0, 0, 0],])}\n",
    "orbitals = \"s\"\n",
    "supa = np.identity(3, dtype=int)\n",
    "structure = CrystalFTG(vec=vec, atoms=atoms, orbitals=orbitals, supa=supa)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Hamiltonian\n",
    "\n",
    "Model Hamiltonian is a class that houses hopping parameters for electrons or force constants for phonons.\n",
    "It can be used to construct simple models for studies in ElectronHamiltonian or PhononHamiltonian class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "hamiltonian_dict = {\n",
    "    ( 0, 0, 0): [[0.00]],\n",
    "    ( 1, 0, 0): [[0.25]],\n",
    "    (-1, 0, 0): [[0.25]],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "ham = ModelHamiltonian()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "ham.set_hamiltonian(np.array(list(hamiltonian_dict.keys())), np.array(list(hamiltonian_dict.values())))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  0,  0],\n",
       "       [ 1,  0,  0],\n",
       "       [-1,  0,  0]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ham.tpoints"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0.  ]],\n",
       "\n",
       "       [[0.25]],\n",
       "\n",
       "       [[0.25]]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ham.hamiltonian_matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh = np.diag([2000, 1, 1])\n",
    "eham = ElectronHamiltonian(structure=structure, pg=\"C1\", mesh=mesh, nelect=1)\n",
    "eham.set_hamiltonian(ham)\n",
    "eham.set_hamiltonian_from_mesh()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n"
     ]
    }
   ],
   "source": [
    "print(eham.get_fermi_energy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "dos = eham.compute_DOS(1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(eham._dos_bins - eham.get_fermi_energy(), dos)\n",
    "plt.ylabel(\"DOS\".format(eham.units))\n",
    "plt.xlabel(r\"$E - E_f$ (eV)\".format(eham.units))\n",
    "plt.tight_layout()\n",
    "plt.savefig(\"electron_dos.pdf\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phonon Hamiltonian - Square lattice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "vec = np.diag([1, 1, 60])\n",
    "atoms = {\"C\": np.array([[0, 0, 0],])}\n",
    "orbitals = \"p_z\"\n",
    "supa = np.identity(3, dtype=int)\n",
    "structure = CrystalFTG(vec=vec, atoms=atoms, orbitals=orbitals, supa=supa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "gamma = 1\n",
    "force_constants = {\n",
    "    ( 0,  0, 0): [[ 4 * gamma]],\n",
    "    ( 1,  0, 0): [[-1 * gamma]],\n",
    "    (-1,  0, 0): [[-1 * gamma]],\n",
    "    ( 0,  1, 0): [[-1 * gamma]],\n",
    "    ( 0, -1, 0): [[-1 * gamma]],\n",
    "}\n",
    "ham = ModelHamiltonian()\n",
    "ham.set_hamiltonian(np.array(list(force_constants.keys())), np.array(list(force_constants.values())))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh = np.diag([1, 1, 1])\n",
    "pham = PhononHamiltonian(structure=structure, pg=\"C1\", mesh=mesh)\n",
    "pham.set_hamiltonian(ham)\n",
    "pham.set_hamiltonian_from_mesh()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "vertices = parse_array(\"\"\"\n",
    "    0 0 0\n",
    "    1/2 0 0\n",
    "    1/2 1/2 0\n",
    "    0 0 0\n",
    "\"\"\", dtype=float)\n",
    "vertices_names = [\n",
    "    r\"$\\Gamma$\",\n",
    "    \"X\",\n",
    "    \"R\",\n",
    "    r\"$\\Gamma$\",\n",
    "]\n",
    "kpath = KPath(\n",
    "    vertices=vertices,\n",
    "    vertices_names=vertices_names,\n",
    "    npoints=101,\n",
    ")\n",
    "kpath.set_kpath()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "pham.set_hamiltonian_at_kpoints(kpath.kpoints)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.close()\n",
    "plt.plot(kpath.kpoints_distances, pham._eigenvalues[:, 0])\n",
    "for i in range(len(kpath.vertices_distances)):\n",
    "    plt.plot(\n",
    "        [kpath.vertices_distances[i], kpath.vertices_distances[i]],\n",
    "        [0, np.max(pham._eigenvalues) * 1.05],\n",
    "        c=\"gray\",\n",
    "        ls=\"-\",\n",
    "        lw=1\n",
    "    )\n",
    "plt.ylim(0, np.max(pham._eigenvalues) * 1.05)\n",
    "plt.xticks(kpath.vertices_distances.tolist(), kpath.vertices_names)\n",
    "plt.ylabel(\"Frequencies ({})\".format(pham.units))\n",
    "plt.tight_layout()\n",
    "plt.savefig(\"phonon_band.pdf\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
