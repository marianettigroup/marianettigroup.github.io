{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3a038f27",
   "metadata": {},
   "source": [
    "# Lone Irreducible Derivatives (LID) Approach\n",
    "\n",
    "Here we demonstrate computing phonon of rocksalt with a FTG of 2$\\hat{1}$ using LID approach."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6a297a49",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "from principia_materia.io_interface.qpoints_io import tuple_to_str\n",
    "from principia_materia.io_interface.vasp import parse_poscar\n",
    "from principia_materia.io_interface.jobs_db import JobsDB\n",
    "from principia_materia.phonon_id.lid_mesh import LIDMesh\n",
    "from principia_materia.phonon_id.fourier_interpolation import (\n",
    "    save_FourierInterpolation_to_hdf5,\n",
    "    FourierInterpolation,\n",
    "    )\n",
    "from principia_materia.translation_group import (\n",
    "    get_structure,\n",
    "    CrystalFTG,\n",
    "    save_structure,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5103bd85",
   "metadata": {},
   "outputs": [],
   "source": [
    "POSCAR = \"./nacl_lid/POSCAR\"\n",
    "EPSILON = \"./nacl_lid/epsilon.yml\"\n",
    "\n",
    "ORDER = 2\n",
    "PG = \"Oh\"\n",
    "MESH = np.diag([2, 2, 2])\n",
    "DELTA = np.arange(0.02, 0.21, 0.02)\n",
    "\n",
    "COMPUTE_ENGINE = \"vasp\"\n",
    "\n",
    "ROOT_DIR = \".\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cd828b2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "structure = get_structure(parse_poscar(POSCAR), stype=CrystalFTG)\n",
    "structure.orbitals = \"p\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "212850db",
   "metadata": {},
   "outputs": [],
   "source": [
    "job_handler= JobsDB(\n",
    "  structure=structure,\n",
    "  root_directory=ROOT_DIR,\n",
    "  db_path=\"nacl_lid/database.db\",\n",
    "  db_type=\"sqlite\",\n",
    "  )\n",
    "\n",
    "job_handler.set_table(\"lid_phonon\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "883892c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting up LID for Qpoint: ((0, 0, 0), (0, 0, 0))\n",
      "Setting up LID for Qpoint: ((1/2, 0, 0), (1/2, 0, 0))\n",
      "Setting up LID for Qpoint: ((1/2, 1/2, 0), (1/2, 1/2, 0))\n"
     ]
    }
   ],
   "source": [
    "lid_mesh = LIDMesh(\n",
    "  structure=structure,\n",
    "  supa=MESH,\n",
    "  order=ORDER,\n",
    "  pg=PG,\n",
    "  )\n",
    "lid_mesh.set_lid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b0d2e015",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating jobs for Qpoint: ((0, 0, 0), (0, 0, 0))\n",
      "Creating jobs for Qpoint: ((1/2, 0, 0), (1/2, 0, 0))\n",
      "Creating jobs for Qpoint: ((1/2, 1/2, 0), (1/2, 1/2, 0))\n"
     ]
    }
   ],
   "source": [
    "lid_mesh.create_jobs(\n",
    "    job_handler=job_handler,\n",
    "    deltas=DELTA,\n",
    "    append=True,\n",
    "    dry_run=True,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "57dc004b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "principia_materia/phonon_id/finite_displacements.py:567: Warning: Jobnames of fetched data from database does not match input jobnames.\n",
      "  self._raw_results = source.get_results_from_jobs(\n"
     ]
    }
   ],
   "source": [
    "lid_mesh.set_results(\n",
    "    job_handler=job_handler,\n",
    "    data_type=\"forces\",\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c2e7ef06",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "lid_mesh.set_errortail_results(\n",
    "    pick_min=3,\n",
    "    pick_max=5,\n",
    "    seperate_complex=True,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "68152574",
   "metadata": {},
   "outputs": [],
   "source": [
    "dynamic_tensors = lid_mesh.get_dynamic_tensors()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "040358e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.set_printoptions(linewidth=180, suppress=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b38d025b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((0, 0, 0), (0, 0, 0))\n",
      "[[ 1.71718279  0.          0.         -1.71718279  0.          0.        ]\n",
      " [ 0.          1.71718279  0.          0.         -1.71718279  0.        ]\n",
      " [ 0.          0.          1.71718279  0.          0.         -1.71718279]\n",
      " [-1.71718279  0.          0.          1.71718279  0.          0.        ]\n",
      " [ 0.         -1.71718279  0.          0.          1.71718279  0.        ]\n",
      " [ 0.          0.         -1.71718279  0.          0.          1.71718279]]\n",
      "\n",
      "((1/2, 0, 0), (1/2, 0, 0))\n",
      "[[ 2.18334962 -0.80283112 -0.80283112  0.          0.          0.        ]\n",
      " [-0.80283112  2.18334962  0.80283112  0.          0.          0.        ]\n",
      " [-0.80283112  0.80283112  2.18334962  0.          0.          0.        ]\n",
      " [ 0.          0.          0.          2.30355673 -0.76809942 -0.76809942]\n",
      " [ 0.          0.          0.         -0.76809942  2.30355673  0.76809942]\n",
      " [ 0.          0.          0.         -0.76809942  0.76809942  2.30355673]]\n",
      "\n",
      "((1/2, 1/2, 0), (1/2, 1/2, 0))\n",
      "[[ 1.47829446  0.          0.          1.02011023  0.          0.        ]\n",
      " [ 0.          1.47829446  0.          0.          1.02011023  0.        ]\n",
      " [ 0.          0.          1.99846289  0.          0.         -0.59315421]\n",
      " [ 1.02011023  0.          0.          2.09150467  0.          0.        ]\n",
      " [ 0.          1.02011023  0.          0.          2.09150467  0.        ]\n",
      " [ 0.          0.         -0.59315421  0.          0.          3.44754191]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for i in range(len(lid_mesh.QpointsN.irreducible_Qpoints)):\n",
    "    print(tuple_to_str(lid_mesh.QpointsN.irreducible_Qpoints[i]))\n",
    "    print(dynamic_tensors.real[i])\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "aeb1b3a5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((((0, 0, 0), (T1u, 0)), ((0, 0, 0), (T1u, 0))), (A1g, 0)) 3.4343655807814493\n",
      "((((1/2, 0, 0), (A1g, 0)), ((1/2, 0, 0), (A1g, 0))), (A1g, 0)) 3.8397555620868355\n",
      "((((1/2, 0, 0), (Eg, 0)), ((1/2, 0, 0), (Eg, 0))), (A1g, 0)) 1.5354573135671814\n",
      "((((1/2, 0, 0), (A2u, 0)), ((1/2, 0, 0), (A2u, 0))), (A1g, 0)) 3.7890118518321514\n",
      "((((1/2, 0, 0), (Eu, 0)), ((1/2, 0, 0), (Eu, 0))), (A1g, 0)) 1.380518498899918\n",
      "((((1/2, 1/2, 0), (A2u, 0)), ((1/2, 1/2, 0), (A2u, 0))), (A1g, 0)) 1.9984628918393788\n",
      "((((1/2, 1/2, 0), (A2u, 0)), ((1/2, 1/2, 0), (A2u, 1))), (A1g, 0)) -0.5931542126937984\n",
      "((((1/2, 1/2, 0), (A2u, 1)), ((1/2, 1/2, 0), (A2u, 1))), (A1g, 0)) 3.4475419089558588\n",
      "((((1/2, 1/2, 0), (Eu, 0)), ((1/2, 1/2, 0), (Eu, 0))), (A1g, 0)) 1.478294461872587\n",
      "((((1/2, 1/2, 0), (Eu, 0)), ((1/2, 1/2, 0), (Eu, 1))), (A1g, 0)) 1.0201102280183725\n",
      "((((1/2, 1/2, 0), (Eu, 1)), ((1/2, 1/2, 0), (Eu, 1))), (A1g, 0)) 2.0915046651785705\n"
     ]
    }
   ],
   "source": [
    "for k, v in zip(lid_mesh.get_irreducible_derivative_names(), lid_mesh.get_irreducible_derivatives()):\n",
    "    print(tuple_to_str(k), v.real)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c6ac4af",
   "metadata": {},
   "source": [
    "## Fourier Interpolation (with dipole-dipole contributions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "adaf00d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "fi = lid_mesh.get_fourier_interpolation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bb4e62a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "full_D = fi.get_full_D()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "41b658a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "fi.set_dipoledipole(dataset=EPSILON)\n",
    "fi.set_dipoledipole_contribution()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bd5cbc49",
   "metadata": {},
   "outputs": [],
   "source": [
    "fi.fourier_transform()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcf65603",
   "metadata": {},
   "source": [
    "## Phonon and DOS of NaCl with FTG 4$\\hat{1}$ including LO-TO splitting\n",
    "\n",
    "![Phonon and DOS of NaCl](nacl_lid/figure.pdf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3d91884f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from principia_materia import Fraction\n",
    "from principia_materia.io_interface import parse_array\n",
    "from principia_materia.phonon_id.lid import LoneID_FP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0ffc44ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "Qpoint = np.array(parse_array(\"1/2 0 0; 1/2 0 0\", dtype=Fraction))\n",
    "lid = LoneID_FP(\n",
    "    structure=structure,\n",
    "    Qpoint=Qpoint,\n",
    "    pg=PG,\n",
    "    )\n",
    "lid.set_analytic_tensor()\n",
    "lid.set_displacements_basis()\n",
    "lid.set_displacements()\n",
    "lid.set_realspace_displacements()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
