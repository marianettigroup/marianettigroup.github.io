{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Finite Displacements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from principia_materia.translation_group import CrystalFTG\n",
    "from principia_materia.mathematics.finite_difference import FiniteDifference\n",
    "from principia_materia.phonon_id.finite_displacements import FiniteDisplacements\n",
    "from principia_materia.phonon_id.strained_finite_displacements import StrainedFiniteDisplacements\n",
    "from principia_materia.io_interface.compute_job_series import ComputeJobSeries\n",
    "from principia_materia.io_interface.jobs_db import JobsDB\n",
    "from principia_materia.mathematics.errortail import get_errortail"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# NaCl example\n",
    "lattice_vectors = np.array([\n",
    "    [0.0, 0.5, 0.5],\n",
    "    [0.5, 0.0, 0.5],\n",
    "    [0.5, 0.5, 0.0],\n",
    "])\n",
    "atoms = {\n",
    "    \"Na\": np.array([[0.0, 0.0, 0.0]]),\n",
    "    \"Cl\": np.array([[0.5, 0.5, 0.5]]),\n",
    "}\n",
    "supa = np.identity(3, dtype=int)\n",
    "orbitals = \"p\"\n",
    "structure = CrystalFTG(vec=lattice_vectors, atoms=atoms, supa=supa, orbitals=orbitals)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finite Difference\n",
    "\n",
    "The core mathematical algorithms of finite difference calculations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "fdiff = FiniteDifference(order=(2, 1))\n",
    "fdiff.set_delta(np.arange(0.01, 0.03, 0.01))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "fdiff.set_steps()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2,  1],\n",
       "       [ 2, -1],\n",
       "       [ 0,  1],\n",
       "       [ 0, -1],\n",
       "       [-2,  1],\n",
       "       [-2, -1]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdiff._stencils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.04, -0.02],\n",
       "       [-0.04,  0.02],\n",
       "       [-0.02, -0.01],\n",
       "       [-0.02,  0.01],\n",
       "       [ 0.  , -0.02],\n",
       "       [ 0.  , -0.01],\n",
       "       [ 0.  ,  0.01],\n",
       "       [ 0.  ,  0.02],\n",
       "       [ 0.02, -0.01],\n",
       "       [ 0.02,  0.01],\n",
       "       [ 0.04, -0.02],\n",
       "       [ 0.04,  0.02]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdiff.uniq_steps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finite Displacements\n",
    "\n",
    "Compute derivatives of displacements with finite difference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "supa = np.identity(3, dtype=int) * 2\n",
    "fd = FiniteDisplacements(\n",
    "    structure=structure,\n",
    "    supa=supa,\n",
    "    fdtype=\"c\",\n",
    "    tol=1.0E-6,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "displacements = np.zeros((2, ) + fd.supercell.positions.shape)\n",
    "displacements[0][0, 0] = 1\n",
    "displacements[1][1, 0] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "fd.set_displacement_vectors(dispvecs=displacements, displabels=[1, 2])\n",
    "fd.set_delta([0.01, 0.02])\n",
    "fd.set_jobs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "root_directory = \"fd_runs\"\n",
    "dft_engine = \"vasp\"\n",
    "job_handler = ComputeJobSeries(\n",
    "  structure=fd.supercell,\n",
    "  root_directory=root_directory,\n",
    "  compute_engine=dft_engine,\n",
    "  config_path=None,\n",
    "  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "fd.create_jobs(\n",
    "    job_handler=job_handler,\n",
    "    dry_run=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Strained Finite Displacements\n",
    "\n",
    "Compute derivatives of strain and displacements with finite difference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "e_xx = np.array([[1, 0, 0], [0, 0, 0], [0, 0, 0]]) # xx\n",
    "e_yy = np.array([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) # yy\n",
    "e_zz = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 1]]) # zz\n",
    "e_xy = np.array([[0, 1/2, 0], [1/2, 0, 0], [0, 0, 0]]) # xy\n",
    "e_xz = np.array([[0, 0, 1/2], [0, 0, 0], [1/2, 0, 0]]) # xz\n",
    "e_yz = np.array([[0, 0, 0], [0, 0, 1/2], [0, 1/2, 0]]) # yz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "supa = np.identity(structure.dim, dtype=int)\n",
    "sfd = StrainedFiniteDisplacements(\n",
    "  structure=structure,\n",
    "  supa=supa,\n",
    "  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "sfd.set_strain(strain=[e_xx, ], strain_orders=(2, ))\n",
    "strain_delta = np.arange(0.005, 0.03, 0.005)\n",
    "sfd.set_strain_delta(strain_delta)\n",
    "sfd.set_finite_difference()\n",
    "sfd.set_jobs(skip_zero=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.05],\n",
       "       [-0.04],\n",
       "       [-0.03],\n",
       "       [-0.02],\n",
       "       [-0.01],\n",
       "       [ 0.  ],\n",
       "       [ 0.01],\n",
       "       [ 0.02],\n",
       "       [ 0.03],\n",
       "       [ 0.04],\n",
       "       [ 0.05]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sfd._finite_difference.uniq_steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "job_handler = JobsDB(\n",
    "  structure=structure,\n",
    "  root_directory=\"nacl_sfd\",\n",
    "  db_path=\"nacl_sfd/database.db\",\n",
    "  db_type=\"sqlite\"\n",
    "  )\n",
    "job_handler.set_table(\"strain\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "sfd.create_jobs(\n",
    "  job_handler=job_handler,\n",
    "  dry_run=True,\n",
    "  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "sfd.set_raw_results(\n",
    "  source=job_handler,\n",
    "  data_type=\"energy\"\n",
    "  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "sfd.compute_finite_displacements()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "result, xcoef, pick, penalty = get_errortail(\n",
    "  deltas=strain_delta,\n",
    "  values=sfd.fd_result.reshape((-1, 1)),\n",
    "  fdtype=\"c\",\n",
    "  pick_min=3,\n",
    "  pick_max=5,\n",
    "  seperate_complex=False,\n",
    "  return_xcoef=True,\n",
    "  return_pick=True,\n",
    "  return_penalty=True,\n",
    "  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13.750108012806797"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Errortail for strain derivative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "errortail_x = np.linspace(0, strain_delta[-1], 100)\n",
    "errortail_y = np.power(errortail_x, 2) * xcoef[0] + result[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(errortail_x, errortail_y, c='tab:blue', ls=\"-\", label=\"Errortail\")\n",
    "plt.plot(strain_delta, sfd.fd_result, c=\"tab:green\", ls=\"\", marker=\"o\", label=\"Data points\")\n",
    "plt.plot(strain_delta[pick[0]], sfd.fd_result[pick[0]], c=\"tab:red\", ls=\"\", marker=\"^\", ms=10, label=\"Picks\")\n",
    "plt.title(\"$a_0$ = {:6.3f}\".format(result[0]))\n",
    "plt.legend()\n",
    "plt.ylabel(r\"$\\Delta^2 V/\\Delta\\epsilon^2_{xx}$ $(eV)$\")\n",
    "plt.xlabel(r\"$\\Delta$\")\n",
    "plt.tight_layout()\n",
    "plt.savefig(\"sfd_errortail.pdf\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
