{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import itertools\n",
    "from fractions import Fraction\n",
    "#\n",
    "from principia_materia.translation_group import CrystalFTG\n",
    "from principia_materia.io_interface import parse_array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "vec = np.array([\n",
    "[0.0, 0.5, 0.5],\n",
    "[0.5, 0.0, 0.5],\n",
    "[0.5, 0.5, 0.0]])\n",
    "atoms = {\n",
    "  \"Pb\": [\n",
    "    [0, 0, 0],\n",
    "    ],\n",
    "  \"Te\": [\n",
    "    [0.5, 0.5, 0.5],\n",
    "    ],\n",
    "  }\n",
    "supa = np.array([\n",
    "[2, 0, 0],\n",
    "[0, 2, 0],\n",
    "[0, 0, 2]])\n",
    "orbitals = \"p\"\n",
    "xt = CrystalFTG(vec=vec, atoms=atoms, supa=supa, orbitals=orbitals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "vec = np.eye(3)\n",
    "atoms = {\n",
    "  \"Pb\": [\n",
    "    [0, 0, 0],\n",
    "    ],\n",
    "  \"Te\": [\n",
    "    [0.5, 0.5, 0],\n",
    "    ],\n",
    "  }\n",
    "supa = np.array([\n",
    "[2, 0, 0],\n",
    "[0, 2, 0],\n",
    "[0, 0, 1]])\n",
    "orbitals = \"p\"\n",
    "xt = CrystalFTG(vec=vec, atoms=atoms, supa=supa, orbitals=orbitals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OrderedDict([((0, 'p_x'), array([[ 0.5+0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [-0.5-6.1232340e-17j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [-0.5-6.1232340e-17j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0.5+1.2246468e-16j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j]])), ((0, 'p_y'), array([[ 0. +0.0000000e+00j,  0.5+0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j, -0.5-6.1232340e-17j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j, -0.5-6.1232340e-17j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0.5+1.2246468e-16j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j]])), ((0, 'p_z'), array([[ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0.5+0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j, -0.5-6.1232340e-17j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j, -0.5-6.1232340e-17j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0.5+1.2246468e-16j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j]])), ((1, 'p_x'), array([[ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0.5+0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [-0.5-6.1232340e-17j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [-0.5-6.1232340e-17j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0.5+1.2246468e-16j,  0. +0.0000000e+00j,  0. +0.0000000e+00j]])), ((1, 'p_y'), array([[ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0.5+0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j, -0.5-6.1232340e-17j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j, -0.5-6.1232340e-17j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0.5+1.2246468e-16j,  0. +0.0000000e+00j]])), ((1, 'p_z'), array([[ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0. +0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0.5+0.0000000e+00j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j, -0.5-6.1232340e-17j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j, -0.5-6.1232340e-17j],\n",
      "       [ 0. +0.0000000e+00j,  0. +0.0000000e+00j,  0.5+1.2246468e-16j]]))])\n"
     ]
    }
   ],
   "source": [
    "qpoint = parse_array(\"1/2 1/2 0\", Fraction)\n",
    "print(xt.get_basis_at_q(qpoint))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OrderedDict([((0, 'p_x'), array([[0.5+0.j, 0. +0.j, 0. +0.j],\n",
      "       [0.5+0.j, 0. +0.j, 0. +0.j],\n",
      "       [0.5+0.j, 0. +0.j, 0. +0.j],\n",
      "       [0.5+0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j]])), ((0, 'p_y'), array([[0. +0.j, 0.5+0.j, 0. +0.j],\n",
      "       [0. +0.j, 0.5+0.j, 0. +0.j],\n",
      "       [0. +0.j, 0.5+0.j, 0. +0.j],\n",
      "       [0. +0.j, 0.5+0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j]])), ((0, 'p_z'), array([[0. +0.j, 0. +0.j, 0.5+0.j],\n",
      "       [0. +0.j, 0. +0.j, 0.5+0.j],\n",
      "       [0. +0.j, 0. +0.j, 0.5+0.j],\n",
      "       [0. +0.j, 0. +0.j, 0.5+0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j]])), ((1, 'p_x'), array([[0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0.5+0.j, 0. +0.j, 0. +0.j],\n",
      "       [0.5+0.j, 0. +0.j, 0. +0.j],\n",
      "       [0.5+0.j, 0. +0.j, 0. +0.j],\n",
      "       [0.5+0.j, 0. +0.j, 0. +0.j]])), ((1, 'p_y'), array([[0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0.5+0.j, 0. +0.j],\n",
      "       [0. +0.j, 0.5+0.j, 0. +0.j],\n",
      "       [0. +0.j, 0.5+0.j, 0. +0.j],\n",
      "       [0. +0.j, 0.5+0.j, 0. +0.j]])), ((1, 'p_z'), array([[0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0. +0.j],\n",
      "       [0. +0.j, 0. +0.j, 0.5+0.j],\n",
      "       [0. +0.j, 0. +0.j, 0.5+0.j],\n",
      "       [0. +0.j, 0. +0.j, 0.5+0.j],\n",
      "       [0. +0.j, 0. +0.j, 0.5+0.j]]))])\n"
     ]
    }
   ],
   "source": [
    "qpoint = parse_array(\"0 0 0\", Fraction)\n",
    "print(xt.get_basis_at_q(qpoint))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "i = 2\n",
    "tvecs = np.array(list(\\\n",
    "              set(itertools.product(np.arange(- i, i + 1), repeat=3)) \\\n",
    "#               - set(itertools.product(np.arange(- (i - 1), i), repeat=3))\n",
    "             )\n",
    "        )\n",
    "# np.dot(\n",
    "#     xt.vec)\n",
    "# tvecs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "tvecs = np.array(sorted(tvecs, key=np.linalg.norm))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0.])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "center = xt.positions[0]\n",
    "center"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.  , 0.  , 0.  ],\n",
       "       [0.5 , 0.  , 0.  ],\n",
       "       [0.  , 0.5 , 0.  ],\n",
       "       [0.5 , 0.5 , 0.  ],\n",
       "       [0.25, 0.25, 0.  ],\n",
       "       [0.75, 0.25, 0.  ],\n",
       "       [0.25, 0.75, 0.  ],\n",
       "       [0.75, 0.75, 0.  ]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xt.positions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xt.ws_weight([1, 0, 0], lattice_coordinate=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xt._ws.weight([1, 0, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2., 0., 0.],\n",
       "       [0., 2., 0.],\n",
       "       [0., 0., 1.]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xt.vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.5       , 1.41421356, 1.5       , 1.11803399, 1.        ,\n",
       "       1.11803399, 1.5       , 1.41421356, 1.5       , 1.11803399,\n",
       "       1.        , 1.11803399, 0.5       , 0.5       , 1.11803399,\n",
       "       1.        , 1.11803399, 1.5       , 1.41421356, 1.5       ,\n",
       "       1.11803399, 1.        , 1.11803399, 1.5       , 1.41421356,\n",
       "       1.5       ])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xt._ws.wsdists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "weights = xt.ws_weight(tvecs + xt.positions[1] - center)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  0,  0],\n",
       "       [-1,  0,  0]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.dot(tvecs[weights.nonzero()], xt.supa) + xt.supa_translations[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_wigner_seitz_cell(self, center):\n",
    "  ws_cell_translation = []\n",
    "  ws_cell_atoms = []\n",
    "  ws_cell_weights = []\n",
    "  nrange = 0\n",
    "  while not np.allclose(np.sum(ws_cell_weights), self.natoms):\n",
    "    tvecs = np.array(list(\\\n",
    "              set(itertools.product(np.arange(- nrange, nrange + 1), repeat=self.dim)) \\\n",
    "              - set(itertools.product(np.arange(- (nrange - 1), nrange), repeat=self.dim))\n",
    "             )\n",
    "          )\n",
    "    for i in range(self.natoms):\n",
    "      weights = self.ws_weight(tvecs + self.positions[i] - center)\n",
    "      for j in weights.nonzero()[0]:\n",
    "        ws_cell_translation.append(np.dot(tvecs[j], self.supa) + self.supa_translations[i])\n",
    "        ws_cell_atoms.append(i)\n",
    "        ws_cell_weights.append(weights[j])\n",
    "    nrange += 1\n",
    "    if nrange > 5:\n",
    "      raise RuntimeError(\"Failed to find all atoms in the Wigner-Seitz cell.\")\n",
    "          \n",
    "  atoms_weight = np.zeros(self.natoms)\n",
    "  for i, j in zip(ws_cell_atoms, ws_cell_weights):\n",
    "    atoms_weight[i] += j\n",
    "  if not np.allclose(atoms_weight, np.ones(self.natoms)):\n",
    "    raise ValueError(\"Error in determining WS cell, not all atoms have total weight of 1.\")\n",
    "\n",
    "  ws_cell_translation =  np.array(ws_cell_translation)\n",
    "  ws_cell_atoms =  np.array(ws_cell_atoms)\n",
    "  ws_cell_weights = np.array(ws_cell_weights)\n",
    "  return ws_cell_translation, ws_cell_atoms, ws_cell_weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "ws_cell_translation, ws_cell_atoms, ws_cell_weights = get_wigner_seitz_cell(self=xt, center=xt.positions[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 1, 2, 3, 3, 3, 5, 6, 7])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ws_cell_atoms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8.0, 8)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(ws_cell_weights), xt.natoms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(array([0, 0, 0]), 0, 1.0),\n",
       " (array([1, 0, 0]), 0, 0.5),\n",
       " (array([0, 1, 0]), 0, 0.5),\n",
       " (array([1, 1, 0]), 0, 0.25),\n",
       " (array([0, 0, 0]), 1, 1.0),\n",
       " (array([-1,  0,  0]), 0, 0.5),\n",
       " (array([ 0, -1,  0]), 0, 0.5),\n",
       " (array([ 1, -1,  0]), 0, 0.25),\n",
       " (array([-1, -1,  0]), 0, 0.25),\n",
       " (array([-1,  1,  0]), 0, 0.25),\n",
       " (array([-1,  0,  0]), 1, 1.0),\n",
       " (array([ 0, -1,  0]), 1, 1.0),\n",
       " (array([-1, -1,  0]), 1, 1.0)]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(zip(ws_cell_translation, xt.supa_atoms_map[ws_cell_atoms], ws_cell_weights))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8, 3)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xt.positions.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0. , 0. , 0. ],\n",
       "       [0.5, 0.5, 0. ]])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xt.primitive.positions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<principia_materia.translation_group.crystal_ftg.CrystalFTG at 0x7fd8c8ee5fd0>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "from principia_materia.translation_group import Lattice\n",
    "from principia_materia.translation_group.cluster import Cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(True, True)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isinstance(xt, Lattice), isinstance(xt, Cluster)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
