{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lone irreducible derivatives approach\n",
    "\n",
    "Lone irreducible derivatives approach (LID) tries to measure each irreducible derivative individually, opposite to BID approach.\n",
    "In this approach, irreducible derivatives will be probed and measured mostly independently, eliminating the noise and interference that could happen when measuring multiple of them at the same time. As a result, the computational cost can be exponentially more expensive than BID approach. However, it also allows the study of the specific irreducible derivatives at specific Q-points when needed. \n",
    "\n",
    "Below let's look at an example of rocksalt. In this example, we use DFT to compute forces of a given displacement, letting the DFT engine VASP compute the first derivative of the energy, thus we use the default setting for hidden_order parameter $\\textrm{hidden_order}=1$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from principia_materia import Fraction\n",
    "from principia_materia.io_interface import parse_array\n",
    "from principia_materia.phonon_id.lid import LoneID_FP\n",
    "from principia_materia.io_interface.vasp import parse_poscar\n",
    "from principia_materia.translation_group import get_structure, CrystalFTG"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "structure = get_structure(parse_poscar(\"nacl/POSCAR\"), stype=CrystalFTG)\n",
    "structure.orbitals = \"p\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we pick a random Q-point $((\\frac{1}{4}, 0, 0), (\\frac{3}{4}, 0, 0), (0, 0, 0))$ to compute LID for."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "Qpoint = np.array(parse_array(\"1/4 0 0; 3/4 0 0; 0 0 0\", dtype=Fraction))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "lid = LoneID_FP(structure=structure, Qpoint=Qpoint, pg=\"Oh\")\n",
    "lid.set_analytic_tensor()\n",
    "lid.set_displacements_basis()\n",
    "lid.set_displacements()\n",
    "lid.set_realspace_displacements()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To create DFT jobs to compute the displacements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "lid.create_dft_jobs(\n",
    "    root_directory=\"test_lid\",\n",
    "    deltas=[0.01, 0.02, 0.03],\n",
    "    dft_engine=\"vasp\",\n",
    "    jobname_prefix=\"test_job_\",\n",
    "    dry_run=True,\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To compute irreducible derivatives and dynamic tensor from DFT calculations:\n",
    "\n",
    "```python\n",
    "lid.get_results(root_directory=\"test_lid\", dft_engine=\"vasp\", data_type=\"forces\")\n",
    "lid.get_errortail_results()\n",
    "lid.set_dynamic_tensor()\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
