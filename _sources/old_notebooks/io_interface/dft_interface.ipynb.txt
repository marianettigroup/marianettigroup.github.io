{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DFTJob\n",
    "\n",
    "DFT interface for a single DFT job.\n",
    "This provides a framework to interface with various DFT engines in a uniform way from our package.\n",
    "It's capable of creating DFT jobs and reading results that are needed for the computations in the code.\n",
    "\n",
    "In the process of creating a DFT job for a supercell, the code is also capable of rescale the reciprocal space integration mesh (kmesh) according the the shape of the supercell.\n",
    "\n",
    "For now the information we are extracting from DFT engines are\n",
    "\n",
    "1. born effective charges\n",
    "1. dielectric tensor\n",
    "1. energy\n",
    "1. forces\n",
    "1. stress\n",
    "\n",
    "more will be added if necessary.\n",
    "\n",
    "The abstract class `DFTJob` serves as the framework for the interfaces for various DFT engines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from principia_materia.io_interface.dft_job import DFTJob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on class DFTJob in module principia_materia.io_interface.dft_job:\n",
      "\n",
      "class DFTJob(builtins.object)\n",
      " |  DFTJob(path, structure=None)\n",
      " |  \n",
      " |  A DFT job.\n",
      " |  \n",
      " |  First of all, this class holds 1 DFT job. It is capable of processing configurations,\n",
      " |  creating a DFT job, parsing certain output of the DFT job, and more.\n",
      " |  Due to the large size of common DFT runs, the outputs of the DFT job are parse only\n",
      " |  when they are needed.\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __init__(self, path, structure=None)\n",
      " |      Initialize self.  See help(type(self)) for accurate signature.\n",
      " |  \n",
      " |  create_dft_job(self, out=None, is_static=True, displacement=None, velocities=None)\n",
      " |      Create configuration files needed to run a DFT job.\n",
      " |  \n",
      " |  get_born_effective_charges(self)\n",
      " |  \n",
      " |  get_dielectric_tensor(self)\n",
      " |  \n",
      " |  get_energy(self)\n",
      " |  \n",
      " |  get_forces(self)\n",
      " |  \n",
      " |  get_stress(self)\n",
      " |  \n",
      " |  initialize_configuration(self, config_path=None)\n",
      " |      Initialize configurations of the DFT jobs.\n",
      " |      \n",
      " |      Configurations of a DFT jobs includes cutoff energy, kpoint mesh,\n",
      " |      error tolorence, magnetic moments, etc.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      config_path  :  str, path to directory\n",
      " |          The directory where configuration of DFT job is stored.\n",
      " |  \n",
      " |  rescale_kmesh(self)\n",
      " |      Resscale kmesh according to supercell.\n",
      " |  \n",
      " |  set_kmesh(self, kmesh)\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      " |  \n",
      " |  is_job_finished\n",
      " |  \n",
      " |  path\n",
      " |  \n",
      " |  structure\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes defined here:\n",
      " |  \n",
      " |  __abstractmethods__ = frozenset({'is_job_finished'})\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(DFTJob)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## VASPJob\n",
    "\n",
    "In the case of VASP, we have this `VASPJob` class, derived from the abstract class, it can create DFT jobs with the necessary input files and parse the output. \n",
    "\n",
    "There are 2 options to parse the output file from VASP, \n",
    "1. parsing plain text from OUTCAR file\n",
    "2. parsing xml from vasprun.xml file\n",
    "both can be supported, for simplicily on the option 2 is implemented."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from principia_materia.io_interface.vasp import VASPJob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on class VASPJob in module principia_materia.io_interface.vasp:\n",
      "\n",
      "class VASPJob(principia_materia.io_interface.dft_job.DFTJob)\n",
      " |  VASPJob(path, structure=None, poscar=None, read_xml=False, title=None)\n",
      " |  \n",
      " |  A VASP DFT job\n",
      " |  \n",
      " |  Method resolution order:\n",
      " |      VASPJob\n",
      " |      principia_materia.io_interface.dft_job.DFTJob\n",
      " |      builtins.object\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __init__(self, path, structure=None, poscar=None, read_xml=False, title=None)\n",
      " |      Initialize self.  See help(type(self)) for accurate signature.\n",
      " |  \n",
      " |  close(self)\n",
      " |  \n",
      " |  create_dft_job(self, out=None, is_static=True, displacement=None, selective_dynamics=None, velocities=None)\n",
      " |      Create configuration files needed to run a DFT job.\n",
      " |  \n",
      " |  get_born_effective_charges(self)\n",
      " |  \n",
      " |  get_dielectric_tensor(self)\n",
      " |  \n",
      " |  get_energy(self)\n",
      " |  \n",
      " |  get_forces(self)\n",
      " |  \n",
      " |  get_stress(self)\n",
      " |  \n",
      " |  initialize_configuration(self, config_path=None)\n",
      " |      Initialize configurations of the DFT jobs.\n",
      " |      \n",
      " |      Configurations of a DFT jobs includes cutoff energy, kpoint mesh,\n",
      " |      error tolorence, magnetic moments, etc.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      config_path  :  str, path to directory\n",
      " |          The directory where configuration of DFT job is stored.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  is_job_finished\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes defined here:\n",
      " |  \n",
      " |  __abstractmethods__ = frozenset()\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from principia_materia.io_interface.dft_job.DFTJob:\n",
      " |  \n",
      " |  rescale_kmesh(self)\n",
      " |      Resscale kmesh according to supercell.\n",
      " |  \n",
      " |  set_kmesh(self, kmesh)\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors inherited from principia_materia.io_interface.dft_job.DFTJob:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      " |  \n",
      " |  path\n",
      " |  \n",
      " |  structure\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(VASPJob)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
